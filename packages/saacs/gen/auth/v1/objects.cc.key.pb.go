// Code generated by protoc-gen-go-hlf. DO NOT EDIT.
// versions:
// - protoc-gen-cckey v0.0.1
// source: auth/v1/objects.proto

package v1

func (m *ReferenceKey) ItemType() string {
	return "auth.ReferenceKey"
}
func (m *Collection) ItemType() string {
	return "auth.Collection"
}
func (m *Collection) KeyAttr() []string {
	attr := []string{}
	attr = append(attr, m.GetCollectionId())
	return attr
}
func (m *Collection) SetKeyAttr(attr []string) {
	if len(attr) > 0 {
		m.CollectionId = attr[0]
	} else {
		return
	}
	return
}

// Domain Item
func (m *Collection) IsPrimary() bool {
	return true
}
func (m *Collection) SetKey(key *ItemKey) {
	m.SetKeyAttr(key.ItemIdParts)
	m.CollectionId = key.GetCollectionId()
	return
}
func (m *Collection) ItemKey() *ItemKey {
	key := &ItemKey{
		CollectionId: m.GetCollectionId(),
		ItemType:     "auth.Collection",
		ItemIdParts:  m.KeyAttr(),
	}
	return key
}
func (m *Role) ItemType() string {
	return "auth.Role"
}
func (m *Role) KeyAttr() []string {
	attr := []string{}
	attr = append(attr, m.GetRoleId())
	return attr
}
func (m *Role) SetKeyAttr(attr []string) {
	if len(attr) > 0 {
		m.RoleId = attr[0]
	} else {
		return
	}
	return
}

// Domain Item
func (m *Role) IsPrimary() bool {
	return true
}
func (m *Role) SetKey(key *ItemKey) {
	m.SetKeyAttr(key.ItemIdParts)
	m.CollectionId = key.GetCollectionId()
	return
}
func (m *Role) ItemKey() *ItemKey {
	key := &ItemKey{
		CollectionId: m.GetCollectionId(),
		ItemType:     "auth.Role",
		ItemIdParts:  m.KeyAttr(),
	}
	return key
}
func (m *Attribute) ItemType() string {
	return "auth.Attribute"
}
func (m *UserMembership) ItemType() string {
	return "auth.UserMembership"
}
func (m *UserMembership) KeyAttr() []string {
	attr := []string{}
	attr = append(attr, m.GetMspId())
	attr = append(attr, m.GetUserId())
	return attr
}
func (m *UserMembership) SetKeyAttr(attr []string) {
	if len(attr) > 0 {
		m.MspId = attr[0]
	} else {
		return
	}
	if len(attr) > 1 {
		m.UserId = attr[1]
	} else {
		return
	}
	return
}

// Domain Item
func (m *UserMembership) IsPrimary() bool {
	return true
}
func (m *UserMembership) SetKey(key *ItemKey) {
	m.SetKeyAttr(key.ItemIdParts)
	m.CollectionId = key.GetCollectionId()
	return
}
func (m *UserMembership) ItemKey() *ItemKey {
	key := &ItemKey{
		CollectionId: m.GetCollectionId(),
		ItemType:     "auth.UserMembership",
		ItemIdParts:  m.KeyAttr(),
	}
	return key
}
func (m *UserCollectionRoles) ItemType() string {
	return "auth.UserCollectionRoles"
}
func (m *UserCollectionRoles) KeyAttr() []string {
	attr := []string{}
	attr = append(attr, m.GetMspId())
	attr = append(attr, m.GetUserId())
	return attr
}
func (m *UserCollectionRoles) SetKeyAttr(attr []string) {
	if len(attr) > 0 {
		m.MspId = attr[0]
	} else {
		return
	}
	if len(attr) > 1 {
		m.UserId = attr[1]
	} else {
		return
	}
	return
}

// Domain Item
func (m *UserCollectionRoles) IsPrimary() bool {
	return true
}
func (m *UserCollectionRoles) SetKey(key *ItemKey) {
	m.SetKeyAttr(key.ItemIdParts)
	m.CollectionId = key.GetCollectionId()
	return
}
func (m *UserCollectionRoles) ItemKey() *ItemKey {
	key := &ItemKey{
		CollectionId: m.GetCollectionId(),
		ItemType:     "auth.UserCollectionRoles",
		ItemIdParts:  m.KeyAttr(),
	}
	return key
}
func (m *Suggestion) ItemType() string {
	return "auth.Suggestion"
}
func (m *Suggestion) KeyAttr() []string {
	attr := []string{}
	attr = append(attr, m.GetSuggestionId())
	return attr
}
func (m *Suggestion) SetKeyAttr(attr []string) {
	if len(attr) > 0 {
		m.SuggestionId = attr[0]
	} else {
		return
	}
	return
}

// Domain Item
func (m *Suggestion) IsSecondary() bool {
	return true
}
func (m *Suggestion) SetKey(key *ItemKey) {
	m.PrimaryKey = key
	return
}
func (m *Suggestion) ItemKey() *ItemKey {
	return m.GetPrimaryKey()
}
func (m *HiddenTxList) ItemType() string {
	return "auth.HiddenTxList"
}
