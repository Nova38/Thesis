// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file auth/v1/auth.proto (package auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, FieldMask, Message, proto3, Timestamp } from "@bufbuild/protobuf";
/**
 * @generated from enum auth.TransactionType
 */
export var TransactionType;
(function (TransactionType) {
    /**
     * @generated from enum value: TRANSACTION_TYPE_UNSPECIFIED = 0;
     */
    TransactionType[TransactionType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: TRANSACTION_TYPE_INVOKE = 1;
     */
    TransactionType[TransactionType["INVOKE"] = 1] = "INVOKE";
    /**
     * @generated from enum value: TRANSACTION_TYPE_QUERY = 2;
     */
    TransactionType[TransactionType["QUERY"] = 2] = "QUERY";
})(TransactionType = TransactionType || (TransactionType = {}));
// Retrieve enum metadata with: proto3.getEnumType(TransactionType)
proto3.util.setEnumType(TransactionType, "auth.TransactionType", [
    { no: 0, name: "TRANSACTION_TYPE_UNSPECIFIED" },
    { no: 1, name: "TRANSACTION_TYPE_INVOKE" },
    { no: 2, name: "TRANSACTION_TYPE_QUERY" },
]);
/**
 * @generated from enum auth.AuthType
 */
export var AuthType;
(function (AuthType) {
    /**
     * @generated from enum value: AUTH_TYPE_UNSPECIFIED = 0;
     */
    AuthType[AuthType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: AUTH_TYPE_NONE = 1;
     */
    AuthType[AuthType["NONE"] = 1] = "NONE";
    /**
     * @generated from enum value: AUTH_TYPE_ROLE = 2;
     */
    AuthType[AuthType["ROLE"] = 2] = "ROLE";
    /**
     * @generated from enum value: AUTH_TYPE_IDENTITY = 3;
     */
    AuthType[AuthType["IDENTITY"] = 3] = "IDENTITY";
})(AuthType = AuthType || (AuthType = {}));
// Retrieve enum metadata with: proto3.getEnumType(AuthType)
proto3.util.setEnumType(AuthType, "auth.AuthType", [
    { no: 0, name: "AUTH_TYPE_UNSPECIFIED" },
    { no: 1, name: "AUTH_TYPE_NONE" },
    { no: 2, name: "AUTH_TYPE_ROLE" },
    { no: 3, name: "AUTH_TYPE_IDENTITY" },
]);
/**
 * @generated from enum auth.ItemKind
 */
export var ItemKind;
(function (ItemKind) {
    /**
     * @generated from enum value: ITEM_KIND_UNSPECIFIED = 0;
     */
    ItemKind[ItemKind["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * ITEM_KIND_GLOBAL_ITEM = 1;
     * Item's key := {COLLECTION_ID}{TYPE}[...key_paths]
     *
     * @generated from enum value: ITEM_KIND_PRIMARY_ITEM = 2;
     */
    ItemKind[ItemKind["PRIMARY_ITEM"] = 2] = "PRIMARY_ITEM";
    /**
     * Item's key := {COLLECTION_ID}{TYPE}<PrimaryKey>{...key_paths}
     *
     * @generated from enum value: ITEM_KIND_SUB_ITEM = 3;
     */
    ItemKind[ItemKind["SUB_ITEM"] = 3] = "SUB_ITEM";
    /**
     * @generated from enum value: ITEM_KIND_REFERENCE = 4;
     */
    ItemKind[ItemKind["REFERENCE"] = 4] = "REFERENCE";
})(ItemKind = ItemKind || (ItemKind = {}));
// Retrieve enum metadata with: proto3.getEnumType(ItemKind)
proto3.util.setEnumType(ItemKind, "auth.ItemKind", [
    { no: 0, name: "ITEM_KIND_UNSPECIFIED" },
    { no: 2, name: "ITEM_KIND_PRIMARY_ITEM" },
    { no: 3, name: "ITEM_KIND_SUB_ITEM" },
    { no: 4, name: "ITEM_KIND_REFERENCE" },
]);
/**
 * @generated from enum auth.Action
 */
export var Action;
(function (Action) {
    /**
     * Should throw an error if used
     *
     * @generated from enum value: ACTION_UNSPECIFIED = 0;
     */
    Action[Action["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: ACTION_UTILITY = 1;
     */
    Action[Action["UTILITY"] = 1] = "UTILITY";
    /**
     * View the contents of an item
     *
     * @generated from enum value: ACTION_VIEW = 10;
     */
    Action[Action["VIEW"] = 10] = "VIEW";
    /**
     * Create a new item
     *  - key must not already exist
     *
     * @generated from enum value: ACTION_CREATE = 11;
     */
    Action[Action["CREATE"] = 11] = "CREATE";
    /**
     * Update an existing item
     *   - key must already exist
     *   - potential has paths
     *
     * @generated from enum value: ACTION_UPDATE = 12;
     */
    Action[Action["UPDATE"] = 12] = "UPDATE";
    /**
     * Delete an existing item, key must already exist
     *
     * @generated from enum value: ACTION_DELETE = 13;
     */
    Action[Action["DELETE"] = 13] = "DELETE";
    /**
     * Suggest a change to an item, key must already exist
     *
     * @generated from enum value: ACTION_SUGGEST_VIEW = 14;
     */
    Action[Action["SUGGEST_VIEW"] = 14] = "SUGGEST_VIEW";
    /**
     * Suggest a change to an item, key must already exist
     *
     * @generated from enum value: ACTION_SUGGEST_CREATE = 15;
     */
    Action[Action["SUGGEST_CREATE"] = 15] = "SUGGEST_CREATE";
    /**
     * Delete a suggestion, key must already exist
     *
     * @generated from enum value: ACTION_SUGGEST_DELETE = 16;
     */
    Action[Action["SUGGEST_DELETE"] = 16] = "SUGGEST_DELETE";
    /**
     * Approve a suggestion and apply it to the item, key must already exist
     *
     * @generated from enum value: ACTION_SUGGEST_APPROVE = 17;
     */
    Action[Action["SUGGEST_APPROVE"] = 17] = "SUGGEST_APPROVE";
    /**
     * @generated from enum value: ACTION_VIEW_HISTORY = 18;
     */
    Action[Action["VIEW_HISTORY"] = 18] = "VIEW_HISTORY";
    /**
     * @generated from enum value: ACTION_VIEW_HIDDEN_TXS = 19;
     */
    Action[Action["VIEW_HIDDEN_TXS"] = 19] = "VIEW_HIDDEN_TXS";
    /**
     * @generated from enum value: ACTION_HIDE_TX = 20;
     */
    Action[Action["HIDE_TX"] = 20] = "HIDE_TX";
    /**
     * @generated from enum value: ACTION_UNHIDE_TX = 21;
     */
    Action[Action["UNHIDE_TX"] = 21] = "UNHIDE_TX";
    /**
     * @generated from enum value: ACTION_REFERENCE_CREATE = 30;
     */
    Action[Action["REFERENCE_CREATE"] = 30] = "REFERENCE_CREATE";
    /**
     * @generated from enum value: ACTION_REFERENCE_DELETE = 31;
     */
    Action[Action["REFERENCE_DELETE"] = 31] = "REFERENCE_DELETE";
    /**
     * @generated from enum value: ACTION_REFERENCE_VIEW = 32;
     */
    Action[Action["REFERENCE_VIEW"] = 32] = "REFERENCE_VIEW";
})(Action = Action || (Action = {}));
// Retrieve enum metadata with: proto3.getEnumType(Action)
proto3.util.setEnumType(Action, "auth.Action", [
    { no: 0, name: "ACTION_UNSPECIFIED" },
    { no: 1, name: "ACTION_UTILITY" },
    { no: 10, name: "ACTION_VIEW" },
    { no: 11, name: "ACTION_CREATE" },
    { no: 12, name: "ACTION_UPDATE" },
    { no: 13, name: "ACTION_DELETE" },
    { no: 14, name: "ACTION_SUGGEST_VIEW" },
    { no: 15, name: "ACTION_SUGGEST_CREATE" },
    { no: 16, name: "ACTION_SUGGEST_DELETE" },
    { no: 17, name: "ACTION_SUGGEST_APPROVE" },
    { no: 18, name: "ACTION_VIEW_HISTORY" },
    { no: 19, name: "ACTION_VIEW_HIDDEN_TXS" },
    { no: 20, name: "ACTION_HIDE_TX" },
    { no: 21, name: "ACTION_UNHIDE_TX" },
    { no: 30, name: "ACTION_REFERENCE_CREATE" },
    { no: 31, name: "ACTION_REFERENCE_DELETE" },
    { no: 32, name: "ACTION_REFERENCE_VIEW" },
]);
/**
 * @generated from enum auth.TxError
 */
export var TxError;
(function (TxError) {
    /**
     * @generated from enum value: UNSPECIFIED = 0;
     */
    TxError[TxError["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: REQUEST_INVALID = 1;
     */
    TxError[TxError["REQUEST_INVALID"] = 1] = "REQUEST_INVALID";
    /**
     * @generated from enum value: RUNTIME = 2;
     */
    TxError[TxError["RUNTIME"] = 2] = "RUNTIME";
    /**
     * @generated from enum value: RUNTIME_BAD_OPS = 3;
     */
    TxError[TxError["RUNTIME_BAD_OPS"] = 3] = "RUNTIME_BAD_OPS";
    /**
     * The provided key is not in the world state
     *
     * @generated from enum value: KEY_NOT_FOUND = 4;
     */
    TxError[TxError["KEY_NOT_FOUND"] = 4] = "KEY_NOT_FOUND";
    /**
     * The provided key is already in the world state
     *
     * @generated from enum value: KEY_ALREADY_EXISTS = 5;
     */
    TxError[TxError["KEY_ALREADY_EXISTS"] = 5] = "KEY_ALREADY_EXISTS";
    /**
     * The collection id is invalid
     *
     * @generated from enum value: COLLECTION_INVALID_ID = 11;
     */
    TxError[TxError["COLLECTION_INVALID_ID"] = 11] = "COLLECTION_INVALID_ID";
    /**
     * The collection is not registered and thus cannot be accessed
     *
     * @generated from enum value: COLLECTION_UNREGISTERED = 12;
     */
    TxError[TxError["COLLECTION_UNREGISTERED"] = 12] = "COLLECTION_UNREGISTERED";
    /**
     * The collection is already registered and thus cannot be registered again
     *
     * @generated from enum value: COLLECTION_ALREADY_REGISTERED = 13;
     */
    TxError[TxError["COLLECTION_ALREADY_REGISTERED"] = 13] = "COLLECTION_ALREADY_REGISTERED";
    /**
     * The collection is invalid (e.g. the collection does not have a default ACLEntry)
     *
     * @generated from enum value: COLLECTION_INVALID = 14;
     */
    TxError[TxError["COLLECTION_INVALID"] = 14] = "COLLECTION_INVALID";
    /**
     * The item type in the collection is invalid
     *
     * @generated from enum value: COLLECTION_INVALID_ITEM_TYPE = 15;
     */
    TxError[TxError["COLLECTION_INVALID_ITEM_TYPE"] = 15] = "COLLECTION_INVALID_ITEM_TYPE";
    /**
     * The role id in the collection is invalid
     *
     * @generated from enum value: COLLECTION_INVALID_ROLE_ID = 16;
     */
    TxError[TxError["COLLECTION_INVALID_ROLE_ID"] = 16] = "COLLECTION_INVALID_ROLE_ID";
    /**
     * The user does not have permission to perform the operation
     *
     * @generated from enum value: USER_INVALID_ID = 20;
     */
    TxError[TxError["USER_INVALID_ID"] = 20] = "USER_INVALID_ID";
    /**
     * The certificate is not registered as a user and thus cannot be used
     *
     * @generated from enum value: USER_UNREGISTERED = 21;
     */
    TxError[TxError["USER_UNREGISTERED"] = 21] = "USER_UNREGISTERED";
    /**
     * The certificate is already registered as a user and thus cannot be registered again
     *
     * @generated from enum value: USER_ALREADY_REGISTERED = 22;
     */
    TxError[TxError["USER_ALREADY_REGISTERED"] = 22] = "USER_ALREADY_REGISTERED";
    /**
     * The user is invalid
     *
     * @generated from enum value: USER_INVALID = 23;
     */
    TxError[TxError["USER_INVALID"] = 23] = "USER_INVALID";
    /**
     * The user does not have a role
     *
     * @generated from enum value: USER_NO_ROLE = 24;
     */
    TxError[TxError["USER_NO_ROLE"] = 24] = "USER_NO_ROLE";
    /**
     * USER_DELETED_ROLE          = 25;
     * The user does not have permission to perform the operation
     *
     * @generated from enum value: USER_PERMISSION_DENIED = 26;
     */
    TxError[TxError["USER_PERMISSION_DENIED"] = 26] = "USER_PERMISSION_DENIED";
    /**
     * The Item's key is invalid
     *
     * @generated from enum value: ITEM_INVALID_ID = 31;
     */
    TxError[TxError["ITEM_INVALID_ID"] = 31] = "ITEM_INVALID_ID";
    /**
     * The Item is not registered and thus cannot be accessed
     *
     * @generated from enum value: ITEM_UNREGISTERED = 32;
     */
    TxError[TxError["ITEM_UNREGISTERED"] = 32] = "ITEM_UNREGISTERED";
    /**
     * The Item is already registered and thus cannot be registered again
     *
     * @generated from enum value: ITEM_ALREADY_REGISTERED = 33;
     */
    TxError[TxError["ITEM_ALREADY_REGISTERED"] = 33] = "ITEM_ALREADY_REGISTERED";
    /**
     * The Item is invalid
     *
     * @generated from enum value: ITEM_INVALID = 34;
     */
    TxError[TxError["ITEM_INVALID"] = 34] = "ITEM_INVALID";
    /**
     * The item field path is invalid for the item type
     *
     * @generated from enum value: INVALID_ITEM_FIELD_PATH = 35;
     */
    TxError[TxError["INVALID_ITEM_FIELD_PATH"] = 35] = "INVALID_ITEM_FIELD_PATH";
    /**
     * The value at the item field path is invalid for the item type
     *
     * @generated from enum value: INVALID_ITEM_FIELD_VALUE = 36;
     */
    TxError[TxError["INVALID_ITEM_FIELD_VALUE"] = 36] = "INVALID_ITEM_FIELD_VALUE";
})(TxError = TxError || (TxError = {}));
// Retrieve enum metadata with: proto3.getEnumType(TxError)
proto3.util.setEnumType(TxError, "auth.TxError", [
    { no: 0, name: "UNSPECIFIED" },
    { no: 1, name: "REQUEST_INVALID" },
    { no: 2, name: "RUNTIME" },
    { no: 3, name: "RUNTIME_BAD_OPS" },
    { no: 4, name: "KEY_NOT_FOUND" },
    { no: 5, name: "KEY_ALREADY_EXISTS" },
    { no: 11, name: "COLLECTION_INVALID_ID" },
    { no: 12, name: "COLLECTION_UNREGISTERED" },
    { no: 13, name: "COLLECTION_ALREADY_REGISTERED" },
    { no: 14, name: "COLLECTION_INVALID" },
    { no: 15, name: "COLLECTION_INVALID_ITEM_TYPE" },
    { no: 16, name: "COLLECTION_INVALID_ROLE_ID" },
    { no: 20, name: "USER_INVALID_ID" },
    { no: 21, name: "USER_UNREGISTERED" },
    { no: 22, name: "USER_ALREADY_REGISTERED" },
    { no: 23, name: "USER_INVALID" },
    { no: 24, name: "USER_NO_ROLE" },
    { no: 26, name: "USER_PERMISSION_DENIED" },
    { no: 31, name: "ITEM_INVALID_ID" },
    { no: 32, name: "ITEM_UNREGISTERED" },
    { no: 33, name: "ITEM_ALREADY_REGISTERED" },
    { no: 34, name: "ITEM_INVALID" },
    { no: 35, name: "INVALID_ITEM_FIELD_PATH" },
    { no: 36, name: "INVALID_ITEM_FIELD_VALUE" },
]);
/**
 * @generated from message auth.User
 */
export class User extends Message {
    /**
     * @generated from field: string msp_id = 1;
     */
    mspId = "";
    /**
     * @generated from field: string user_id = 2;
     */
    userId = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.User";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new User().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new User().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new User().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(User, a, b);
    }
}
/**
 * @generated from message auth.KeySchema
 */
export class KeySchema extends Message {
    /**
     * The item type of the key
     *
     * @generated from field: string item_type = 1;
     */
    itemType = "";
    /**
     * The kind of item that the key is for
     *
     * @generated from field: auth.ItemKind item_kind = 2;
     */
    itemKind = ItemKind.UNSPECIFIED;
    /**
     * The paths that make up the key
     *
     * @generated from field: google.protobuf.FieldMask properties = 3;
     */
    properties;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.KeySchema";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "item_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "item_kind", kind: "enum", T: proto3.getEnumType(ItemKind) },
        { no: 3, name: "properties", kind: "message", T: FieldMask },
    ]);
    static fromBinary(bytes, options) {
        return new KeySchema().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new KeySchema().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new KeySchema().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(KeySchema, a, b);
    }
}
/**
 * Can be used as the history entry
 *
 * @generated from message auth.StateActivity
 */
export class StateActivity extends Message {
    /**
     * The transaction id that caused the change
     *
     * @generated from field: string tx_id = 1;
     */
    txId = "";
    /**
     * The msp of the user that caused the change
     *
     * @generated from field: string msp_id = 2;
     */
    mspId = "";
    /**
     * The id of the user that caused the change
     *
     * @generated from field: string user_id = 3;
     */
    userId = "";
    /**
     * The timestamp of the change
     *
     * @generated from field: google.protobuf.Timestamp timestamp = 4;
     */
    timestamp;
    /**
     * A note about the change
     *
     * @generated from field: string note = 5;
     */
    note = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.StateActivity";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "timestamp", kind: "message", T: Timestamp },
        { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new StateActivity().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StateActivity().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StateActivity().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(StateActivity, a, b);
    }
}
/**
 * @generated from message auth.Operation
 */
export class Operation extends Message {
    /**
     * @generated from field: auth.Action action = 1;
     */
    action = Action.UNSPECIFIED;
    /**
     * @generated from field: string collection_id = 2;
     */
    collectionId = "";
    /**
     * @generated from field: string item_type = 3;
     */
    itemType = "";
    /**
     * @generated from field: google.protobuf.FieldMask paths = 5;
     */
    paths;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.Operation";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "action", kind: "enum", T: proto3.getEnumType(Action) },
        { no: 2, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "item_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "paths", kind: "message", T: FieldMask },
    ]);
    static fromBinary(bytes, options) {
        return new Operation().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Operation().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Operation().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Operation, a, b);
    }
}
/**
 * This message is the tree node for operations on the state item
 *
 * @generated from message auth.PathPolicy
 */
export class PathPolicy extends Message {
    /**
     * The path is a sub path of a field mask
     *
     * @generated from field: string path = 1;
     */
    path = "";
    /**
     * @generated from field: string full_path = 2;
     */
    fullPath = "";
    /**
     * @generated from field: bool allow_sub_paths = 3;
     */
    allowSubPaths = false;
    /**
     * The key is a valid sub path in the type of state item
     *
     * @generated from field: map<string, auth.PathPolicy> sub_paths = 4;
     */
    subPaths = {};
    /**
     * If the policy is not set than use a parent policy unless nested policy is set
     *
     * @generated from field: repeated auth.Action actions = 5;
     */
    actions = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.PathPolicy";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "full_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "allow_sub_paths", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 4, name: "sub_paths", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: PathPolicy } },
        { no: 5, name: "actions", kind: "enum", T: proto3.getEnumType(Action), repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new PathPolicy().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PathPolicy().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PathPolicy().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PathPolicy, a, b);
    }
}
/**
 * @generated from message auth.Polices
 */
export class Polices extends Message {
    /**
     * key is the item type
     *
     * @generated from field: map<string, auth.PathPolicy> item_policies = 1;
     */
    itemPolicies = {};
    /**
     * Default policy for all items
     *
     * @generated from field: auth.PathPolicy default_policy = 2;
     */
    defaultPolicy;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.Polices";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "item_policies", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: PathPolicy } },
        { no: 2, name: "default_policy", kind: "message", T: PathPolicy },
    ]);
    static fromBinary(bytes, options) {
        return new Polices().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Polices().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Polices().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Polices, a, b);
    }
}
/**
 * Keys
 * ─────────────────────────────────────────────────────────────────────────────────────
 * Item Keys
 * When converted to its string form it will be:
 * - Key := {ITEM_TYPE}{COLLECTION_ID}{...ITEM_ID}
 *
 * Reference Keys
 * Used to store references to items for case like a user having a role
 * When converted to its string form it will be:
 * {Ref}{REFERENCE_TYPE}{COLLECTION_ID}[{ITEM1_TYPE}{...ITEM1_ID}][{ITEM2_TYPE}{...ITEM2_ID}]
 *
 *
 * SubKeys
 * When converted to its string form it will be:
 * {SUB_ITEM_TYPE}{COLLECTION_ID}{ITEM_TYPE}{...ITEM_ID}{SUB_ITEM_ID}
 * Examples
 * - Suggestion := {auth.Suggestion}  {COLLECTION_ID}{ITEM_TYPE}{...ITEM_ID}{SUGGESTION_ID}
 * - HiddenTxList := {auth.HiddenTxList}{COLLECTION_ID}{ITEM_TYPE} {...ITEM_ID}
 *
 * @generated from message auth.ItemKey
 */
export class ItemKey extends Message {
    /**
     * @generated from field: string collection_id = 1;
     */
    collectionId = "";
    /**
     * @generated from field: string item_type = 2;
     */
    itemType = "";
    /**
     * @generated from field: repeated string item_id_parts = 3;
     */
    itemIdParts = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.ItemKey";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "item_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "item_id_parts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new ItemKey().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ItemKey().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ItemKey().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ItemKey, a, b);
    }
}
/**
 * Reference Keys
 * {auth.Reference}{REFERENCE_TYPE}{COLLECTION_ID}[{ITEM1_TYPE}{...ITEM1_ID}][{ITEM2_TYPE}{...ITEM2_ID}]
 *
 * @generated from message auth.ReferenceKey
 */
export class ReferenceKey extends Message {
    /**
     *  string reference_type = 2;
     *
     * @generated from field: auth.ItemKey key1 = 1;
     */
    key1;
    /**
     * @generated from field: auth.ItemKey key2 = 2;
     */
    key2;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.ReferenceKey";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "key1", kind: "message", T: ItemKey },
        { no: 2, name: "key2", kind: "message", T: ItemKey },
    ]);
    static fromBinary(bytes, options) {
        return new ReferenceKey().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ReferenceKey().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ReferenceKey().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ReferenceKey, a, b);
    }
}
/**
 * @generated from message auth.Item
 */
export class Item extends Message {
    /**
     * @generated from field: auth.ItemKey key = 1;
     */
    key;
    /**
     * @generated from field: google.protobuf.Any value = 2;
     */
    value;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.Item";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "key", kind: "message", T: ItemKey },
        { no: 2, name: "value", kind: "message", T: Any },
    ]);
    static fromBinary(bytes, options) {
        return new Item().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Item().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Item().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Item, a, b);
    }
}
/**
 * @generated from message auth.FullItem
 */
export class FullItem extends Message {
    /**
     * @generated from field: auth.Item item = 1;
     */
    item;
    /**
     * @generated from field: auth.History history = 2;
     */
    history;
    /**
     * @generated from field: repeated auth.Suggestion suggestions = 3;
     */
    suggestions = [];
    /**
     * @generated from field: repeated auth.Reference references = 4;
     */
    references = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.FullItem";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "item", kind: "message", T: Item },
        { no: 2, name: "history", kind: "message", T: History },
        { no: 3, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
        { no: 4, name: "references", kind: "message", T: Reference, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new FullItem().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FullItem().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FullItem().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FullItem, a, b);
    }
}
/**
 * @generated from message auth.HistoryEntry
 */
export class HistoryEntry extends Message {
    /**
     * The transaction id that caused the change
     *
     * @generated from field: string tx_id = 1;
     */
    txId = "";
    /**
     * Whether the item was deleted
     *
     * @generated from field: bool is_delete = 2;
     */
    isDelete = false;
    /**
     * Whether the transaction was hidden
     *
     * @generated from field: bool is_hidden = 3;
     */
    isHidden = false;
    /**
     * The timestamp of the change
     *
     * @generated from field: google.protobuf.Timestamp timestamp = 4;
     */
    timestamp;
    /**
     * A note about the change
     *
     * @generated from field: string note = 5;
     */
    note = "";
    /**
     * The value of the item
     *
     * @generated from field: google.protobuf.Any value = 6;
     */
    value;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.HistoryEntry";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "is_delete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 3, name: "is_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 4, name: "timestamp", kind: "message", T: Timestamp },
        { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "value", kind: "message", T: Any },
    ]);
    static fromBinary(bytes, options) {
        return new HistoryEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HistoryEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HistoryEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(HistoryEntry, a, b);
    }
}
/**
 * @generated from message auth.History
 */
export class History extends Message {
    /**
     * @generated from field: repeated auth.HistoryEntry entries = 1;
     */
    entries = [];
    /**
     * @generated from field: auth.HiddenTxList hidden_txs = 2;
     */
    hiddenTxs;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.History";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "entries", kind: "message", T: HistoryEntry, repeated: true },
        { no: 2, name: "hidden_txs", kind: "message", T: HiddenTxList },
    ]);
    static fromBinary(bytes, options) {
        return new History().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new History().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new History().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(History, a, b);
    }
}
/**
 * Key should be
 * {auth.Suggestion}{COLLECTION_ID}{ITEM_TYPE}{...ITEM_ID}{SUGGESTION_ID}
 *
 * @generated from message auth.Suggestion
 */
export class Suggestion extends Message {
    /**
     * @generated from field: auth.ItemKey primary_key = 1;
     */
    primaryKey;
    /**
     * @generated from field: string suggestion_id = 2;
     */
    suggestionId = "";
    /**
     * @generated from field: google.protobuf.FieldMask paths = 5;
     */
    paths;
    /**
     * @generated from field: google.protobuf.Any value = 6;
     */
    value;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.Suggestion";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "primary_key", kind: "message", T: ItemKey },
        { no: 2, name: "suggestion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "paths", kind: "message", T: FieldMask },
        { no: 6, name: "value", kind: "message", T: Any },
    ]);
    static fromBinary(bytes, options) {
        return new Suggestion().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Suggestion().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Suggestion().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Suggestion, a, b);
    }
}
/**
 * @generated from message auth.HiddenTx
 */
export class HiddenTx extends Message {
    /**
     * @generated from field: string tx_id = 1;
     */
    txId = "";
    /**
     * @generated from field: string msp_id = 2;
     */
    mspId = "";
    /**
     * @generated from field: string user_id = 3;
     */
    userId = "";
    /**
     * @generated from field: google.protobuf.Timestamp timestamp = 4;
     */
    timestamp;
    /**
     * @generated from field: string note = 5;
     */
    note = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.HiddenTx";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "timestamp", kind: "message", T: Timestamp },
        { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new HiddenTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HiddenTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HiddenTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(HiddenTx, a, b);
    }
}
/**
 * Key should be {COLLECTION_ID}{auth.HiddenTxList}{ITEM_TYPE}{...ITEM_ID}
 *
 * @generated from message auth.HiddenTxList
 */
export class HiddenTxList extends Message {
    /**
     * The key that is used to store the item
     *
     * @generated from field: auth.ItemKey primary_key = 1;
     */
    primaryKey;
    /**
     * The list of hidden txs by tx_id
     *
     * @generated from field: repeated auth.HiddenTx txs = 4;
     */
    txs = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.HiddenTxList";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "primary_key", kind: "message", T: ItemKey },
        { no: 4, name: "txs", kind: "message", T: HiddenTx, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new HiddenTxList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HiddenTxList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HiddenTxList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(HiddenTxList, a, b);
    }
}
/**
 * Used to return the values of the items that are referenced
 *
 * @generated from message auth.Reference
 */
export class Reference extends Message {
    /**
     * @generated from field: auth.ReferenceKey reference = 1;
     */
    reference;
    /**
     * @generated from field: auth.Item item1 = 2;
     */
    item1;
    /**
     * @generated from field: auth.Item item2 = 3;
     */
    item2;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.Reference";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "reference", kind: "message", T: ReferenceKey },
        { no: 2, name: "item1", kind: "message", T: Item },
        { no: 3, name: "item2", kind: "message", T: Item },
    ]);
    static fromBinary(bytes, options) {
        return new Reference().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Reference().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Reference().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Reference, a, b);
    }
}
/**
 * Collection
 * ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
 * Note that the types of items are stored in the default ACLEntry
 *
 * key := {COLLECTION}{COLLECTION_ID}
 *
 * @generated from message auth.Collection
 */
export class Collection extends Message {
    /**
     * The key for the ledger
     *
     * @generated from field: string collection_id = 1;
     */
    collectionId = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: auth.AuthType auth_type = 3;
     */
    authType = AuthType.UNSPECIFIED;
    /**
     * @generated from field: repeated string item_types = 4;
     */
    itemTypes = [];
    /**
     * @generated from field: auth.Polices default = 5;
     */
    default;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.Collection";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "auth_type", kind: "enum", T: proto3.getEnumType(AuthType) },
        { no: 4, name: "item_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 5, name: "default", kind: "message", T: Polices },
    ]);
    static fromBinary(bytes, options) {
        return new Collection().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Collection().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Collection().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Collection, a, b);
    }
}
/**
 * @generated from message auth.Role
 */
export class Role extends Message {
    /**
     * @generated from field: string collection_id = 1;
     */
    collectionId = "";
    /**
     * @generated from field: string role_id = 2;
     */
    roleId = "";
    /**
     * @generated from field: auth.Polices polices = 4;
     */
    polices;
    /**
     * @generated from field: string note = 5;
     */
    note = "";
    /**
     * @generated from field: repeated string parent_role_ids = 6;
     */
    parentRoleIds = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.Role";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "polices", kind: "message", T: Polices },
        { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "parent_role_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Role().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Role().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Role().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Role, a, b);
    }
}
/**
 * An attribute is used to define permissions via the value of the attribute in the
 * users certificate for a given msp
 *
 * @generated from message auth.Attribute
 */
export class Attribute extends Message {
    /**
     * @generated from field: string collection_id = 1;
     */
    collectionId = "";
    /**
     * The msp of the organization that this attribute applies to
     *
     * @generated from field: string msp_id = 2;
     */
    mspId = "";
    /**
     * The oid of the attribute
     *
     * @generated from field: string oid = 3;
     */
    oid = "";
    /**
     * The value of the attribute required to be satisfied by the user to have the
     * role
     *
     * @generated from field: string value = 4;
     */
    value = "";
    /**
     * The Permission that the user will have if they have the attribute
     *
     * @generated from field: auth.Polices polices = 5;
     */
    polices;
    /**
     * @generated from field: string note = 6;
     */
    note = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.Attribute";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "oid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "polices", kind: "message", T: Polices },
        { no: 6, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Attribute().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Attribute().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Attribute().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Attribute, a, b);
    }
}
/**
 * Membership is used to store permissions for a user in a collection
 *
 * @generated from message auth.UserMembership
 */
export class UserMembership extends Message {
    /**
     * The collection that the user is a member of
     *
     * @generated from field: string collection_id = 1;
     */
    collectionId = "";
    /**
     * The msp of the organization that the user's certificate is from
     *
     * @generated from field: string msp_id = 2;
     */
    mspId = "";
    /**
     * The id of the user from the certificate
     *
     * @generated from field: string user_id = 3;
     */
    userId = "";
    /**
     * The Permissions that the user will have
     *
     * @generated from field: auth.Polices polices = 4;
     */
    polices;
    /**
     * @generated from field: string note = 6;
     */
    note = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.UserMembership";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "polices", kind: "message", T: Polices },
        { no: 6, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new UserMembership().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserMembership().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserMembership().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserMembership, a, b);
    }
}
/**
 * @generated from message auth.UserCollectionRoles
 */
export class UserCollectionRoles extends Message {
    /**
     * The collection that the user is a member of
     *
     * @generated from field: string collection_id = 1;
     */
    collectionId = "";
    /**
     * The msp of the organization that the user's certificate is from
     *
     * @generated from field: string msp_id = 2;
     */
    mspId = "";
    /**
     * The id of the user from the certificate
     *
     * @generated from field: string user_id = 3;
     */
    userId = "";
    /**
     * The roles that the user has in the collection
     *
     * @generated from field: repeated string role_ids = 4;
     */
    roleIds = [];
    /**
     * @generated from field: string note = 6;
     */
    note = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "auth.UserCollectionRoles";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "role_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 6, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new UserCollectionRoles().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserCollectionRoles().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserCollectionRoles().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserCollectionRoles, a, b);
    }
}
