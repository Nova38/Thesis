// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: biochain/v1/state.proto

package biochainv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/nova38/saacs/pkg/chaincode/gen/auth/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Specimen_Secondary_SEX int32

const (
	Specimen_Secondary_SEX_UNDEFINED Specimen_Secondary_SEX = 0
	Specimen_Secondary_SEX_UNKNOWN   Specimen_Secondary_SEX = 1
	Specimen_Secondary_SEX_ATYPICAL  Specimen_Secondary_SEX = 2
	Specimen_Secondary_SEX_MALE      Specimen_Secondary_SEX = 3
	Specimen_Secondary_SEX_FEMALE    Specimen_Secondary_SEX = 4
)

// Enum value maps for Specimen_Secondary_SEX.
var (
	Specimen_Secondary_SEX_name = map[int32]string{
		0: "SEX_UNDEFINED",
		1: "SEX_UNKNOWN",
		2: "SEX_ATYPICAL",
		3: "SEX_MALE",
		4: "SEX_FEMALE",
	}
	Specimen_Secondary_SEX_value = map[string]int32{
		"SEX_UNDEFINED": 0,
		"SEX_UNKNOWN":   1,
		"SEX_ATYPICAL":  2,
		"SEX_MALE":      3,
		"SEX_FEMALE":    4,
	}
)

func (x Specimen_Secondary_SEX) Enum() *Specimen_Secondary_SEX {
	p := new(Specimen_Secondary_SEX)
	*p = x
	return p
}

func (x Specimen_Secondary_SEX) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Specimen_Secondary_SEX) Descriptor() protoreflect.EnumDescriptor {
	return file_biochain_v1_state_proto_enumTypes[0].Descriptor()
}

func (Specimen_Secondary_SEX) Type() protoreflect.EnumType {
	return &file_biochain_v1_state_proto_enumTypes[0]
}

func (x Specimen_Secondary_SEX) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Specimen_Secondary_SEX.Descriptor instead.
func (Specimen_Secondary_SEX) EnumDescriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{5, 1, 0}
}

// Secondary.age -field with limited options: NEST, EMBRYO_EGG, CHICK_SUBADULT, ADULT, UNKNOWN, CONTINGENT, blank
type Specimen_Secondary_AGE int32

const (
	Specimen_Secondary_AGE_UNDEFINED      Specimen_Secondary_AGE = 0
	Specimen_Secondary_AGE_UNKNOWN        Specimen_Secondary_AGE = 1
	Specimen_Secondary_AGE_NEST           Specimen_Secondary_AGE = 2
	Specimen_Secondary_AGE_EMBRYO_EGG     Specimen_Secondary_AGE = 3
	Specimen_Secondary_AGE_CHICK_SUBADULT Specimen_Secondary_AGE = 4
	Specimen_Secondary_AGE_ADULT          Specimen_Secondary_AGE = 5
	Specimen_Secondary_AGE_CONTINGENT     Specimen_Secondary_AGE = 6
)

// Enum value maps for Specimen_Secondary_AGE.
var (
	Specimen_Secondary_AGE_name = map[int32]string{
		0: "AGE_UNDEFINED",
		1: "AGE_UNKNOWN",
		2: "AGE_NEST",
		3: "AGE_EMBRYO_EGG",
		4: "AGE_CHICK_SUBADULT",
		5: "AGE_ADULT",
		6: "AGE_CONTINGENT",
	}
	Specimen_Secondary_AGE_value = map[string]int32{
		"AGE_UNDEFINED":      0,
		"AGE_UNKNOWN":        1,
		"AGE_NEST":           2,
		"AGE_EMBRYO_EGG":     3,
		"AGE_CHICK_SUBADULT": 4,
		"AGE_ADULT":          5,
		"AGE_CONTINGENT":     6,
	}
)

func (x Specimen_Secondary_AGE) Enum() *Specimen_Secondary_AGE {
	p := new(Specimen_Secondary_AGE)
	*p = x
	return p
}

func (x Specimen_Secondary_AGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Specimen_Secondary_AGE) Descriptor() protoreflect.EnumDescriptor {
	return file_biochain_v1_state_proto_enumTypes[1].Descriptor()
}

func (Specimen_Secondary_AGE) Type() protoreflect.EnumType {
	return &file_biochain_v1_state_proto_enumTypes[1]
}

func (x Specimen_Secondary_AGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Specimen_Secondary_AGE.Descriptor instead.
func (Specimen_Secondary_AGE) EnumDescriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{5, 1, 1}
}

// option go_package = "github.com/nova38/saacs/gen/lib/biochain/ccbio/schema/v1;schemav1";
type SpecimenHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries   []*SpecimenHistoryEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	HiddenTxs *v1.HiddenTxList        `protobuf:"bytes,2,opt,name=hidden_txs,json=hiddenTxs,proto3" json:"hidden_txs,omitempty"`
}

func (x *SpecimenHistory) Reset() {
	*x = SpecimenHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenHistory) ProtoMessage() {}

func (x *SpecimenHistory) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenHistory.ProtoReflect.Descriptor instead.
func (*SpecimenHistory) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{0}
}

func (x *SpecimenHistory) GetEntries() []*SpecimenHistoryEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *SpecimenHistory) GetHiddenTxs() *v1.HiddenTxList {
	if x != nil {
		return x.HiddenTxs
	}
	return nil
}

type SpecimenHistoryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction id that caused the change
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Whether the item was deleted
	IsDelete bool `protobuf:"varint,2,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	// Whether the transaction was hidden
	IsHidden bool `protobuf:"varint,3,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	// The timestamp of the change
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// A note about the change
	Note string `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	// The value of the item
	Value *Specimen `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SpecimenHistoryEntry) Reset() {
	*x = SpecimenHistoryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenHistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenHistoryEntry) ProtoMessage() {}

func (x *SpecimenHistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenHistoryEntry.ProtoReflect.Descriptor instead.
func (*SpecimenHistoryEntry) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{1}
}

func (x *SpecimenHistoryEntry) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *SpecimenHistoryEntry) GetIsDelete() bool {
	if x != nil {
		return x.IsDelete
	}
	return false
}

func (x *SpecimenHistoryEntry) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *SpecimenHistoryEntry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SpecimenHistoryEntry) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *SpecimenHistoryEntry) GetValue() *Specimen {
	if x != nil {
		return x.Value
	}
	return nil
}

type SpecimenUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Specimen *Specimen              `protobuf:"bytes,1,opt,name=specimen,proto3" json:"specimen,omitempty"`
	Mask     *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *SpecimenUpdate) Reset() {
	*x = SpecimenUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenUpdate) ProtoMessage() {}

func (x *SpecimenUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenUpdate.ProtoReflect.Descriptor instead.
func (*SpecimenUpdate) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{2}
}

func (x *SpecimenUpdate) GetSpecimen() *Specimen {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *SpecimenUpdate) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

// ────────────────────────────────────────────────--
// Specimen
// ────────────────────────────────────────────────--
type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verbatim  string                 `protobuf:"bytes,1,opt,name=verbatim,proto3" json:"verbatim,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Year      int32                  `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	Month     string                 `protobuf:"bytes,4,opt,name=month,proto3" json:"month,omitempty"`
	Day       int32                  `protobuf:"varint,5,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{3}
}

func (x *Date) GetVerbatim() string {
	if x != nil {
		return x.Verbatim
	}
	return ""
}

func (x *Date) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Date) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type Researcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName  string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName   string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	MiddleName string `protobuf:"bytes,3,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
}

func (x *Researcher) Reset() {
	*x = Researcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Researcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Researcher) ProtoMessage() {}

func (x *Researcher) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Researcher.ProtoReflect.Descriptor instead.
func (*Researcher) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{4}
}

func (x *Researcher) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Researcher) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Researcher) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

type Specimen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string                     `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	SpecimenId   string                     `protobuf:"bytes,2,opt,name=specimen_id,json=specimenId,proto3" json:"specimen_id,omitempty"`
	Primary      *Specimen_Primary          `protobuf:"bytes,3,opt,name=primary,proto3" json:"primary,omitempty"`
	Secondary    *Specimen_Secondary        `protobuf:"bytes,4,opt,name=secondary,proto3" json:"secondary,omitempty"`
	Taxon        *Specimen_Taxon            `protobuf:"bytes,5,opt,name=taxon,proto3" json:"taxon,omitempty"`
	Georeference *Specimen_Georeference     `protobuf:"bytes,6,opt,name=georeference,proto3" json:"georeference,omitempty"`
	Images       map[string]*Specimen_Image `protobuf:"bytes,7,rep,name=images,proto3" json:"images,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Loans        map[string]*Specimen_Loan  `protobuf:"bytes,10,rep,name=loans,proto3" json:"loans,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Grants       map[string]*Specimen_Grant `protobuf:"bytes,11,rep,name=grants,proto3" json:"grants,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastModified *v1.StateActivity          `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen) Reset() {
	*x = Specimen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen) ProtoMessage() {}

func (x *Specimen) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen.ProtoReflect.Descriptor instead.
func (*Specimen) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{5}
}

func (x *Specimen) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Specimen) GetSpecimenId() string {
	if x != nil {
		return x.SpecimenId
	}
	return ""
}

func (x *Specimen) GetPrimary() *Specimen_Primary {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *Specimen) GetSecondary() *Specimen_Secondary {
	if x != nil {
		return x.Secondary
	}
	return nil
}

func (x *Specimen) GetTaxon() *Specimen_Taxon {
	if x != nil {
		return x.Taxon
	}
	return nil
}

func (x *Specimen) GetGeoreference() *Specimen_Georeference {
	if x != nil {
		return x.Georeference
	}
	return nil
}

func (x *Specimen) GetImages() map[string]*Specimen_Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Specimen) GetLoans() map[string]*Specimen_Loan {
	if x != nil {
		return x.Loans
	}
	return nil
}

func (x *Specimen) GetGrants() map[string]*Specimen_Grant {
	if x != nil {
		return x.Grants
	}
	return nil
}

func (x *Specimen) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Primary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogNumber    string            `protobuf:"bytes,1,opt,name=catalog_number,json=catalogNumber,proto3" json:"catalog_number,omitempty"`
	AccessionNumber  string            `protobuf:"bytes,2,opt,name=accession_number,json=accessionNumber,proto3" json:"accession_number,omitempty"`
	FieldNumber      string            `protobuf:"bytes,3,opt,name=field_number,json=fieldNumber,proto3" json:"field_number,omitempty"`
	TissueNumber     string            `protobuf:"bytes,4,opt,name=tissue_number,json=tissueNumber,proto3" json:"tissue_number,omitempty"`
	Cataloger        string            `protobuf:"bytes,5,opt,name=cataloger,proto3" json:"cataloger,omitempty"`
	Collector        string            `protobuf:"bytes,6,opt,name=collector,proto3" json:"collector,omitempty"`
	Determiner       string            `protobuf:"bytes,7,opt,name=determiner,proto3" json:"determiner,omitempty"`
	FieldDate        *Date             `protobuf:"bytes,8,opt,name=field_date,json=fieldDate,proto3" json:"field_date,omitempty"`
	CatalogDate      *Date             `protobuf:"bytes,9,opt,name=catalog_date,json=catalogDate,proto3" json:"catalog_date,omitempty"`
	DeterminedDate   *Date             `protobuf:"bytes,10,opt,name=determined_date,json=determinedDate,proto3" json:"determined_date,omitempty"`
	DeterminedReason string            `protobuf:"bytes,11,opt,name=determined_reason,json=determinedReason,proto3" json:"determined_reason,omitempty"`
	OriginalDate     *Date             `protobuf:"bytes,12,opt,name=original_date,json=originalDate,proto3" json:"original_date,omitempty"`
	LastModified     *v1.StateActivity `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Primary) Reset() {
	*x = Specimen_Primary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Primary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Primary) ProtoMessage() {}

func (x *Specimen_Primary) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Primary.ProtoReflect.Descriptor instead.
func (*Specimen_Primary) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Specimen_Primary) GetCatalogNumber() string {
	if x != nil {
		return x.CatalogNumber
	}
	return ""
}

func (x *Specimen_Primary) GetAccessionNumber() string {
	if x != nil {
		return x.AccessionNumber
	}
	return ""
}

func (x *Specimen_Primary) GetFieldNumber() string {
	if x != nil {
		return x.FieldNumber
	}
	return ""
}

func (x *Specimen_Primary) GetTissueNumber() string {
	if x != nil {
		return x.TissueNumber
	}
	return ""
}

func (x *Specimen_Primary) GetCataloger() string {
	if x != nil {
		return x.Cataloger
	}
	return ""
}

func (x *Specimen_Primary) GetCollector() string {
	if x != nil {
		return x.Collector
	}
	return ""
}

func (x *Specimen_Primary) GetDeterminer() string {
	if x != nil {
		return x.Determiner
	}
	return ""
}

func (x *Specimen_Primary) GetFieldDate() *Date {
	if x != nil {
		return x.FieldDate
	}
	return nil
}

func (x *Specimen_Primary) GetCatalogDate() *Date {
	if x != nil {
		return x.CatalogDate
	}
	return nil
}

func (x *Specimen_Primary) GetDeterminedDate() *Date {
	if x != nil {
		return x.DeterminedDate
	}
	return nil
}

func (x *Specimen_Primary) GetDeterminedReason() string {
	if x != nil {
		return x.DeterminedReason
	}
	return ""
}

func (x *Specimen_Primary) GetOriginalDate() *Date {
	if x != nil {
		return x.OriginalDate
	}
	return nil
}

func (x *Specimen_Primary) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Secondary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sex          Specimen_Secondary_SEX                     `protobuf:"varint,1,opt,name=sex,proto3,enum=biochain.v1.Specimen_Secondary_SEX" json:"sex,omitempty"`
	Age          Specimen_Secondary_AGE                     `protobuf:"varint,2,opt,name=age,proto3,enum=biochain.v1.Specimen_Secondary_AGE" json:"age,omitempty"`
	Weight       float64                                    `protobuf:"fixed64,3,opt,name=weight,proto3" json:"weight,omitempty"`
	WeightUnits  string                                     `protobuf:"bytes,4,opt,name=weight_units,json=weightUnits,proto3" json:"weight_units,omitempty"`
	Preparations map[string]*Specimen_Secondary_Preparation `protobuf:"bytes,5,rep,name=preparations,proto3" json:"preparations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Condition    string                                     `protobuf:"bytes,6,opt,name=condition,proto3" json:"condition,omitempty"`
	Molt         string                                     `protobuf:"bytes,7,opt,name=molt,proto3" json:"molt,omitempty"`
	Notes        string                                     `protobuf:"bytes,8,opt,name=notes,proto3" json:"notes,omitempty"`
	LastModified *v1.StateActivity                          `protobuf:"bytes,9,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Secondary) Reset() {
	*x = Specimen_Secondary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Secondary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Secondary) ProtoMessage() {}

func (x *Specimen_Secondary) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Secondary.ProtoReflect.Descriptor instead.
func (*Specimen_Secondary) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Specimen_Secondary) GetSex() Specimen_Secondary_SEX {
	if x != nil {
		return x.Sex
	}
	return Specimen_Secondary_SEX_UNDEFINED
}

func (x *Specimen_Secondary) GetAge() Specimen_Secondary_AGE {
	if x != nil {
		return x.Age
	}
	return Specimen_Secondary_AGE_UNDEFINED
}

func (x *Specimen_Secondary) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Specimen_Secondary) GetWeightUnits() string {
	if x != nil {
		return x.WeightUnits
	}
	return ""
}

func (x *Specimen_Secondary) GetPreparations() map[string]*Specimen_Secondary_Preparation {
	if x != nil {
		return x.Preparations
	}
	return nil
}

func (x *Specimen_Secondary) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Specimen_Secondary) GetMolt() string {
	if x != nil {
		return x.Molt
	}
	return ""
}

func (x *Specimen_Secondary) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Specimen_Secondary) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Taxon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kingdom      string            `protobuf:"bytes,1,opt,name=kingdom,proto3" json:"kingdom,omitempty"`
	Phylum       string            `protobuf:"bytes,2,opt,name=phylum,proto3" json:"phylum,omitempty"`
	Class        string            `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
	Order        string            `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	Family       string            `protobuf:"bytes,5,opt,name=family,proto3" json:"family,omitempty"`
	Genus        string            `protobuf:"bytes,6,opt,name=genus,proto3" json:"genus,omitempty"`
	Species      string            `protobuf:"bytes,7,opt,name=species,proto3" json:"species,omitempty"`
	Subspecies   string            `protobuf:"bytes,8,opt,name=subspecies,proto3" json:"subspecies,omitempty"`
	LastModified *v1.StateActivity `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Taxon) Reset() {
	*x = Specimen_Taxon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Taxon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Taxon) ProtoMessage() {}

func (x *Specimen_Taxon) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Taxon.ProtoReflect.Descriptor instead.
func (*Specimen_Taxon) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Specimen_Taxon) GetKingdom() string {
	if x != nil {
		return x.Kingdom
	}
	return ""
}

func (x *Specimen_Taxon) GetPhylum() string {
	if x != nil {
		return x.Phylum
	}
	return ""
}

func (x *Specimen_Taxon) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Specimen_Taxon) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *Specimen_Taxon) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *Specimen_Taxon) GetGenus() string {
	if x != nil {
		return x.Genus
	}
	return ""
}

func (x *Specimen_Taxon) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *Specimen_Taxon) GetSubspecies() string {
	if x != nil {
		return x.Subspecies
	}
	return ""
}

func (x *Specimen_Taxon) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Georeference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country       string  `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	StateProvince string  `protobuf:"bytes,2,opt,name=state_province,json=stateProvince,proto3" json:"state_province,omitempty"`
	County        string  `protobuf:"bytes,3,opt,name=county,proto3" json:"county,omitempty"`
	Locality      string  `protobuf:"bytes,4,opt,name=locality,proto3" json:"locality,omitempty"`
	Latitude      float64 `protobuf:"fixed64,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64 `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Habitat       string  `protobuf:"bytes,7,opt,name=habitat,proto3" json:"habitat,omitempty"`
	// Georeference.continent -string 32 characters
	Continent string `protobuf:"bytes,8,opt,name=continent,proto3" json:"continent,omitempty"`
	// Georeference.locationRemarks -string 100-1k characters
	LocationRemarks string `protobuf:"bytes,9,opt,name=location_remarks,json=locationRemarks,proto3" json:"location_remarks,omitempty"`
	// Georeference.coordinateUncercaintyInMeters -integer 7 digits
	CoordinateUncertaintyInMeters int32 `protobuf:"varint,10,opt,name=coordinate_uncertainty_in_meters,json=coordinateUncertaintyInMeters,proto3" json:"coordinate_uncertainty_in_meters,omitempty"`
	// Georeference.georeferenceBy -string 64 characters
	GeoreferenceBy string `protobuf:"bytes,11,opt,name=georeference_by,json=georeferenceBy,proto3" json:"georeference_by,omitempty"`
	// Georeference.georeferenceDate -string MM/DD/YYYY
	GeoreferenceDate *Date `protobuf:"bytes,12,opt,name=georeference_date,json=georeferenceDate,proto3" json:"georeference_date,omitempty"`
	// Georeference.georeferenceProtocol -string 256 chars (weblink)
	GeoreferenceProtocol string `protobuf:"bytes,13,opt,name=georeference_protocol,json=georeferenceProtocol,proto3" json:"georeference_protocol,omitempty"`
	// Georeference.geodeticDatum -string 16 characters
	GeodeticDatum string `protobuf:"bytes,14,opt,name=geodetic_datum,json=geodeticDatum,proto3" json:"geodetic_datum,omitempty"`
	// Georeference.footprintWKT -string 10-100k characters
	FootprintWkt string            `protobuf:"bytes,15,opt,name=footprint_wkt,json=footprintWkt,proto3" json:"footprint_wkt,omitempty"`
	Notes        string            `protobuf:"bytes,19,opt,name=notes,proto3" json:"notes,omitempty"`
	LastModified *v1.StateActivity `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Georeference) Reset() {
	*x = Specimen_Georeference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Georeference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Georeference) ProtoMessage() {}

func (x *Specimen_Georeference) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Georeference.ProtoReflect.Descriptor instead.
func (*Specimen_Georeference) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{5, 3}
}

func (x *Specimen_Georeference) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Specimen_Georeference) GetStateProvince() string {
	if x != nil {
		return x.StateProvince
	}
	return ""
}

func (x *Specimen_Georeference) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *Specimen_Georeference) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *Specimen_Georeference) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Specimen_Georeference) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Specimen_Georeference) GetHabitat() string {
	if x != nil {
		return x.Habitat
	}
	return ""
}

func (x *Specimen_Georeference) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *Specimen_Georeference) GetLocationRemarks() string {
	if x != nil {
		return x.LocationRemarks
	}
	return ""
}

func (x *Specimen_Georeference) GetCoordinateUncertaintyInMeters() int32 {
	if x != nil {
		return x.CoordinateUncertaintyInMeters
	}
	return 0
}

func (x *Specimen_Georeference) GetGeoreferenceBy() string {
	if x != nil {
		return x.GeoreferenceBy
	}
	return ""
}

func (x *Specimen_Georeference) GetGeoreferenceDate() *Date {
	if x != nil {
		return x.GeoreferenceDate
	}
	return nil
}

func (x *Specimen_Georeference) GetGeoreferenceProtocol() string {
	if x != nil {
		return x.GeoreferenceProtocol
	}
	return ""
}

func (x *Specimen_Georeference) GetGeodeticDatum() string {
	if x != nil {
		return x.GeodeticDatum
	}
	return ""
}

func (x *Specimen_Georeference) GetFootprintWkt() string {
	if x != nil {
		return x.FootprintWkt
	}
	return ""
}

func (x *Specimen_Georeference) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Specimen_Georeference) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

// Mapped Types
type Specimen_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url          string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Notes        string            `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	Hash         string            `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	LastModified *v1.StateActivity `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Image) Reset() {
	*x = Specimen_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Image) ProtoMessage() {}

func (x *Specimen_Image) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Image.ProtoReflect.Descriptor instead.
func (*Specimen_Image) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{5, 4}
}

func (x *Specimen_Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Specimen_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Specimen_Image) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Specimen_Image) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Specimen_Image) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Loan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description  string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LoanedBy     string            `protobuf:"bytes,3,opt,name=loaned_by,json=loanedBy,proto3" json:"loaned_by,omitempty"`
	LoanedTo     string            `protobuf:"bytes,4,opt,name=loaned_to,json=loanedTo,proto3" json:"loaned_to,omitempty"`
	LoanedDate   *Date             `protobuf:"bytes,5,opt,name=loaned_date,json=loanedDate,proto3" json:"loaned_date,omitempty"`
	LastModified *v1.StateActivity `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Loan) Reset() {
	*x = Specimen_Loan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Loan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Loan) ProtoMessage() {}

func (x *Specimen_Loan) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Loan.ProtoReflect.Descriptor instead.
func (*Specimen_Loan) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{5, 5}
}

func (x *Specimen_Loan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Specimen_Loan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Specimen_Loan) GetLoanedBy() string {
	if x != nil {
		return x.LoanedBy
	}
	return ""
}

func (x *Specimen_Loan) GetLoanedTo() string {
	if x != nil {
		return x.LoanedTo
	}
	return ""
}

func (x *Specimen_Loan) GetLoanedDate() *Date {
	if x != nil {
		return x.LoanedDate
	}
	return nil
}

func (x *Specimen_Loan) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Grant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description  string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	GrantedBy    string            `protobuf:"bytes,3,opt,name=granted_by,json=grantedBy,proto3" json:"granted_by,omitempty"`
	GrantedTo    string            `protobuf:"bytes,4,opt,name=granted_to,json=grantedTo,proto3" json:"granted_to,omitempty"`
	GrantedDate  *Date             `protobuf:"bytes,5,opt,name=granted_date,json=grantedDate,proto3" json:"granted_date,omitempty"`
	LastModified *v1.StateActivity `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Grant) Reset() {
	*x = Specimen_Grant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Grant) ProtoMessage() {}

func (x *Specimen_Grant) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Grant.ProtoReflect.Descriptor instead.
func (*Specimen_Grant) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{5, 6}
}

func (x *Specimen_Grant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Specimen_Grant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Specimen_Grant) GetGrantedBy() string {
	if x != nil {
		return x.GrantedBy
	}
	return ""
}

func (x *Specimen_Grant) GetGrantedTo() string {
	if x != nil {
		return x.GrantedTo
	}
	return ""
}

func (x *Specimen_Grant) GetGrantedDate() *Date {
	if x != nil {
		return x.GrantedDate
	}
	return nil
}

func (x *Specimen_Grant) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Secondary_Preparation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verbatim string `protobuf:"bytes,1,opt,name=verbatim,proto3" json:"verbatim,omitempty"`
}

func (x *Specimen_Secondary_Preparation) Reset() {
	*x = Specimen_Secondary_Preparation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biochain_v1_state_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Secondary_Preparation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Secondary_Preparation) ProtoMessage() {}

func (x *Specimen_Secondary_Preparation) ProtoReflect() protoreflect.Message {
	mi := &file_biochain_v1_state_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Secondary_Preparation.ProtoReflect.Descriptor instead.
func (*Specimen_Secondary_Preparation) Descriptor() ([]byte, []int) {
	return file_biochain_v1_state_proto_rawDescGZIP(), []int{5, 1, 0}
}

func (x *Specimen_Secondary_Preparation) GetVerbatim() string {
	if x != nil {
		return x.Verbatim
	}
	return ""
}

var File_biochain_v1_state_proto protoreflect.FileDescriptor

var file_biochain_v1_state_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x69, 0x6f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x74, 0x78, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x54, 0x78, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69,
	0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22,
	0x98, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x62,
	0x61, 0x74, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x62,
	0x61, 0x74, 0x69, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x69, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd9, 0x1d, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69,
	0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x0c, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x0c, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x4c,
	0x6f, 0x61, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x12, 0x39, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0xc2, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69,
	0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3a, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x8a, 0x06, 0x0a, 0x09, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x45, 0x58, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12,
	0x35, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62,
	0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x47,
	0x45, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x55, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x6c, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x29, 0x0a, 0x0b, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x62, 0x61, 0x74, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x62, 0x61, 0x74, 0x69, 0x6d, 0x1a, 0x6c, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69,
	0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x03, 0x53, 0x45, 0x58, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45,
	0x58, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x45, 0x58, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x45, 0x58, 0x5f, 0x41, 0x54, 0x59, 0x50, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x58, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x04, 0x22, 0x86,
	0x01, 0x0a, 0x03, 0x41, 0x47, 0x45, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x47, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x47,
	0x45, 0x5f, 0x4e, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x47, 0x45, 0x5f,
	0x45, 0x4d, 0x42, 0x52, 0x59, 0x4f, 0x5f, 0x45, 0x47, 0x47, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x42, 0x41, 0x44, 0x55,
	0x4c, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x44, 0x55, 0x4c,
	0x54, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49,
	0x4e, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x1a, 0x87, 0x02, 0x0a, 0x05, 0x54, 0x61, 0x78, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x68, 0x79, 0x6c, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x79,
	0x6c, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x1a, 0xa3, 0x05, 0x0a, 0x0c, 0x47, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x79, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x12, 0x3e, 0x0a, 0x11, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x10, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x67,
	0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f,
	0x77, 0x6b, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x6f, 0x74, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x57, 0x6b, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x8d, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0xe0, 0x01, 0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x32, 0x0a, 0x0b,
	0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0xe7, 0x01, 0x0a, 0x05, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x12, 0x34, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x1a, 0x56, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0a,
	0x4c, 0x6f, 0x61, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69,
	0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x15, 0xba, 0xd4, 0x1a, 0x11,
	0x10, 0x02, 0x1a, 0x0d, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0xac, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x69, 0x6f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x6f, 0x76, 0x61, 0x33, 0x38, 0x2f, 0x73, 0x61, 0x61, 0x63, 0x73, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x62,
	0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x69, 0x6f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x42, 0x69,
	0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x42, 0x69, 0x6f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x42, 0x69, 0x6f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0c, 0x42, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_biochain_v1_state_proto_rawDescOnce sync.Once
	file_biochain_v1_state_proto_rawDescData = file_biochain_v1_state_proto_rawDesc
)

func file_biochain_v1_state_proto_rawDescGZIP() []byte {
	file_biochain_v1_state_proto_rawDescOnce.Do(func() {
		file_biochain_v1_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_biochain_v1_state_proto_rawDescData)
	})
	return file_biochain_v1_state_proto_rawDescData
}

var file_biochain_v1_state_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_biochain_v1_state_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_biochain_v1_state_proto_goTypes = []interface{}{
	(Specimen_Secondary_SEX)(0),            // 0: biochain.v1.Specimen.Secondary.SEX
	(Specimen_Secondary_AGE)(0),            // 1: biochain.v1.Specimen.Secondary.AGE
	(*SpecimenHistory)(nil),                // 2: biochain.v1.SpecimenHistory
	(*SpecimenHistoryEntry)(nil),           // 3: biochain.v1.SpecimenHistoryEntry
	(*SpecimenUpdate)(nil),                 // 4: biochain.v1.SpecimenUpdate
	(*Date)(nil),                           // 5: biochain.v1.Date
	(*Researcher)(nil),                     // 6: biochain.v1.Researcher
	(*Specimen)(nil),                       // 7: biochain.v1.Specimen
	(*Specimen_Primary)(nil),               // 8: biochain.v1.Specimen.Primary
	(*Specimen_Secondary)(nil),             // 9: biochain.v1.Specimen.Secondary
	(*Specimen_Taxon)(nil),                 // 10: biochain.v1.Specimen.Taxon
	(*Specimen_Georeference)(nil),          // 11: biochain.v1.Specimen.Georeference
	(*Specimen_Image)(nil),                 // 12: biochain.v1.Specimen.Image
	(*Specimen_Loan)(nil),                  // 13: biochain.v1.Specimen.Loan
	(*Specimen_Grant)(nil),                 // 14: biochain.v1.Specimen.Grant
	nil,                                    // 15: biochain.v1.Specimen.ImagesEntry
	nil,                                    // 16: biochain.v1.Specimen.LoansEntry
	nil,                                    // 17: biochain.v1.Specimen.GrantsEntry
	(*Specimen_Secondary_Preparation)(nil), // 18: biochain.v1.Specimen.Secondary.Preparation
	nil,                                    // 19: biochain.v1.Specimen.Secondary.PreparationsEntry
	(*v1.HiddenTxList)(nil),                // 20: auth.HiddenTxList
	(*timestamppb.Timestamp)(nil),          // 21: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),          // 22: google.protobuf.FieldMask
	(*v1.StateActivity)(nil),               // 23: auth.StateActivity
}
var file_biochain_v1_state_proto_depIdxs = []int32{
	3,  // 0: biochain.v1.SpecimenHistory.entries:type_name -> biochain.v1.SpecimenHistoryEntry
	20, // 1: biochain.v1.SpecimenHistory.hidden_txs:type_name -> auth.HiddenTxList
	21, // 2: biochain.v1.SpecimenHistoryEntry.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 3: biochain.v1.SpecimenHistoryEntry.value:type_name -> biochain.v1.Specimen
	7,  // 4: biochain.v1.SpecimenUpdate.specimen:type_name -> biochain.v1.Specimen
	22, // 5: biochain.v1.SpecimenUpdate.mask:type_name -> google.protobuf.FieldMask
	21, // 6: biochain.v1.Date.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 7: biochain.v1.Specimen.primary:type_name -> biochain.v1.Specimen.Primary
	9,  // 8: biochain.v1.Specimen.secondary:type_name -> biochain.v1.Specimen.Secondary
	10, // 9: biochain.v1.Specimen.taxon:type_name -> biochain.v1.Specimen.Taxon
	11, // 10: biochain.v1.Specimen.georeference:type_name -> biochain.v1.Specimen.Georeference
	15, // 11: biochain.v1.Specimen.images:type_name -> biochain.v1.Specimen.ImagesEntry
	16, // 12: biochain.v1.Specimen.loans:type_name -> biochain.v1.Specimen.LoansEntry
	17, // 13: biochain.v1.Specimen.grants:type_name -> biochain.v1.Specimen.GrantsEntry
	23, // 14: biochain.v1.Specimen.last_modified:type_name -> auth.StateActivity
	5,  // 15: biochain.v1.Specimen.Primary.field_date:type_name -> biochain.v1.Date
	5,  // 16: biochain.v1.Specimen.Primary.catalog_date:type_name -> biochain.v1.Date
	5,  // 17: biochain.v1.Specimen.Primary.determined_date:type_name -> biochain.v1.Date
	5,  // 18: biochain.v1.Specimen.Primary.original_date:type_name -> biochain.v1.Date
	23, // 19: biochain.v1.Specimen.Primary.last_modified:type_name -> auth.StateActivity
	0,  // 20: biochain.v1.Specimen.Secondary.sex:type_name -> biochain.v1.Specimen.Secondary.SEX
	1,  // 21: biochain.v1.Specimen.Secondary.age:type_name -> biochain.v1.Specimen.Secondary.AGE
	19, // 22: biochain.v1.Specimen.Secondary.preparations:type_name -> biochain.v1.Specimen.Secondary.PreparationsEntry
	23, // 23: biochain.v1.Specimen.Secondary.last_modified:type_name -> auth.StateActivity
	23, // 24: biochain.v1.Specimen.Taxon.last_modified:type_name -> auth.StateActivity
	5,  // 25: biochain.v1.Specimen.Georeference.georeference_date:type_name -> biochain.v1.Date
	23, // 26: biochain.v1.Specimen.Georeference.last_modified:type_name -> auth.StateActivity
	23, // 27: biochain.v1.Specimen.Image.last_modified:type_name -> auth.StateActivity
	5,  // 28: biochain.v1.Specimen.Loan.loaned_date:type_name -> biochain.v1.Date
	23, // 29: biochain.v1.Specimen.Loan.last_modified:type_name -> auth.StateActivity
	5,  // 30: biochain.v1.Specimen.Grant.granted_date:type_name -> biochain.v1.Date
	23, // 31: biochain.v1.Specimen.Grant.last_modified:type_name -> auth.StateActivity
	12, // 32: biochain.v1.Specimen.ImagesEntry.value:type_name -> biochain.v1.Specimen.Image
	13, // 33: biochain.v1.Specimen.LoansEntry.value:type_name -> biochain.v1.Specimen.Loan
	14, // 34: biochain.v1.Specimen.GrantsEntry.value:type_name -> biochain.v1.Specimen.Grant
	18, // 35: biochain.v1.Specimen.Secondary.PreparationsEntry.value:type_name -> biochain.v1.Specimen.Secondary.Preparation
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_biochain_v1_state_proto_init() }
func file_biochain_v1_state_proto_init() {
	if File_biochain_v1_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biochain_v1_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenHistoryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Researcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Primary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Secondary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Taxon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Georeference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Loan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Grant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biochain_v1_state_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Secondary_Preparation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biochain_v1_state_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_biochain_v1_state_proto_goTypes,
		DependencyIndexes: file_biochain_v1_state_proto_depIdxs,
		EnumInfos:         file_biochain_v1_state_proto_enumTypes,
		MessageInfos:      file_biochain_v1_state_proto_msgTypes,
	}.Build()
	File_biochain_v1_state_proto = out.File
	file_biochain_v1_state_proto_rawDesc = nil
	file_biochain_v1_state_proto_goTypes = nil
	file_biochain_v1_state_proto_depIdxs = nil
}
