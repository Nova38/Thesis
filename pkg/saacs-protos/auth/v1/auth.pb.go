// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: auth/v1/auth.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionType int32

const (
	TransactionType_TRANSACTION_TYPE_UNSPECIFIED TransactionType = 0
	TransactionType_TRANSACTION_TYPE_INVOKE      TransactionType = 1
	TransactionType_TRANSACTION_TYPE_QUERY       TransactionType = 2
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "TRANSACTION_TYPE_UNSPECIFIED",
		1: "TRANSACTION_TYPE_INVOKE",
		2: "TRANSACTION_TYPE_QUERY",
	}
	TransactionType_value = map[string]int32{
		"TRANSACTION_TYPE_UNSPECIFIED": 0,
		"TRANSACTION_TYPE_INVOKE":      1,
		"TRANSACTION_TYPE_QUERY":       2,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_v1_auth_proto_enumTypes[0].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_auth_v1_auth_proto_enumTypes[0]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{0}
}

type AuthType int32

const (
	AuthType_AUTH_TYPE_UNSPECIFIED   AuthType = 0
	AuthType_AUTH_TYPE_NONE          AuthType = 1
	AuthType_AUTH_TYPE_ROLE          AuthType = 2
	AuthType_AUTH_TYPE_IDENTITY      AuthType = 3
	AuthType_AUTH_TYPE_EMBEDDED_ROLE AuthType = 4
	AuthType_AUTH_TYPE_ATTRIBUTE     AuthType = 5
)

// Enum value maps for AuthType.
var (
	AuthType_name = map[int32]string{
		0: "AUTH_TYPE_UNSPECIFIED",
		1: "AUTH_TYPE_NONE",
		2: "AUTH_TYPE_ROLE",
		3: "AUTH_TYPE_IDENTITY",
		4: "AUTH_TYPE_EMBEDDED_ROLE",
		5: "AUTH_TYPE_ATTRIBUTE",
	}
	AuthType_value = map[string]int32{
		"AUTH_TYPE_UNSPECIFIED":   0,
		"AUTH_TYPE_NONE":          1,
		"AUTH_TYPE_ROLE":          2,
		"AUTH_TYPE_IDENTITY":      3,
		"AUTH_TYPE_EMBEDDED_ROLE": 4,
		"AUTH_TYPE_ATTRIBUTE":     5,
	}
)

func (x AuthType) Enum() *AuthType {
	p := new(AuthType)
	*p = x
	return p
}

func (x AuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_v1_auth_proto_enumTypes[1].Descriptor()
}

func (AuthType) Type() protoreflect.EnumType {
	return &file_auth_v1_auth_proto_enumTypes[1]
}

func (x AuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthType.Descriptor instead.
func (AuthType) EnumDescriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{1}
}

type ItemKind int32

const (
	ItemKind_ITEM_KIND_UNSPECIFIED ItemKind = 0
	// ITEM_KIND_GLOBAL_ITEM = 1;
	// Item's key := {COLLECTION_ID}{TYPE}[...key_paths]
	ItemKind_ITEM_KIND_PRIMARY_ITEM ItemKind = 2
	// Item's key := {COLLECTION_ID}{TYPE}<PrimaryKey>{...key_paths}
	ItemKind_ITEM_KIND_SUB_ITEM  ItemKind = 3
	ItemKind_ITEM_KIND_REFERENCE ItemKind = 4
)

// Enum value maps for ItemKind.
var (
	ItemKind_name = map[int32]string{
		0: "ITEM_KIND_UNSPECIFIED",
		2: "ITEM_KIND_PRIMARY_ITEM",
		3: "ITEM_KIND_SUB_ITEM",
		4: "ITEM_KIND_REFERENCE",
	}
	ItemKind_value = map[string]int32{
		"ITEM_KIND_UNSPECIFIED":  0,
		"ITEM_KIND_PRIMARY_ITEM": 2,
		"ITEM_KIND_SUB_ITEM":     3,
		"ITEM_KIND_REFERENCE":    4,
	}
)

func (x ItemKind) Enum() *ItemKind {
	p := new(ItemKind)
	*p = x
	return p
}

func (x ItemKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemKind) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_v1_auth_proto_enumTypes[2].Descriptor()
}

func (ItemKind) Type() protoreflect.EnumType {
	return &file_auth_v1_auth_proto_enumTypes[2]
}

func (x ItemKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemKind.Descriptor instead.
func (ItemKind) EnumDescriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{2}
}

type Action int32

const (
	// Should throw an error if used
	Action_ACTION_UNSPECIFIED Action = 0
	Action_ACTION_UTILITY     Action = 1
	// View the contents of an item
	Action_ACTION_VIEW Action = 10
	// Create a new item
	//  - key must not already exist
	Action_ACTION_CREATE Action = 11
	// Update an existing item
	//   - key must already exist
	//   - potential has paths
	Action_ACTION_UPDATE Action = 12
	// Delete an existing item, key must already exist
	Action_ACTION_DELETE Action = 13
	// Suggest a change to an item, key must already exist
	Action_ACTION_SUGGEST_VIEW Action = 14
	// Suggest a change to an item, key must already exist
	Action_ACTION_SUGGEST_CREATE Action = 15
	// Delete a suggestion, key must already exist
	Action_ACTION_SUGGEST_DELETE Action = 16
	// Approve a suggestion and apply it to the item, key must already exist
	Action_ACTION_SUGGEST_APPROVE  Action = 17
	Action_ACTION_VIEW_HISTORY     Action = 18
	Action_ACTION_VIEW_HIDDEN_TXS  Action = 19
	Action_ACTION_HIDE_TX          Action = 20
	Action_ACTION_UNHIDE_TX        Action = 21
	Action_ACTION_REFERENCE_CREATE Action = 30
	Action_ACTION_REFERENCE_DELETE Action = 31
	Action_ACTION_REFERENCE_VIEW   Action = 32
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0:  "ACTION_UNSPECIFIED",
		1:  "ACTION_UTILITY",
		10: "ACTION_VIEW",
		11: "ACTION_CREATE",
		12: "ACTION_UPDATE",
		13: "ACTION_DELETE",
		14: "ACTION_SUGGEST_VIEW",
		15: "ACTION_SUGGEST_CREATE",
		16: "ACTION_SUGGEST_DELETE",
		17: "ACTION_SUGGEST_APPROVE",
		18: "ACTION_VIEW_HISTORY",
		19: "ACTION_VIEW_HIDDEN_TXS",
		20: "ACTION_HIDE_TX",
		21: "ACTION_UNHIDE_TX",
		30: "ACTION_REFERENCE_CREATE",
		31: "ACTION_REFERENCE_DELETE",
		32: "ACTION_REFERENCE_VIEW",
	}
	Action_value = map[string]int32{
		"ACTION_UNSPECIFIED":      0,
		"ACTION_UTILITY":          1,
		"ACTION_VIEW":             10,
		"ACTION_CREATE":           11,
		"ACTION_UPDATE":           12,
		"ACTION_DELETE":           13,
		"ACTION_SUGGEST_VIEW":     14,
		"ACTION_SUGGEST_CREATE":   15,
		"ACTION_SUGGEST_DELETE":   16,
		"ACTION_SUGGEST_APPROVE":  17,
		"ACTION_VIEW_HISTORY":     18,
		"ACTION_VIEW_HIDDEN_TXS":  19,
		"ACTION_HIDE_TX":          20,
		"ACTION_UNHIDE_TX":        21,
		"ACTION_REFERENCE_CREATE": 30,
		"ACTION_REFERENCE_DELETE": 31,
		"ACTION_REFERENCE_VIEW":   32,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_v1_auth_proto_enumTypes[3].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_auth_v1_auth_proto_enumTypes[3]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{3}
}

type TxError int32

const (
	TxError_UNSPECIFIED     TxError = 0
	TxError_REQUEST_INVALID TxError = 1
	TxError_RUNTIME         TxError = 2
	TxError_RUNTIME_BAD_OPS TxError = 3
	// The provided key is not in the world state
	TxError_KEY_NOT_FOUND TxError = 4
	// The provided key is already in the world state
	TxError_KEY_ALREADY_EXISTS TxError = 5
	// The collection id is invalid
	TxError_COLLECTION_INVALID_ID TxError = 11
	// The collection is not registered and thus cannot be accessed
	TxError_COLLECTION_UNREGISTERED TxError = 12
	// The collection is already registered and thus cannot be registered again
	TxError_COLLECTION_ALREADY_REGISTERED TxError = 13
	// The collection is invalid (e.g. the collection does not have a default ACLEntry)
	TxError_COLLECTION_INVALID TxError = 14
	// The item type in the collection is invalid
	TxError_COLLECTION_INVALID_ITEM_TYPE TxError = 15
	// The role id in the collection is invalid
	TxError_COLLECTION_INVALID_ROLE_ID TxError = 16
	// The user does not have permission to perform the operation
	TxError_USER_INVALID_ID TxError = 20
	// The certificate is not registered as a user and thus cannot be used
	TxError_USER_UNREGISTERED TxError = 21
	// The certificate is already registered as a user and thus cannot be registered again
	TxError_USER_ALREADY_REGISTERED TxError = 22
	// The user is invalid
	TxError_USER_INVALID TxError = 23
	// The user does not have a role
	TxError_USER_NO_ROLE TxError = 24
	// USER_DELETED_ROLE          = 25;
	// The user does not have permission to perform the operation
	TxError_USER_PERMISSION_DENIED TxError = 26
	// The Item's key is invalid
	TxError_ITEM_INVALID_ID TxError = 31
	// The Item is not registered and thus cannot be accessed
	TxError_ITEM_UNREGISTERED TxError = 32
	// The Item is already registered and thus cannot be registered again
	TxError_ITEM_ALREADY_REGISTERED TxError = 33
	// The Item is invalid
	TxError_ITEM_INVALID TxError = 34
	// The item field path is invalid for the item type
	TxError_INVALID_ITEM_FIELD_PATH TxError = 35
	// The value at the item field path is invalid for the item type
	TxError_INVALID_ITEM_FIELD_VALUE TxError = 36
)

// Enum value maps for TxError.
var (
	TxError_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "REQUEST_INVALID",
		2:  "RUNTIME",
		3:  "RUNTIME_BAD_OPS",
		4:  "KEY_NOT_FOUND",
		5:  "KEY_ALREADY_EXISTS",
		11: "COLLECTION_INVALID_ID",
		12: "COLLECTION_UNREGISTERED",
		13: "COLLECTION_ALREADY_REGISTERED",
		14: "COLLECTION_INVALID",
		15: "COLLECTION_INVALID_ITEM_TYPE",
		16: "COLLECTION_INVALID_ROLE_ID",
		20: "USER_INVALID_ID",
		21: "USER_UNREGISTERED",
		22: "USER_ALREADY_REGISTERED",
		23: "USER_INVALID",
		24: "USER_NO_ROLE",
		26: "USER_PERMISSION_DENIED",
		31: "ITEM_INVALID_ID",
		32: "ITEM_UNREGISTERED",
		33: "ITEM_ALREADY_REGISTERED",
		34: "ITEM_INVALID",
		35: "INVALID_ITEM_FIELD_PATH",
		36: "INVALID_ITEM_FIELD_VALUE",
	}
	TxError_value = map[string]int32{
		"UNSPECIFIED":                   0,
		"REQUEST_INVALID":               1,
		"RUNTIME":                       2,
		"RUNTIME_BAD_OPS":               3,
		"KEY_NOT_FOUND":                 4,
		"KEY_ALREADY_EXISTS":            5,
		"COLLECTION_INVALID_ID":         11,
		"COLLECTION_UNREGISTERED":       12,
		"COLLECTION_ALREADY_REGISTERED": 13,
		"COLLECTION_INVALID":            14,
		"COLLECTION_INVALID_ITEM_TYPE":  15,
		"COLLECTION_INVALID_ROLE_ID":    16,
		"USER_INVALID_ID":               20,
		"USER_UNREGISTERED":             21,
		"USER_ALREADY_REGISTERED":       22,
		"USER_INVALID":                  23,
		"USER_NO_ROLE":                  24,
		"USER_PERMISSION_DENIED":        26,
		"ITEM_INVALID_ID":               31,
		"ITEM_UNREGISTERED":             32,
		"ITEM_ALREADY_REGISTERED":       33,
		"ITEM_INVALID":                  34,
		"INVALID_ITEM_FIELD_PATH":       35,
		"INVALID_ITEM_FIELD_VALUE":      36,
	}
)

func (x TxError) Enum() *TxError {
	p := new(TxError)
	*p = x
	return p
}

func (x TxError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxError) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_v1_auth_proto_enumTypes[4].Descriptor()
}

func (TxError) Type() protoreflect.EnumType {
	return &file_auth_v1_auth_proto_enumTypes[4]
}

func (x TxError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxError.Descriptor instead.
func (TxError) EnumDescriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{4}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MspId  string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type KeySchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The item type of the key
	ItemType string `protobuf:"bytes,1,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	// The kind of item that the key is for
	ItemKind ItemKind `protobuf:"varint,2,opt,name=item_kind,json=itemKind,proto3,enum=auth.ItemKind" json:"item_kind,omitempty"`
	// The paths that make up the key
	Properties *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *KeySchema) Reset() {
	*x = KeySchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySchema) ProtoMessage() {}

func (x *KeySchema) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySchema.ProtoReflect.Descriptor instead.
func (*KeySchema) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{1}
}

func (x *KeySchema) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *KeySchema) GetItemKind() ItemKind {
	if x != nil {
		return x.ItemKind
	}
	return ItemKind_ITEM_KIND_UNSPECIFIED
}

func (x *KeySchema) GetProperties() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Can be used as the history entry
type StateActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction id that caused the change
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// The msp of the user that caused the change
	MspId string `protobuf:"bytes,2,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	// The id of the user that caused the change
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The timestamp of the change
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// A note about the change
	Note string `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *StateActivity) Reset() {
	*x = StateActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateActivity) ProtoMessage() {}

func (x *StateActivity) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateActivity.ProtoReflect.Descriptor instead.
func (*StateActivity) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{2}
}

func (x *StateActivity) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *StateActivity) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *StateActivity) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StateActivity) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StateActivity) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action       Action                 `protobuf:"varint,1,opt,name=action,proto3,enum=auth.Action" json:"action,omitempty"`
	CollectionId string                 `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	ItemType     string                 `protobuf:"bytes,3,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	Paths        *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=paths,proto3" json:"paths,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{3}
}

func (x *Operation) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

func (x *Operation) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Operation) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *Operation) GetPaths() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Polices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the item type
	ItemPolicies map[string]*PathPolicy `protobuf:"bytes,1,rep,name=item_policies,json=itemPolicies,proto3" json:"item_policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Default policy for all items
	DefaultPolicy *PathPolicy `protobuf:"bytes,2,opt,name=default_policy,json=defaultPolicy,proto3" json:"default_policy,omitempty"`
	// The types that are excluded from the default policy
	DefaultExcludedTypes []string `protobuf:"bytes,3,rep,name=default_excluded_types,json=defaultExcludedTypes,proto3" json:"default_excluded_types,omitempty"`
}

func (x *Polices) Reset() {
	*x = Polices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Polices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polices) ProtoMessage() {}

func (x *Polices) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polices.ProtoReflect.Descriptor instead.
func (*Polices) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{4}
}

func (x *Polices) GetItemPolicies() map[string]*PathPolicy {
	if x != nil {
		return x.ItemPolicies
	}
	return nil
}

func (x *Polices) GetDefaultPolicy() *PathPolicy {
	if x != nil {
		return x.DefaultPolicy
	}
	return nil
}

func (x *Polices) GetDefaultExcludedTypes() []string {
	if x != nil {
		return x.DefaultExcludedTypes
	}
	return nil
}

// This message is the tree node for operations on the state item
type PathPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path is a sub path of a field mask
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	FullPath      string `protobuf:"bytes,2,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
	AllowSubPaths bool   `protobuf:"varint,3,opt,name=allow_sub_paths,json=allowSubPaths,proto3" json:"allow_sub_paths,omitempty"`
	// The key is a valid sub path in the type of state item
	SubPaths map[string]*PathPolicy `protobuf:"bytes,4,rep,name=sub_paths,json=subPaths,proto3" json:"sub_paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If the policy is not set than use a parent policy unless nested policy is set
	Actions []Action `protobuf:"varint,5,rep,packed,name=actions,proto3,enum=auth.Action" json:"actions,omitempty"`
}

func (x *PathPolicy) Reset() {
	*x = PathPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathPolicy) ProtoMessage() {}

func (x *PathPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathPolicy.ProtoReflect.Descriptor instead.
func (*PathPolicy) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{5}
}

func (x *PathPolicy) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PathPolicy) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

func (x *PathPolicy) GetAllowSubPaths() bool {
	if x != nil {
		return x.AllowSubPaths
	}
	return false
}

func (x *PathPolicy) GetSubPaths() map[string]*PathPolicy {
	if x != nil {
		return x.SubPaths
	}
	return nil
}

func (x *PathPolicy) GetActions() []Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

var file_auth_v1_auth_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*Operation)(nil),
		Field:         57775,
		Name:          "auth.operation",
		Tag:           "bytes,57775,opt,name=operation",
		Filename:      "auth/v1/auth.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*TransactionType)(nil),
		Field:         50556,
		Name:          "auth.transaction_type",
		Tag:           "varint,50556,opt,name=transaction_type,enum=auth.TransactionType",
		Filename:      "auth/v1/auth.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*KeySchema)(nil),
		Field:         54599,
		Name:          "auth.key_schema",
		Tag:           "bytes,54599,opt,name=key_schema",
		Filename:      "auth/v1/auth.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*AuthType)(nil),
		Field:         55888,
		Name:          "auth.auth_type",
		Tag:           "varint,55888,opt,name=auth_type,enum=auth.AuthType",
		Filename:      "auth/v1/auth.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional auth.Operation operation = 57775;
	E_Operation = &file_auth_v1_auth_proto_extTypes[0]
	// optional auth.TransactionType transaction_type = 50556;
	E_TransactionType = &file_auth_v1_auth_proto_extTypes[1]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional auth.KeySchema key_schema = 54599;
	E_KeySchema = &file_auth_v1_auth_proto_extTypes[2]
	// optional auth.AuthType auth_type = 55888;
	E_AuthType = &file_auth_v1_auth_proto_extTypes[3]
)

var File_auth_v1_auth_proto protoreflect.FileDescriptor

var file_auth_v1_auth_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6d,
	0x73, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9a, 0x01,
	0x0a, 0x09, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x24, 0x0a, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3a,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x05,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x73,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0xba, 0x48, 0x08, 0x82, 0x01, 0x05, 0x10, 0x01, 0x22, 0x01, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x07, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x69,
	0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x51, 0x0a, 0x11, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x03,
	0x0a, 0x0a, 0x50, 0x61, 0x74, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x62,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4d, 0x0a, 0x0d, 0x53, 0x75,
	0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x65, 0xba, 0x48, 0x62, 0x1a, 0x60,
	0x0a, 0x0f, 0x53, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x19, 0x53, 0x75, 0x62, 0x20, 0x50, 0x61, 0x74, 0x68, 0x73, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a, 0x32, 0x21, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x30,
	0x2a, 0x6c, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x2a, 0x9b,
	0x01, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x05, 0x2a, 0x72, 0x0a, 0x08,
	0x49, 0x74, 0x65, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x04,
	0x2a, 0x9d, 0x03, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x54,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x0d, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x47, 0x47,
	0x45, 0x53, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x10,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45,
	0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x54, 0x58, 0x53, 0x10,
	0x13, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x44, 0x45,
	0x5f, 0x54, 0x58, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x58, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x1e, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x20,
	0x2a, 0xd0, 0x04, 0x0a, 0x07, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4f,
	0x50, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x05, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x49, 0x44, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x15,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x16, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x17, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10,
	0x18, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x22, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x10, 0x23, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0x24, 0x3a, 0x4f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xaf, 0xc3, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x62, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfc, 0x8a, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x51, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc7, 0xaa, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x3a, 0x4e, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0xb4, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x42, 0x77, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x42, 0x09, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6e, 0x6f, 0x76, 0x61, 0x33, 0x38, 0x2f, 0x73, 0x61, 0x61, 0x63, 0x73, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x73, 0x61, 0x61, 0x63, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x04, 0x41,
	0x75, 0x74, 0x68, 0xca, 0x02, 0x04, 0x41, 0x75, 0x74, 0x68, 0xe2, 0x02, 0x10, 0x41, 0x75, 0x74,
	0x68, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x04,
	0x41, 0x75, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auth_v1_auth_proto_rawDescOnce sync.Once
	file_auth_v1_auth_proto_rawDescData = file_auth_v1_auth_proto_rawDesc
)

func file_auth_v1_auth_proto_rawDescGZIP() []byte {
	file_auth_v1_auth_proto_rawDescOnce.Do(func() {
		file_auth_v1_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_auth_v1_auth_proto_rawDescData)
	})
	return file_auth_v1_auth_proto_rawDescData
}

var file_auth_v1_auth_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_auth_v1_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_auth_v1_auth_proto_goTypes = []interface{}{
	(TransactionType)(0),                // 0: auth.TransactionType
	(AuthType)(0),                       // 1: auth.AuthType
	(ItemKind)(0),                       // 2: auth.ItemKind
	(Action)(0),                         // 3: auth.Action
	(TxError)(0),                        // 4: auth.TxError
	(*User)(nil),                        // 5: auth.User
	(*KeySchema)(nil),                   // 6: auth.KeySchema
	(*StateActivity)(nil),               // 7: auth.StateActivity
	(*Operation)(nil),                   // 8: auth.Operation
	(*Polices)(nil),                     // 9: auth.Polices
	(*PathPolicy)(nil),                  // 10: auth.PathPolicy
	nil,                                 // 11: auth.Polices.ItemPoliciesEntry
	nil,                                 // 12: auth.PathPolicy.SubPathsEntry
	(*fieldmaskpb.FieldMask)(nil),       // 13: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),       // 14: google.protobuf.Timestamp
	(*descriptorpb.MethodOptions)(nil),  // 15: google.protobuf.MethodOptions
	(*descriptorpb.MessageOptions)(nil), // 16: google.protobuf.MessageOptions
}
var file_auth_v1_auth_proto_depIdxs = []int32{
	2,  // 0: auth.KeySchema.item_kind:type_name -> auth.ItemKind
	13, // 1: auth.KeySchema.properties:type_name -> google.protobuf.FieldMask
	14, // 2: auth.StateActivity.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 3: auth.Operation.action:type_name -> auth.Action
	13, // 4: auth.Operation.paths:type_name -> google.protobuf.FieldMask
	11, // 5: auth.Polices.item_policies:type_name -> auth.Polices.ItemPoliciesEntry
	10, // 6: auth.Polices.default_policy:type_name -> auth.PathPolicy
	12, // 7: auth.PathPolicy.sub_paths:type_name -> auth.PathPolicy.SubPathsEntry
	3,  // 8: auth.PathPolicy.actions:type_name -> auth.Action
	10, // 9: auth.Polices.ItemPoliciesEntry.value:type_name -> auth.PathPolicy
	10, // 10: auth.PathPolicy.SubPathsEntry.value:type_name -> auth.PathPolicy
	15, // 11: auth.operation:extendee -> google.protobuf.MethodOptions
	15, // 12: auth.transaction_type:extendee -> google.protobuf.MethodOptions
	16, // 13: auth.key_schema:extendee -> google.protobuf.MessageOptions
	16, // 14: auth.auth_type:extendee -> google.protobuf.MessageOptions
	8,  // 15: auth.operation:type_name -> auth.Operation
	0,  // 16: auth.transaction_type:type_name -> auth.TransactionType
	6,  // 17: auth.key_schema:type_name -> auth.KeySchema
	1,  // 18: auth.auth_type:type_name -> auth.AuthType
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	15, // [15:19] is the sub-list for extension type_name
	11, // [11:15] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_auth_v1_auth_proto_init() }
func file_auth_v1_auth_proto_init() {
	if File_auth_v1_auth_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_auth_v1_auth_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Polices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auth_v1_auth_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   8,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_auth_v1_auth_proto_goTypes,
		DependencyIndexes: file_auth_v1_auth_proto_depIdxs,
		EnumInfos:         file_auth_v1_auth_proto_enumTypes,
		MessageInfos:      file_auth_v1_auth_proto_msgTypes,
		ExtensionInfos:    file_auth_v1_auth_proto_extTypes,
	}.Build()
	File_auth_v1_auth_proto = out.File
	file_auth_v1_auth_proto_rawDesc = nil
	file_auth_v1_auth_proto_goTypes = nil
	file_auth_v1_auth_proto_depIdxs = nil
}
