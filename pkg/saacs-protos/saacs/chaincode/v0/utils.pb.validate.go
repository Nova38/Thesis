// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: saacs/chaincode/v0/utils.proto

package v0

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Empty

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserResponseMultiError, or nil if none found.
func (m *GetCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Registered

	if len(errors) > 0 {
		return GetCurrentUserResponseMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponseMultiError) AllErrors() []error { return m }

// GetCurrentUserResponseValidationError is the validation error returned by
// GetCurrentUserResponse.Validate if the designated constraints aren't met.
type GetCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponseValidationError) ErrorName() string {
	return "GetCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponseValidationError{}

// Validate checks the field values on GetCurrentFullUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentFullUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentFullUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentFullUserResponseMultiError, or nil if none found.
func (m *GetCurrentFullUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentFullUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentFullUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentFullUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentFullUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Registered

	for idx, item := range m.GetUserCollectionRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCurrentFullUserResponseValidationError{
						field:  fmt.Sprintf("UserCollectionRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCurrentFullUserResponseValidationError{
						field:  fmt.Sprintf("UserCollectionRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCurrentFullUserResponseValidationError{
					field:  fmt.Sprintf("UserCollectionRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserMemberships() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCurrentFullUserResponseValidationError{
						field:  fmt.Sprintf("UserMemberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCurrentFullUserResponseValidationError{
						field:  fmt.Sprintf("UserMemberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCurrentFullUserResponseValidationError{
					field:  fmt.Sprintf("UserMemberships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCurrentFullUserResponseMultiError(errors)
	}

	return nil
}

// GetCurrentFullUserResponseMultiError is an error wrapping multiple
// validation errors returned by GetCurrentFullUserResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCurrentFullUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentFullUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentFullUserResponseMultiError) AllErrors() []error { return m }

// GetCurrentFullUserResponseValidationError is the validation error returned
// by GetCurrentFullUserResponse.Validate if the designated constraints aren't met.
type GetCurrentFullUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentFullUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentFullUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentFullUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentFullUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentFullUserResponseValidationError) ErrorName() string {
	return "GetCurrentFullUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentFullUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentFullUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentFullUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentFullUserResponseValidationError{}

// Validate checks the field values on AuthorizeOperationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizeOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeOperationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizeOperationRequestMultiError, or nil if none found.
func (m *AuthorizeOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorizeOperationRequestValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorizeOperationRequestValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizeOperationRequestValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthorizeOperationRequestMultiError(errors)
	}

	return nil
}

// AuthorizeOperationRequestMultiError is an error wrapping multiple validation
// errors returned by AuthorizeOperationRequest.ValidateAll() if the
// designated constraints aren't met.
type AuthorizeOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeOperationRequestMultiError) AllErrors() []error { return m }

// AuthorizeOperationRequestValidationError is the validation error returned by
// AuthorizeOperationRequest.Validate if the designated constraints aren't met.
type AuthorizeOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeOperationRequestValidationError) ErrorName() string {
	return "AuthorizeOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeOperationRequestValidationError{}

// Validate checks the field values on AuthorizeOperationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizeOperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeOperationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizeOperationResponseMultiError, or nil if none found.
func (m *AuthorizeOperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeOperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorized

	if len(errors) > 0 {
		return AuthorizeOperationResponseMultiError(errors)
	}

	return nil
}

// AuthorizeOperationResponseMultiError is an error wrapping multiple
// validation errors returned by AuthorizeOperationResponse.ValidateAll() if
// the designated constraints aren't met.
type AuthorizeOperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeOperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeOperationResponseMultiError) AllErrors() []error { return m }

// AuthorizeOperationResponseValidationError is the validation error returned
// by AuthorizeOperationResponse.Validate if the designated constraints aren't met.
type AuthorizeOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeOperationResponseValidationError) ErrorName() string {
	return "AuthorizeOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeOperationResponseValidationError{}

// Validate checks the field values on GetCollectionsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsListRequestMultiError, or nil if none found.
func (m *GetCollectionsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Empty

	if len(errors) > 0 {
		return GetCollectionsListRequestMultiError(errors)
	}

	return nil
}

// GetCollectionsListRequestMultiError is an error wrapping multiple validation
// errors returned by GetCollectionsListRequest.ValidateAll() if the
// designated constraints aren't met.
type GetCollectionsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsListRequestMultiError) AllErrors() []error { return m }

// GetCollectionsListRequestValidationError is the validation error returned by
// GetCollectionsListRequest.Validate if the designated constraints aren't met.
type GetCollectionsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsListRequestValidationError) ErrorName() string {
	return "GetCollectionsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsListRequestValidationError{}

// Validate checks the field values on GetCollectionsListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsListResponseMultiError, or nil if none found.
func (m *GetCollectionsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCollectionsListResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCollectionsListResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCollectionsListResponseValidationError{
					field:  fmt.Sprintf("Collections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCollectionsListResponseMultiError(errors)
	}

	return nil
}

// GetCollectionsListResponseMultiError is an error wrapping multiple
// validation errors returned by GetCollectionsListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCollectionsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsListResponseMultiError) AllErrors() []error { return m }

// GetCollectionsListResponseValidationError is the validation error returned
// by GetCollectionsListResponse.Validate if the designated constraints aren't met.
type GetCollectionsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsListResponseValidationError) ErrorName() string {
	return "GetCollectionsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsListResponseValidationError{}

// Validate checks the field values on BootstrapRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BootstrapRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BootstrapRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BootstrapRequestMultiError, or nil if none found.
func (m *BootstrapRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BootstrapRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapRequestValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BootstrapRequestMultiError(errors)
	}

	return nil
}

// BootstrapRequestMultiError is an error wrapping multiple validation errors
// returned by BootstrapRequest.ValidateAll() if the designated constraints
// aren't met.
type BootstrapRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BootstrapRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BootstrapRequestMultiError) AllErrors() []error { return m }

// BootstrapRequestValidationError is the validation error returned by
// BootstrapRequest.Validate if the designated constraints aren't met.
type BootstrapRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BootstrapRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BootstrapRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BootstrapRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BootstrapRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BootstrapRequestValidationError) ErrorName() string { return "BootstrapRequestValidationError" }

// Error satisfies the builtin error interface
func (e BootstrapRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBootstrapRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BootstrapRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BootstrapRequestValidationError{}

// Validate checks the field values on BootstrapResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BootstrapResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BootstrapResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BootstrapResponseMultiError, or nil if none found.
func (m *BootstrapResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BootstrapResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BootstrapResponseMultiError(errors)
	}

	return nil
}

// BootstrapResponseMultiError is an error wrapping multiple validation errors
// returned by BootstrapResponse.ValidateAll() if the designated constraints
// aren't met.
type BootstrapResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BootstrapResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BootstrapResponseMultiError) AllErrors() []error { return m }

// BootstrapResponseValidationError is the validation error returned by
// BootstrapResponse.Validate if the designated constraints aren't met.
type BootstrapResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BootstrapResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BootstrapResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BootstrapResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BootstrapResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BootstrapResponseValidationError) ErrorName() string {
	return "BootstrapResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BootstrapResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBootstrapResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BootstrapResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BootstrapResponseValidationError{}

// Validate checks the field values on GetCollectionAuthModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionAuthModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionAuthModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCollectionAuthModelRequestMultiError, or nil if none found.
func (m *GetCollectionAuthModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionAuthModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	if len(errors) > 0 {
		return GetCollectionAuthModelRequestMultiError(errors)
	}

	return nil
}

// GetCollectionAuthModelRequestMultiError is an error wrapping multiple
// validation errors returned by GetCollectionAuthModelRequest.ValidateAll()
// if the designated constraints aren't met.
type GetCollectionAuthModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionAuthModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionAuthModelRequestMultiError) AllErrors() []error { return m }

// GetCollectionAuthModelRequestValidationError is the validation error
// returned by GetCollectionAuthModelRequest.Validate if the designated
// constraints aren't met.
type GetCollectionAuthModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionAuthModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionAuthModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionAuthModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionAuthModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionAuthModelRequestValidationError) ErrorName() string {
	return "GetCollectionAuthModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionAuthModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionAuthModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionAuthModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionAuthModelRequestValidationError{}
