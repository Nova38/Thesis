// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: saacs/common/v0/history.proto

package v0

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HiddenTx with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HiddenTx) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HiddenTx with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HiddenTxMultiError, or nil
// if none found.
func (m *HiddenTx) ValidateAll() error {
	return m.validate(true)
}

func (m *HiddenTx) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxId

	// no validation rules for MspId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HiddenTxValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HiddenTxValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HiddenTxValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Note

	if len(errors) > 0 {
		return HiddenTxMultiError(errors)
	}

	return nil
}

// HiddenTxMultiError is an error wrapping multiple validation errors returned
// by HiddenTx.ValidateAll() if the designated constraints aren't met.
type HiddenTxMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HiddenTxMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HiddenTxMultiError) AllErrors() []error { return m }

// HiddenTxValidationError is the validation error returned by
// HiddenTx.Validate if the designated constraints aren't met.
type HiddenTxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HiddenTxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HiddenTxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HiddenTxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HiddenTxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HiddenTxValidationError) ErrorName() string { return "HiddenTxValidationError" }

// Error satisfies the builtin error interface
func (e HiddenTxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHiddenTx.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HiddenTxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HiddenTxValidationError{}

// Validate checks the field values on HiddenTxList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HiddenTxList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HiddenTxList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HiddenTxListMultiError, or
// nil if none found.
func (m *HiddenTxList) ValidateAll() error {
	return m.validate(true)
}

func (m *HiddenTxList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrimaryKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HiddenTxListValidationError{
					field:  "PrimaryKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HiddenTxListValidationError{
					field:  "PrimaryKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrimaryKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HiddenTxListValidationError{
				field:  "PrimaryKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MspId

	for idx, item := range m.GetTxs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HiddenTxListValidationError{
						field:  fmt.Sprintf("Txs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HiddenTxListValidationError{
						field:  fmt.Sprintf("Txs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HiddenTxListValidationError{
					field:  fmt.Sprintf("Txs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HiddenTxListMultiError(errors)
	}

	return nil
}

// HiddenTxListMultiError is an error wrapping multiple validation errors
// returned by HiddenTxList.ValidateAll() if the designated constraints aren't met.
type HiddenTxListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HiddenTxListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HiddenTxListMultiError) AllErrors() []error { return m }

// HiddenTxListValidationError is the validation error returned by
// HiddenTxList.Validate if the designated constraints aren't met.
type HiddenTxListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HiddenTxListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HiddenTxListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HiddenTxListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HiddenTxListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HiddenTxListValidationError) ErrorName() string { return "HiddenTxListValidationError" }

// Error satisfies the builtin error interface
func (e HiddenTxListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHiddenTxList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HiddenTxListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HiddenTxListValidationError{}

// Validate checks the field values on HistoryEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HistoryEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryEntry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistoryEntryMultiError, or
// nil if none found.
func (m *HistoryEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxId

	// no validation rules for IsDelete

	// no validation rules for IsHidden

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistoryEntryValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistoryEntryValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistoryEntryValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Note

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistoryEntryValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistoryEntryValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistoryEntryValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HistoryEntryMultiError(errors)
	}

	return nil
}

// HistoryEntryMultiError is an error wrapping multiple validation errors
// returned by HistoryEntry.ValidateAll() if the designated constraints aren't met.
type HistoryEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryEntryMultiError) AllErrors() []error { return m }

// HistoryEntryValidationError is the validation error returned by
// HistoryEntry.Validate if the designated constraints aren't met.
type HistoryEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryEntryValidationError) ErrorName() string { return "HistoryEntryValidationError" }

// Error satisfies the builtin error interface
func (e HistoryEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryEntryValidationError{}

// Validate checks the field values on History with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *History) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on History with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HistoryMultiError, or nil if none found.
func (m *History) ValidateAll() error {
	return m.validate(true)
}

func (m *History) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetHiddenTxs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistoryValidationError{
					field:  "HiddenTxs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistoryValidationError{
					field:  "HiddenTxs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHiddenTxs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistoryValidationError{
				field:  "HiddenTxs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetHiddenTxsByMspId()))
		i := 0
		for key := range m.GetHiddenTxsByMspId() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHiddenTxsByMspId()[key]
			_ = val

			// no validation rules for HiddenTxsByMspId[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, HistoryValidationError{
							field:  fmt.Sprintf("HiddenTxsByMspId[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, HistoryValidationError{
							field:  fmt.Sprintf("HiddenTxsByMspId[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return HistoryValidationError{
						field:  fmt.Sprintf("HiddenTxsByMspId[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return HistoryMultiError(errors)
	}

	return nil
}

// HistoryMultiError is an error wrapping multiple validation errors returned
// by History.ValidateAll() if the designated constraints aren't met.
type HistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryMultiError) AllErrors() []error { return m }

// HistoryValidationError is the validation error returned by History.Validate
// if the designated constraints aren't met.
type HistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryValidationError) ErrorName() string { return "HistoryValidationError" }

// Error satisfies the builtin error interface
func (e HistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryValidationError{}

// Validate checks the field values on HistoryOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HistoryOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistoryOptionsMultiError,
// or nil if none found.
func (m *HistoryOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Include

	if all {
		switch v := interface{}(m.GetHidden()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistoryOptionsValidationError{
					field:  "Hidden",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistoryOptionsValidationError{
					field:  "Hidden",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHidden()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistoryOptionsValidationError{
				field:  "Hidden",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HistoryOptionsMultiError(errors)
	}

	return nil
}

// HistoryOptionsMultiError is an error wrapping multiple validation errors
// returned by HistoryOptions.ValidateAll() if the designated constraints
// aren't met.
type HistoryOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryOptionsMultiError) AllErrors() []error { return m }

// HistoryOptionsValidationError is the validation error returned by
// HistoryOptions.Validate if the designated constraints aren't met.
type HistoryOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryOptionsValidationError) ErrorName() string { return "HistoryOptionsValidationError" }

// Error satisfies the builtin error interface
func (e HistoryOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryOptionsValidationError{}

// Validate checks the field values on HiddenOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HiddenOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HiddenOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HiddenOptionsMultiError, or
// nil if none found.
func (m *HiddenOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *HiddenOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Include

	if len(errors) > 0 {
		return HiddenOptionsMultiError(errors)
	}

	return nil
}

// HiddenOptionsMultiError is an error wrapping multiple validation errors
// returned by HiddenOptions.ValidateAll() if the designated constraints
// aren't met.
type HiddenOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HiddenOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HiddenOptionsMultiError) AllErrors() []error { return m }

// HiddenOptionsValidationError is the validation error returned by
// HiddenOptions.Validate if the designated constraints aren't met.
type HiddenOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HiddenOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HiddenOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HiddenOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HiddenOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HiddenOptionsValidationError) ErrorName() string { return "HiddenOptionsValidationError" }

// Error satisfies the builtin error interface
func (e HiddenOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHiddenOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HiddenOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HiddenOptionsValidationError{}
