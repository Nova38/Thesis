// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: saacs/common/v0/errors.proto

package v0

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxError int32

const (
	TxError_UNSPECIFIED     TxError = 0
	TxError_REQUEST_INVALID TxError = 1
	TxError_RUNTIME         TxError = 2
	TxError_RUNTIME_BAD_OPS TxError = 3
	// The provided key is not in the world state
	TxError_KEY_NOT_FOUND TxError = 4
	// The provided key is already in the world state
	TxError_KEY_ALREADY_EXISTS TxError = 5
	// The collection id is invalid
	TxError_COLLECTION_INVALID_ID TxError = 11
	// The collection is not registered and thus cannot be accessed
	TxError_COLLECTION_UNREGISTERED TxError = 12
	// The collection is already registered and thus cannot be registered again
	TxError_COLLECTION_ALREADY_REGISTERED TxError = 13
	// The collection is invalid (e.g. the collection does not have a default ACLEntry)
	TxError_COLLECTION_INVALID TxError = 14
	// The item type in the collection is invalid
	TxError_COLLECTION_INVALID_ITEM_TYPE TxError = 15
	// The role id in the collection is invalid
	TxError_COLLECTION_INVALID_ROLE_ID TxError = 16
	// The user does not have permission to perform the operation
	TxError_USER_INVALID_ID TxError = 20
	// The certificate is not registered as a user and thus cannot be used
	TxError_USER_UNREGISTERED TxError = 21
	// The certificate is already registered as a user and thus cannot be registered again
	TxError_USER_ALREADY_REGISTERED TxError = 22
	// The user is invalid
	TxError_USER_INVALID TxError = 23
	// The user does not have a role
	TxError_USER_NO_ROLE TxError = 24
	// USER_DELETED_ROLE          = 25;
	// The user does not have permission to perform the operation
	TxError_USER_PERMISSION_DENIED TxError = 26
	// The Item's key is invalid
	TxError_ITEM_INVALID_ID TxError = 31
	// The Item is not registered and thus cannot be accessed
	TxError_ITEM_UNREGISTERED TxError = 32
	// The Item is already registered and thus cannot be registered again
	TxError_ITEM_ALREADY_REGISTERED TxError = 33
	// The Item is invalid
	TxError_ITEM_INVALID TxError = 34
	// The item field path is invalid for the item type
	TxError_INVALID_ITEM_FIELD_PATH TxError = 35
	// The value at the item field path is invalid for the item type
	TxError_INVALID_ITEM_FIELD_VALUE TxError = 36
)

// Enum value maps for TxError.
var (
	TxError_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "REQUEST_INVALID",
		2:  "RUNTIME",
		3:  "RUNTIME_BAD_OPS",
		4:  "KEY_NOT_FOUND",
		5:  "KEY_ALREADY_EXISTS",
		11: "COLLECTION_INVALID_ID",
		12: "COLLECTION_UNREGISTERED",
		13: "COLLECTION_ALREADY_REGISTERED",
		14: "COLLECTION_INVALID",
		15: "COLLECTION_INVALID_ITEM_TYPE",
		16: "COLLECTION_INVALID_ROLE_ID",
		20: "USER_INVALID_ID",
		21: "USER_UNREGISTERED",
		22: "USER_ALREADY_REGISTERED",
		23: "USER_INVALID",
		24: "USER_NO_ROLE",
		26: "USER_PERMISSION_DENIED",
		31: "ITEM_INVALID_ID",
		32: "ITEM_UNREGISTERED",
		33: "ITEM_ALREADY_REGISTERED",
		34: "ITEM_INVALID",
		35: "INVALID_ITEM_FIELD_PATH",
		36: "INVALID_ITEM_FIELD_VALUE",
	}
	TxError_value = map[string]int32{
		"UNSPECIFIED":                   0,
		"REQUEST_INVALID":               1,
		"RUNTIME":                       2,
		"RUNTIME_BAD_OPS":               3,
		"KEY_NOT_FOUND":                 4,
		"KEY_ALREADY_EXISTS":            5,
		"COLLECTION_INVALID_ID":         11,
		"COLLECTION_UNREGISTERED":       12,
		"COLLECTION_ALREADY_REGISTERED": 13,
		"COLLECTION_INVALID":            14,
		"COLLECTION_INVALID_ITEM_TYPE":  15,
		"COLLECTION_INVALID_ROLE_ID":    16,
		"USER_INVALID_ID":               20,
		"USER_UNREGISTERED":             21,
		"USER_ALREADY_REGISTERED":       22,
		"USER_INVALID":                  23,
		"USER_NO_ROLE":                  24,
		"USER_PERMISSION_DENIED":        26,
		"ITEM_INVALID_ID":               31,
		"ITEM_UNREGISTERED":             32,
		"ITEM_ALREADY_REGISTERED":       33,
		"ITEM_INVALID":                  34,
		"INVALID_ITEM_FIELD_PATH":       35,
		"INVALID_ITEM_FIELD_VALUE":      36,
	}
)

func (x TxError) Enum() *TxError {
	p := new(TxError)
	*p = x
	return p
}

func (x TxError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxError) Descriptor() protoreflect.EnumDescriptor {
	return file_saacs_common_v0_errors_proto_enumTypes[0].Descriptor()
}

func (TxError) Type() protoreflect.EnumType {
	return &file_saacs_common_v0_errors_proto_enumTypes[0]
}

func (x TxError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxError.Descriptor instead.
func (TxError) EnumDescriptor() ([]byte, []int) {
	return file_saacs_common_v0_errors_proto_rawDescGZIP(), []int{0}
}

type ErrorWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    TxError          `protobuf:"varint,1,opt,name=code,proto3,enum=saacs.common.v0.TxError" json:"code,omitempty"`
	Error   *structpb.Struct `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorWrapper) Reset() {
	*x = ErrorWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saacs_common_v0_errors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorWrapper) ProtoMessage() {}

func (x *ErrorWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_saacs_common_v0_errors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorWrapper.ProtoReflect.Descriptor instead.
func (*ErrorWrapper) Descriptor() ([]byte, []int) {
	return file_saacs_common_v0_errors_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorWrapper) GetCode() TxError {
	if x != nil {
		return x.Code
	}
	return TxError_UNSPECIFIED
}

func (x *ErrorWrapper) GetError() *structpb.Struct {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ErrorWrapper) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_saacs_common_v0_errors_proto protoreflect.FileDescriptor

var file_saacs_common_v0_errors_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x61, 0x61, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x30, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x73, 0x61, 0x61, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01,
	0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73,
	0x61, 0x61, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54,
	0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0xd0, 0x04, 0x0a, 0x07, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x4f, 0x50, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x45, 0x59,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x14, 0x12, 0x15,
	0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x10, 0x18, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44,
	0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x20, 0x12, 0x1b,
	0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x22, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x23, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x24, 0x42, 0xba, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x61, 0x61, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x42, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x76, 0x61,
	0x33, 0x38, 0x2f, 0x73, 0x61, 0x61, 0x63, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x61, 0x61,
	0x63, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x61, 0x61, 0x63, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0xa2, 0x02, 0x03, 0x53, 0x43, 0x56, 0xaa,
	0x02, 0x0f, 0x53, 0x61, 0x61, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56,
	0x30, 0xca, 0x02, 0x0f, 0x53, 0x61, 0x61, 0x63, 0x73, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5c, 0x56, 0x30, 0xe2, 0x02, 0x1b, 0x53, 0x61, 0x61, 0x63, 0x73, 0x5c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5c, 0x56, 0x30, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x11, 0x53, 0x61, 0x61, 0x63, 0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x3a, 0x3a, 0x56, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_saacs_common_v0_errors_proto_rawDescOnce sync.Once
	file_saacs_common_v0_errors_proto_rawDescData = file_saacs_common_v0_errors_proto_rawDesc
)

func file_saacs_common_v0_errors_proto_rawDescGZIP() []byte {
	file_saacs_common_v0_errors_proto_rawDescOnce.Do(func() {
		file_saacs_common_v0_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_saacs_common_v0_errors_proto_rawDescData)
	})
	return file_saacs_common_v0_errors_proto_rawDescData
}

var file_saacs_common_v0_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_saacs_common_v0_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_saacs_common_v0_errors_proto_goTypes = []interface{}{
	(TxError)(0),            // 0: saacs.common.v0.TxError
	(*ErrorWrapper)(nil),    // 1: saacs.common.v0.ErrorWrapper
	(*structpb.Struct)(nil), // 2: google.protobuf.Struct
}
var file_saacs_common_v0_errors_proto_depIdxs = []int32{
	0, // 0: saacs.common.v0.ErrorWrapper.code:type_name -> saacs.common.v0.TxError
	2, // 1: saacs.common.v0.ErrorWrapper.error:type_name -> google.protobuf.Struct
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_saacs_common_v0_errors_proto_init() }
func file_saacs_common_v0_errors_proto_init() {
	if File_saacs_common_v0_errors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_saacs_common_v0_errors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_saacs_common_v0_errors_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_saacs_common_v0_errors_proto_goTypes,
		DependencyIndexes: file_saacs_common_v0_errors_proto_depIdxs,
		EnumInfos:         file_saacs_common_v0_errors_proto_enumTypes,
		MessageInfos:      file_saacs_common_v0_errors_proto_msgTypes,
	}.Build()
	File_saacs_common_v0_errors_proto = out.File
	file_saacs_common_v0_errors_proto_rawDesc = nil
	file_saacs_common_v0_errors_proto_goTypes = nil
	file_saacs_common_v0_errors_proto_depIdxs = nil
}
