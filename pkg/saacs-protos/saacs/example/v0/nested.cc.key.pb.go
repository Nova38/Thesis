// Code generated by protoc-gen-go-hlf. DO NOT EDIT.
// versions:
// - protoc-gen-cckey v0.0.1
// source: saacs/example/v0/nested.proto

package v0

import (
	v0 "github.com/nova38/saacs/pkg/saacs-protos/saacs/common/v0"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	strings "strings"
)

// ──────────────────────────────────────────────────
// saacs.sample.v0.ItemWithNestedKey
// Primary Item

// Domain Item
func (m *ItemWithNestedKey) SetKey(key *v0.ItemKey) {
	m.SetKeyAttr(key.ItemKeyParts)
	m.CollectionId = key.GetCollectionId()
	return
}

// SetKeyAttr - Sets the key attributes, returns the number of extra attributes
func (m *ItemWithNestedKey) SetKeyAttr(attr []string) int {
	if len(attr) > 0 {
		m.Id = attr[0]
	} else {
		return 0
	}
	return len(attr) - 3
}

func (m *ItemWithNestedKey) ItemKey() *v0.ItemKey {
	key := &v0.ItemKey{
		CollectionId: m.GetCollectionId(),
		ItemKind:     2,
		ItemType:     "saacs.sample.v0.ItemWithNestedKey",
		ItemKeyParts: m.KeyAttr(),
	}
	return key
}

func (m *ItemWithNestedKey) KeyAttr() []string {
	attr := []string{}
	attr = append(attr, m.GetId())
	return attr
}

func (m *ItemWithNestedKey) ItemKind() v0.ItemKind {
	return v0.ItemKind_ITEM_KIND_PRIMARY_ITEM
}

func (m *ItemWithNestedKey) ItemType() string {
	return "saacs.sample.v0.ItemWithNestedKey"
}

func (m *ItemWithNestedKey) KeySchema() *v0.KeySchema {
	return &v0.KeySchema{
		ItemKind: v0.ItemKind_ITEM_KIND_PRIMARY_ITEM,
		Properties: &fieldmaskpb.FieldMask{Paths: []string{
			"id",
			"nested.part1",
			"nested.part2",
		}},
	}
}

// NewFromKey - Creates a new item from a key
func (m *ItemWithNestedKey) NewFromKey(key *v0.ItemKey) *ItemWithNestedKey {
	item := &ItemWithNestedKey{}
	item.SetKey(key)

	return item
}

// StateKey - Returns a composite key for the state
// This follows the same structure as the saacs-cc stub library,
// Main difference is that it doesn't check the key for invalid characters
//
// Example key:= "\u0000auth.Collection\u0000collection0\u0000collection0\u0000"

func (m *ItemWithNestedKey) StateKey() string {

	const sep = string(rune(0))

	attrs := m.ItemKey().GetItemKeyParts()
	if attrs == nil {
		panic("ItemKeyParts is nil")
	}

	collectionId := m.ItemKey().GetCollectionId()
	if collectionId == "" {
		panic("CollectionId is nil")
	}

	if len(attrs) == 0 {
		k := sep + "saacs.sample.v0.ItemWithNestedKey" + sep + collectionId + sep
		return k
	}
	k := sep + "saacs.sample.v0.ItemWithNestedKey" + sep + collectionId + sep + strings.Join(attrs, sep) + sep

	return k
}
