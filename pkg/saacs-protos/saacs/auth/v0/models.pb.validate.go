// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: saacs/auth/v0/models.proto

package v0

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Model with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Model) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Model with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModelMultiError, or nil if none found.
func (m *Model) ValidateAll() error {
	return m.validate(true)
}

func (m *Model) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ModelMultiError(errors)
	}

	return nil
}

// ModelMultiError is an error wrapping multiple validation errors returned by
// Model.ValidateAll() if the designated constraints aren't met.
type ModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelMultiError) AllErrors() []error { return m }

// ModelValidationError is the validation error returned by Model.Validate if
// the designated constraints aren't met.
type ModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelValidationError) ErrorName() string { return "ModelValidationError" }

// Error satisfies the builtin error interface
func (e ModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelValidationError{}

// Validate checks the field values on AuthModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthModelMultiError, or nil
// if none found.
func (m *AuthModel) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	switch v := m.Model.(type) {
	case *AuthModel_Identity:
		if v == nil {
			err := AuthModelValidationError{
				field:  "Model",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthModelValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthModelValidationError{
						field:  "Identity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthModelValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthModel_Roles:
		if v == nil {
			err := AuthModelValidationError{
				field:  "Model",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRoles()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthModelValidationError{
						field:  "Roles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthModelValidationError{
						field:  "Roles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRoles()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthModelValidationError{
					field:  "Roles",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthModel_GlobalRoles:
		if v == nil {
			err := AuthModelValidationError{
				field:  "Model",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGlobalRoles()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthModelValidationError{
						field:  "GlobalRoles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthModelValidationError{
						field:  "GlobalRoles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGlobalRoles()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthModelValidationError{
					field:  "GlobalRoles",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthModel_Attribute:
		if v == nil {
			err := AuthModelValidationError{
				field:  "Model",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAttribute()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthModelValidationError{
						field:  "Attribute",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthModelValidationError{
						field:  "Attribute",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAttribute()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthModelValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AuthModelMultiError(errors)
	}

	return nil
}

// AuthModelMultiError is an error wrapping multiple validation errors returned
// by AuthModel.ValidateAll() if the designated constraints aren't met.
type AuthModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthModelMultiError) AllErrors() []error { return m }

// AuthModelValidationError is the validation error returned by
// AuthModel.Validate if the designated constraints aren't met.
type AuthModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthModelValidationError) ErrorName() string { return "AuthModelValidationError" }

// Error satisfies the builtin error interface
func (e AuthModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthModelValidationError{}

// Validate checks the field values on Model_Identity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Model_Identity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Model_Identity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Model_IdentityMultiError,
// or nil if none found.
func (m *Model_Identity) ValidateAll() error {
	return m.validate(true)
}

func (m *Model_Identity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Model_IdentityValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Model_IdentityValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Model_IdentityValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUserDirectMembership() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Model_IdentityValidationError{
						field:  fmt.Sprintf("UserDirectMembership[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Model_IdentityValidationError{
						field:  fmt.Sprintf("UserDirectMembership[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Model_IdentityValidationError{
					field:  fmt.Sprintf("UserDirectMembership[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Model_IdentityMultiError(errors)
	}

	return nil
}

// Model_IdentityMultiError is an error wrapping multiple validation errors
// returned by Model_Identity.ValidateAll() if the designated constraints
// aren't met.
type Model_IdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Model_IdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Model_IdentityMultiError) AllErrors() []error { return m }

// Model_IdentityValidationError is the validation error returned by
// Model_Identity.Validate if the designated constraints aren't met.
type Model_IdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Model_IdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Model_IdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Model_IdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Model_IdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Model_IdentityValidationError) ErrorName() string { return "Model_IdentityValidationError" }

// Error satisfies the builtin error interface
func (e Model_IdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModel_Identity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Model_IdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Model_IdentityValidationError{}

// Validate checks the field values on Model_Roles with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Model_Roles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Model_Roles with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Model_RolesMultiError, or
// nil if none found.
func (m *Model_Roles) ValidateAll() error {
	return m.validate(true)
}

func (m *Model_Roles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Model_RolesValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Model_RolesValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Model_RolesValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Model_RolesValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Model_RolesValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Model_RolesValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserCollectionRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Model_RolesValidationError{
						field:  fmt.Sprintf("UserCollectionRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Model_RolesValidationError{
						field:  fmt.Sprintf("UserCollectionRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Model_RolesValidationError{
					field:  fmt.Sprintf("UserCollectionRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Model_RolesMultiError(errors)
	}

	return nil
}

// Model_RolesMultiError is an error wrapping multiple validation errors
// returned by Model_Roles.ValidateAll() if the designated constraints aren't met.
type Model_RolesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Model_RolesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Model_RolesMultiError) AllErrors() []error { return m }

// Model_RolesValidationError is the validation error returned by
// Model_Roles.Validate if the designated constraints aren't met.
type Model_RolesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Model_RolesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Model_RolesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Model_RolesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Model_RolesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Model_RolesValidationError) ErrorName() string { return "Model_RolesValidationError" }

// Error satisfies the builtin error interface
func (e Model_RolesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModel_Roles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Model_RolesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Model_RolesValidationError{}

// Validate checks the field values on Model_GlobalRoles with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Model_GlobalRoles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Model_GlobalRoles with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Model_GlobalRolesMultiError, or nil if none found.
func (m *Model_GlobalRoles) ValidateAll() error {
	return m.validate(true)
}

func (m *Model_GlobalRoles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Model_GlobalRolesValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Model_GlobalRolesValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Model_GlobalRolesValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Model_GlobalRolesValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Model_GlobalRolesValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Model_GlobalRolesValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserCollectionRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Model_GlobalRolesValidationError{
						field:  fmt.Sprintf("UserCollectionRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Model_GlobalRolesValidationError{
						field:  fmt.Sprintf("UserCollectionRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Model_GlobalRolesValidationError{
					field:  fmt.Sprintf("UserCollectionRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Model_GlobalRolesMultiError(errors)
	}

	return nil
}

// Model_GlobalRolesMultiError is an error wrapping multiple validation errors
// returned by Model_GlobalRoles.ValidateAll() if the designated constraints
// aren't met.
type Model_GlobalRolesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Model_GlobalRolesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Model_GlobalRolesMultiError) AllErrors() []error { return m }

// Model_GlobalRolesValidationError is the validation error returned by
// Model_GlobalRoles.Validate if the designated constraints aren't met.
type Model_GlobalRolesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Model_GlobalRolesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Model_GlobalRolesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Model_GlobalRolesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Model_GlobalRolesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Model_GlobalRolesValidationError) ErrorName() string {
	return "Model_GlobalRolesValidationError"
}

// Error satisfies the builtin error interface
func (e Model_GlobalRolesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModel_GlobalRoles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Model_GlobalRolesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Model_GlobalRolesValidationError{}

// Validate checks the field values on Model_Attribute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Model_Attribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Model_Attribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Model_AttributeMultiError, or nil if none found.
func (m *Model_Attribute) ValidateAll() error {
	return m.validate(true)
}

func (m *Model_Attribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Model_AttributeValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Model_AttributeValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Model_AttributeValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAttribute() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Model_AttributeValidationError{
						field:  fmt.Sprintf("Attribute[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Model_AttributeValidationError{
						field:  fmt.Sprintf("Attribute[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Model_AttributeValidationError{
					field:  fmt.Sprintf("Attribute[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Model_AttributeMultiError(errors)
	}

	return nil
}

// Model_AttributeMultiError is an error wrapping multiple validation errors
// returned by Model_Attribute.ValidateAll() if the designated constraints
// aren't met.
type Model_AttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Model_AttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Model_AttributeMultiError) AllErrors() []error { return m }

// Model_AttributeValidationError is the validation error returned by
// Model_Attribute.Validate if the designated constraints aren't met.
type Model_AttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Model_AttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Model_AttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Model_AttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Model_AttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Model_AttributeValidationError) ErrorName() string { return "Model_AttributeValidationError" }

// Error satisfies the builtin error interface
func (e Model_AttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModel_Attribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Model_AttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Model_AttributeValidationError{}
