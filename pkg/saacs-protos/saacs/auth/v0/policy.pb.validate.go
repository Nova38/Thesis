// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: saacs/auth/v0/policy.proto

package v0

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v0 "github.com/nova38/saacs/pkg/saacs-protos/saacs/common/v0"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v0.Action(0)
)

// Validate checks the field values on Polices with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Polices) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Polices with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PolicesMultiError, or nil if none found.
func (m *Polices) ValidateAll() error {
	return m.validate(true)
}

func (m *Polices) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetItemPolicies()))
		i := 0
		for key := range m.GetItemPolicies() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetItemPolicies()[key]
			_ = val

			// no validation rules for ItemPolicies[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PolicesValidationError{
							field:  fmt.Sprintf("ItemPolicies[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PolicesValidationError{
							field:  fmt.Sprintf("ItemPolicies[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PolicesValidationError{
						field:  fmt.Sprintf("ItemPolicies[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetDefaultPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicesValidationError{
					field:  "DefaultPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicesValidationError{
					field:  "DefaultPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicesValidationError{
				field:  "DefaultPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicesMultiError(errors)
	}

	return nil
}

// PolicesMultiError is an error wrapping multiple validation errors returned
// by Polices.ValidateAll() if the designated constraints aren't met.
type PolicesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicesMultiError) AllErrors() []error { return m }

// PolicesValidationError is the validation error returned by Polices.Validate
// if the designated constraints aren't met.
type PolicesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicesValidationError) ErrorName() string { return "PolicesValidationError" }

// Error satisfies the builtin error interface
func (e PolicesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolices.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicesValidationError{}

// Validate checks the field values on PathPolicy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PathPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PathPolicy with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PathPolicyMultiError, or
// nil if none found.
func (m *PathPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *PathPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for FullPath

	// no validation rules for AllowSubPaths

	{
		sorted_keys := make([]string, len(m.GetSubPaths()))
		i := 0
		for key := range m.GetSubPaths() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetSubPaths()[key]
			_ = val

			// no validation rules for SubPaths[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PathPolicyValidationError{
							field:  fmt.Sprintf("SubPaths[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PathPolicyValidationError{
							field:  fmt.Sprintf("SubPaths[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PathPolicyValidationError{
						field:  fmt.Sprintf("SubPaths[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PathPolicyMultiError(errors)
	}

	return nil
}

// PathPolicyMultiError is an error wrapping multiple validation errors
// returned by PathPolicy.ValidateAll() if the designated constraints aren't met.
type PathPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PathPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PathPolicyMultiError) AllErrors() []error { return m }

// PathPolicyValidationError is the validation error returned by
// PathPolicy.Validate if the designated constraints aren't met.
type PathPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PathPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PathPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PathPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PathPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PathPolicyValidationError) ErrorName() string { return "PathPolicyValidationError" }

// Error satisfies the builtin error interface
func (e PathPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPathPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PathPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PathPolicyValidationError{}
