// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file auth/v1/models.proto (package auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Polices } from "./auth_pb.js";

/**
 * Identity Auth Object
 *
 * @generated from message auth.UserDirectMembership
 */
export class UserDirectMembership extends Message<UserDirectMembership> {
  /**
   * The collection that the user is a member of
   *
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * The msp of the organization that the user's certificate is from
   *
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * The id of the user from the certificate
   *
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * The Permissions that the user will have
   *
   * @generated from field: auth.Polices polices = 4;
   */
  polices?: Polices;

  /**
   * @generated from field: string note = 6;
   */
  note = "";

  constructor(data?: PartialMessage<UserDirectMembership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.UserDirectMembership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "polices", kind: "message", T: Polices },
    { no: 6, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDirectMembership {
    return new UserDirectMembership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDirectMembership {
    return new UserDirectMembership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDirectMembership {
    return new UserDirectMembership().fromJsonString(jsonString, options);
  }

  static equals(a: UserDirectMembership | PlainMessage<UserDirectMembership> | undefined, b: UserDirectMembership | PlainMessage<UserDirectMembership> | undefined): boolean {
    return proto3.util.equals(UserDirectMembership, a, b);
  }
}

/**
 * Shared Auth Object for Role Based Authentication
 *
 * @generated from message auth.Role
 */
export class Role extends Message<Role> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string role_id = 2;
   */
  roleId = "";

  /**
   * @generated from field: auth.Polices polices = 4;
   */
  polices?: Polices;

  /**
   * @generated from field: string note = 5;
   */
  note = "";

  /**
   * @generated from field: repeated string parent_role_ids = 6;
   */
  parentRoleIds: string[] = [];

  constructor(data?: PartialMessage<Role>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Role";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "polices", kind: "message", T: Polices },
    { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "parent_role_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role {
    return new Role().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJsonString(jsonString, options);
  }

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean {
    return proto3.util.equals(Role, a, b);
  }
}

/**
 * @generated from message auth.RoleIDList
 */
export class RoleIDList extends Message<RoleIDList> {
  /**
   * @generated from field: repeated string role_id = 1;
   */
  roleId: string[] = [];

  constructor(data?: PartialMessage<RoleIDList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.RoleIDList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleIDList {
    return new RoleIDList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleIDList {
    return new RoleIDList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleIDList {
    return new RoleIDList().fromJsonString(jsonString, options);
  }

  static equals(a: RoleIDList | PlainMessage<RoleIDList> | undefined, b: RoleIDList | PlainMessage<RoleIDList> | undefined): boolean {
    return proto3.util.equals(RoleIDList, a, b);
  }
}

/**
 * Auth Object For RBAC
 *
 * @generated from message auth.UserCollectionRoles
 */
export class UserCollectionRoles extends Message<UserCollectionRoles> {
  /**
   * The collection that the user is a member of
   *
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * The msp of the organization that the user's certificate is from
   *
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * The id of the user from the certificate
   *
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * The roles that the user has in the collection
   *
   * @generated from field: repeated string role_ids = 4;
   */
  roleIds: string[] = [];

  /**
   * @generated from field: string note = 6;
   */
  note = "";

  constructor(data?: PartialMessage<UserCollectionRoles>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.UserCollectionRoles";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserCollectionRoles {
    return new UserCollectionRoles().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserCollectionRoles {
    return new UserCollectionRoles().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserCollectionRoles {
    return new UserCollectionRoles().fromJsonString(jsonString, options);
  }

  static equals(a: UserCollectionRoles | PlainMessage<UserCollectionRoles> | undefined, b: UserCollectionRoles | PlainMessage<UserCollectionRoles> | undefined): boolean {
    return proto3.util.equals(UserCollectionRoles, a, b);
  }
}

/**
 * Auth Object For Embedded RBAC
 *
 * @generated from message auth.UserEmbeddedRoles
 */
export class UserEmbeddedRoles extends Message<UserEmbeddedRoles> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * The msp of the organization that the user's certificate is from
   *
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * The id of the user from the certificate
   *
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * The roles that the user has in the collection
   * key is the collection id
   * value is the list of rolesIds
   *
   * @generated from field: map<string, auth.RoleIDList> roles = 4;
   */
  roles: { [key: string]: RoleIDList } = {};

  constructor(data?: PartialMessage<UserEmbeddedRoles>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.UserEmbeddedRoles";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "roles", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: RoleIDList} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserEmbeddedRoles {
    return new UserEmbeddedRoles().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserEmbeddedRoles {
    return new UserEmbeddedRoles().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserEmbeddedRoles {
    return new UserEmbeddedRoles().fromJsonString(jsonString, options);
  }

  static equals(a: UserEmbeddedRoles | PlainMessage<UserEmbeddedRoles> | undefined, b: UserEmbeddedRoles | PlainMessage<UserEmbeddedRoles> | undefined): boolean {
    return proto3.util.equals(UserEmbeddedRoles, a, b);
  }
}

/**
 * ─────────────────────────────────────────────────────────────────────────────────
 * An attribute is used to define permissions via the value of the attribute in the
 * users certificate for a given msp
 *
 * @generated from message auth.Attribute
 */
export class Attribute extends Message<Attribute> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * The msp of the organization that this attribute applies to
   *
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * The oid of the attribute
   *
   * @generated from field: string oid = 3;
   */
  oid = "";

  /**
   * The value of the attribute required to be satisfied by the user to have the
   * role
   *
   * @generated from field: string value = 4;
   */
  value = "";

  /**
   * The Permission that the user will have if they have the attribute
   *
   * @generated from field: auth.Polices polices = 5;
   */
  polices?: Polices;

  constructor(data?: PartialMessage<Attribute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Attribute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "oid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "polices", kind: "message", T: Polices },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attribute {
    return new Attribute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attribute {
    return new Attribute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attribute {
    return new Attribute().fromJsonString(jsonString, options);
  }

  static equals(a: Attribute | PlainMessage<Attribute> | undefined, b: Attribute | PlainMessage<Attribute> | undefined): boolean {
    return proto3.util.equals(Attribute, a, b);
  }
}

