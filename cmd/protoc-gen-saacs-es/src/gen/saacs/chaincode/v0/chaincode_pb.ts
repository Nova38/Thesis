// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file saacs/chaincode/v0/chaincode.proto (package saacs.chaincode.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { Item, ItemKey } from "../../common/v0/item_pb.js";
import { HiddenOptions, HiddenTx, HiddenTxList, History, HistoryOptions } from "../../common/v0/history_pb.js";
import { Suggestion } from "../../common/v0/suggestion_pb.js";
import { Pagination } from "../../common/v0/packing_pb.js";

/**
 * Get
 *
 * @generated from message saacs.chaincode.v0.GetRequest
 */
export class GetRequest extends Message<GetRequest> {
  /**
   *  saacs.common.v0.Item item = 3;
   *
   * @generated from field: saacs.common.v0.ItemKey key = 1;
   */
  key?: ItemKey;

  constructor(data?: PartialMessage<GetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.GetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequest {
    return new GetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequest {
    return new GetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequest {
    return new GetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRequest | PlainMessage<GetRequest> | undefined, b: GetRequest | PlainMessage<GetRequest> | undefined): boolean {
    return proto3.util.equals(GetRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.GetResponse
 */
export class GetResponse extends Message<GetResponse> {
  /**
   * @generated from field: saacs.common.v0.Item item = 1;
   */
  item?: Item;

  constructor(data?: PartialMessage<GetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.GetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResponse {
    return new GetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResponse {
    return new GetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResponse {
    return new GetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetResponse | PlainMessage<GetResponse> | undefined, b: GetResponse | PlainMessage<GetResponse> | undefined): boolean {
    return proto3.util.equals(GetResponse, a, b);
  }
}

/**
 * Get
 *
 * @generated from message saacs.chaincode.v0.GetFullRequest
 */
export class GetFullRequest extends Message<GetFullRequest> {
  /**
   *  saacs.common.v0.Item item = 3;
   *
   * @generated from field: saacs.common.v0.ItemKey key = 1;
   */
  key?: ItemKey;

  /**
   * @generated from field: saacs.common.v0.HistoryOptions history_options = 2;
   */
  historyOptions?: HistoryOptions;

  /**
   * @generated from field: bool include_suggestions = 3;
   */
  includeSuggestions = false;

  constructor(data?: PartialMessage<GetFullRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.GetFullRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "history_options", kind: "message", T: HistoryOptions },
    { no: 3, name: "include_suggestions", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFullRequest {
    return new GetFullRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFullRequest {
    return new GetFullRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFullRequest {
    return new GetFullRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFullRequest | PlainMessage<GetFullRequest> | undefined, b: GetFullRequest | PlainMessage<GetFullRequest> | undefined): boolean {
    return proto3.util.equals(GetFullRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.GetFullResponse
 */
export class GetFullResponse extends Message<GetFullResponse> {
  /**
   * @generated from field: saacs.common.v0.Item item = 1;
   */
  item?: Item;

  /**
   * @generated from field: saacs.common.v0.History history = 2;
   */
  history?: History;

  /**
   * @generated from field: repeated saacs.common.v0.Suggestion suggestions = 3;
   */
  suggestions: Suggestion[] = [];

  constructor(data?: PartialMessage<GetFullResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.GetFullResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Item },
    { no: 2, name: "history", kind: "message", T: History },
    { no: 3, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFullResponse {
    return new GetFullResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFullResponse {
    return new GetFullResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFullResponse {
    return new GetFullResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFullResponse | PlainMessage<GetFullResponse> | undefined, b: GetFullResponse | PlainMessage<GetFullResponse> | undefined): boolean {
    return proto3.util.equals(GetFullResponse, a, b);
  }
}

/**
 * List of a type
 *
 * @generated from message saacs.chaincode.v0.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey key = 1;
   */
  key?: ItemKey;

  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * @generated from field: repeated saacs.common.v0.Item items = 1;
   */
  items: Item[] = [];

  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Item, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.ListByAttrsRequest
 */
export class ListByAttrsRequest extends Message<ListByAttrsRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey key = 1;
   */
  key?: ItemKey;

  /**
   * @generated from field: int32 num_attrs = 2;
   */
  numAttrs = 0;

  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListByAttrsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.ListByAttrsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "num_attrs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListByAttrsRequest {
    return new ListByAttrsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListByAttrsRequest {
    return new ListByAttrsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListByAttrsRequest {
    return new ListByAttrsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListByAttrsRequest | PlainMessage<ListByAttrsRequest> | undefined, b: ListByAttrsRequest | PlainMessage<ListByAttrsRequest> | undefined): boolean {
    return proto3.util.equals(ListByAttrsRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.ListByAttrsResponse
 */
export class ListByAttrsResponse extends Message<ListByAttrsResponse> {
  /**
   * @generated from field: repeated saacs.common.v0.Item items = 1;
   */
  items: Item[] = [];

  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListByAttrsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.ListByAttrsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Item, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListByAttrsResponse {
    return new ListByAttrsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListByAttrsResponse {
    return new ListByAttrsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListByAttrsResponse {
    return new ListByAttrsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListByAttrsResponse | PlainMessage<ListByAttrsResponse> | undefined, b: ListByAttrsResponse | PlainMessage<ListByAttrsResponse> | undefined): boolean {
    return proto3.util.equals(ListByAttrsResponse, a, b);
  }
}

/**
 * ──────────────────────────────── Invoke
 * ─────────────────────────────────────── Create
 *
 * @generated from message saacs.chaincode.v0.CreateRequest
 */
export class CreateRequest extends Message<CreateRequest> {
  /**
   * @generated from field: saacs.common.v0.Item item = 1;
   */
  item?: Item;

  constructor(data?: PartialMessage<CreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.CreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRequest {
    return new CreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRequest | PlainMessage<CreateRequest> | undefined, b: CreateRequest | PlainMessage<CreateRequest> | undefined): boolean {
    return proto3.util.equals(CreateRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.CreateResponse
 */
export class CreateResponse extends Message<CreateResponse> {
  /**
   * @generated from field: saacs.common.v0.Item item = 1;
   */
  item?: Item;

  constructor(data?: PartialMessage<CreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.CreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateResponse {
    return new CreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateResponse | PlainMessage<CreateResponse> | undefined, b: CreateResponse | PlainMessage<CreateResponse> | undefined): boolean {
    return proto3.util.equals(CreateResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.BatchCreateRequest
 */
export class BatchCreateRequest extends Message<BatchCreateRequest> {
  /**
   * @generated from field: repeated saacs.common.v0.Item items = 1;
   */
  items: Item[] = [];

  constructor(data?: PartialMessage<BatchCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.BatchCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateRequest {
    return new BatchCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateRequest {
    return new BatchCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateRequest {
    return new BatchCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateRequest | PlainMessage<BatchCreateRequest> | undefined, b: BatchCreateRequest | PlainMessage<BatchCreateRequest> | undefined): boolean {
    return proto3.util.equals(BatchCreateRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.BatchCreateResponse
 */
export class BatchCreateResponse extends Message<BatchCreateResponse> {
  /**
   * @generated from field: repeated saacs.common.v0.Item items = 1;
   */
  items: Item[] = [];

  constructor(data?: PartialMessage<BatchCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.BatchCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateResponse {
    return new BatchCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateResponse {
    return new BatchCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateResponse {
    return new BatchCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateResponse | PlainMessage<BatchCreateResponse> | undefined, b: BatchCreateResponse | PlainMessage<BatchCreateResponse> | undefined): boolean {
    return proto3.util.equals(BatchCreateResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.UpdateRequest
 */
export class UpdateRequest extends Message<UpdateRequest> {
  /**
   * @generated from field: saacs.common.v0.Item item = 1;
   */
  item?: Item;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.UpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Item },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRequest {
    return new UpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRequest | PlainMessage<UpdateRequest> | undefined, b: UpdateRequest | PlainMessage<UpdateRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.UpdateResponse
 */
export class UpdateResponse extends Message<UpdateResponse> {
  /**
   * @generated from field: saacs.common.v0.Item item = 21;
   */
  item?: Item;

  constructor(data?: PartialMessage<UpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.UpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 21, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResponse {
    return new UpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResponse | PlainMessage<UpdateResponse> | undefined, b: UpdateResponse | PlainMessage<UpdateResponse> | undefined): boolean {
    return proto3.util.equals(UpdateResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.DeleteRequest
 */
export class DeleteRequest extends Message<DeleteRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey key = 1;
   */
  key?: ItemKey;

  /**
   * @generated from field: string reason = 2;
   */
  reason = "";

  constructor(data?: PartialMessage<DeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.DeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRequest {
    return new DeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRequest | PlainMessage<DeleteRequest> | undefined, b: DeleteRequest | PlainMessage<DeleteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.DeleteResponse
 */
export class DeleteResponse extends Message<DeleteResponse> {
  /**
   * @generated from field: saacs.common.v0.Item item = 3;
   */
  item?: Item;

  constructor(data?: PartialMessage<DeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.DeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteResponse {
    return new DeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteResponse | PlainMessage<DeleteResponse> | undefined, b: DeleteResponse | PlainMessage<DeleteResponse> | undefined): boolean {
    return proto3.util.equals(DeleteResponse, a, b);
  }
}

/**
 * GetHistory
 *
 * @generated from message saacs.chaincode.v0.GetHistoryRequest
 */
export class GetHistoryRequest extends Message<GetHistoryRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey key = 1;
   */
  key?: ItemKey;

  /**
   * @generated from field: saacs.common.v0.HiddenOptions history_options = 2;
   */
  historyOptions?: HiddenOptions;

  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<GetHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.GetHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "history_options", kind: "message", T: HiddenOptions },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHistoryRequest {
    return new GetHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHistoryRequest {
    return new GetHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHistoryRequest {
    return new GetHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetHistoryRequest | PlainMessage<GetHistoryRequest> | undefined, b: GetHistoryRequest | PlainMessage<GetHistoryRequest> | undefined): boolean {
    return proto3.util.equals(GetHistoryRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.GetHistoryResponse
 */
export class GetHistoryResponse extends Message<GetHistoryResponse> {
  /**
   * @generated from field: saacs.common.v0.ItemKey key = 1;
   */
  key?: ItemKey;

  /**
   * @generated from field: saacs.common.v0.History history = 2;
   */
  history?: History;

  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<GetHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.GetHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "history", kind: "message", T: History },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHistoryResponse {
    return new GetHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHistoryResponse {
    return new GetHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHistoryResponse {
    return new GetHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetHistoryResponse | PlainMessage<GetHistoryResponse> | undefined, b: GetHistoryResponse | PlainMessage<GetHistoryResponse> | undefined): boolean {
    return proto3.util.equals(GetHistoryResponse, a, b);
  }
}

/**
 * GetHiddenTx
 *
 * @generated from message saacs.chaincode.v0.GetHiddenTxRequest
 */
export class GetHiddenTxRequest extends Message<GetHiddenTxRequest> {
  /**
   * @generated from field: saacs.common.v0.Item item = 1;
   */
  item?: Item;

  /**
   * @generated from field: repeated string msp_ids = 2;
   */
  mspIds: string[] = [];

  constructor(data?: PartialMessage<GetHiddenTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.GetHiddenTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Item },
    { no: 2, name: "msp_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHiddenTxRequest {
    return new GetHiddenTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHiddenTxRequest {
    return new GetHiddenTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHiddenTxRequest {
    return new GetHiddenTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetHiddenTxRequest | PlainMessage<GetHiddenTxRequest> | undefined, b: GetHiddenTxRequest | PlainMessage<GetHiddenTxRequest> | undefined): boolean {
    return proto3.util.equals(GetHiddenTxRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.GetHiddenTxResponse
 */
export class GetHiddenTxResponse extends Message<GetHiddenTxResponse> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: repeated saacs.common.v0.HiddenTx hidden_txs = 2;
   */
  hiddenTxs: HiddenTx[] = [];

  constructor(data?: PartialMessage<GetHiddenTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.GetHiddenTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hidden_txs", kind: "message", T: HiddenTx, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHiddenTxResponse {
    return new GetHiddenTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHiddenTxResponse {
    return new GetHiddenTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHiddenTxResponse {
    return new GetHiddenTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetHiddenTxResponse | PlainMessage<GetHiddenTxResponse> | undefined, b: GetHiddenTxResponse | PlainMessage<GetHiddenTxResponse> | undefined): boolean {
    return proto3.util.equals(GetHiddenTxResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.HideTxRequest
 */
export class HideTxRequest extends Message<HideTxRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey key = 1;
   */
  key?: ItemKey;

  /**
   * @generated from field: saacs.common.v0.HiddenTx hidden_tx = 2;
   */
  hiddenTx?: HiddenTx;

  /**
   * @generated from field: bool for_msp = 3;
   */
  forMsp = false;

  constructor(data?: PartialMessage<HideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.HideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "hidden_tx", kind: "message", T: HiddenTx },
    { no: 3, name: "for_msp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HideTxRequest {
    return new HideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HideTxRequest {
    return new HideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HideTxRequest {
    return new HideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HideTxRequest | PlainMessage<HideTxRequest> | undefined, b: HideTxRequest | PlainMessage<HideTxRequest> | undefined): boolean {
    return proto3.util.equals(HideTxRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.HideTxResponse
 */
export class HideTxResponse extends Message<HideTxResponse> {
  /**
   * @generated from field: saacs.common.v0.ItemKey key = 1;
   */
  key?: ItemKey;

  /**
   * @generated from field: saacs.common.v0.HiddenTxList hidden_txs = 2;
   */
  hiddenTxs?: HiddenTxList;

  /**
   * @generated from field: bool for_msp = 3;
   */
  forMsp = false;

  constructor(data?: PartialMessage<HideTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.HideTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "hidden_txs", kind: "message", T: HiddenTxList },
    { no: 3, name: "for_msp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HideTxResponse {
    return new HideTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HideTxResponse {
    return new HideTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HideTxResponse {
    return new HideTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HideTxResponse | PlainMessage<HideTxResponse> | undefined, b: HideTxResponse | PlainMessage<HideTxResponse> | undefined): boolean {
    return proto3.util.equals(HideTxResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.UnHideTxRequest
 */
export class UnHideTxRequest extends Message<UnHideTxRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey key = 3;
   */
  key?: ItemKey;

  /**
   * @generated from field: bool for_msp = 1;
   */
  forMsp = false;

  /**
   * @generated from field: string tx_id = 2;
   */
  txId = "";

  constructor(data?: PartialMessage<UnHideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.UnHideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "key", kind: "message", T: ItemKey },
    { no: 1, name: "for_msp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnHideTxRequest {
    return new UnHideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnHideTxRequest {
    return new UnHideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnHideTxRequest {
    return new UnHideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnHideTxRequest | PlainMessage<UnHideTxRequest> | undefined, b: UnHideTxRequest | PlainMessage<UnHideTxRequest> | undefined): boolean {
    return proto3.util.equals(UnHideTxRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.UnHideTxResponse
 */
export class UnHideTxResponse extends Message<UnHideTxResponse> {
  /**
   * @generated from field: saacs.common.v0.ItemKey key = 1;
   */
  key?: ItemKey;

  /**
   * @generated from field: saacs.common.v0.HiddenTxList hidden_txs = 2;
   */
  hiddenTxs?: HiddenTxList;

  /**
   * @generated from field: bool for_msp = 3;
   */
  forMsp = false;

  constructor(data?: PartialMessage<UnHideTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.UnHideTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "hidden_txs", kind: "message", T: HiddenTxList },
    { no: 3, name: "for_msp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnHideTxResponse {
    return new UnHideTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnHideTxResponse {
    return new UnHideTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnHideTxResponse {
    return new UnHideTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnHideTxResponse | PlainMessage<UnHideTxResponse> | undefined, b: UnHideTxResponse | PlainMessage<UnHideTxResponse> | undefined): boolean {
    return proto3.util.equals(UnHideTxResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.GetSuggestionRequest
 */
export class GetSuggestionRequest extends Message<GetSuggestionRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey item_key = 1;
   */
  itemKey?: ItemKey;

  /**
   * @generated from field: string suggestion_id = 2;
   */
  suggestionId = "";

  constructor(data?: PartialMessage<GetSuggestionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.GetSuggestionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_key", kind: "message", T: ItemKey },
    { no: 2, name: "suggestion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestionRequest {
    return new GetSuggestionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestionRequest {
    return new GetSuggestionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestionRequest {
    return new GetSuggestionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestionRequest | PlainMessage<GetSuggestionRequest> | undefined, b: GetSuggestionRequest | PlainMessage<GetSuggestionRequest> | undefined): boolean {
    return proto3.util.equals(GetSuggestionRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.GetSuggestionResponse
 */
export class GetSuggestionResponse extends Message<GetSuggestionResponse> {
  /**
   * @generated from field: saacs.common.v0.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<GetSuggestionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.GetSuggestionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestionResponse {
    return new GetSuggestionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestionResponse {
    return new GetSuggestionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestionResponse {
    return new GetSuggestionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestionResponse | PlainMessage<GetSuggestionResponse> | undefined, b: GetSuggestionResponse | PlainMessage<GetSuggestionResponse> | undefined): boolean {
    return proto3.util.equals(GetSuggestionResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionListRequest
 */
export class SuggestionListRequest extends Message<SuggestionListRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey key = 1;
   */
  key?: ItemKey;

  /**
   * saacs.common.v0.Item item = 3;
   *
   * @generated from field: saacs.common.v0.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<SuggestionListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListRequest {
    return new SuggestionListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListRequest {
    return new SuggestionListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListRequest {
    return new SuggestionListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListRequest | PlainMessage<SuggestionListRequest> | undefined, b: SuggestionListRequest | PlainMessage<SuggestionListRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionListRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionListResponse
 */
export class SuggestionListResponse extends Message<SuggestionListResponse> {
  /**
   * @generated from field: repeated saacs.common.v0.Suggestion suggestions = 1;
   */
  suggestions: Suggestion[] = [];

  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<SuggestionListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListResponse {
    return new SuggestionListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListResponse {
    return new SuggestionListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListResponse {
    return new SuggestionListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListResponse | PlainMessage<SuggestionListResponse> | undefined, b: SuggestionListResponse | PlainMessage<SuggestionListResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionListResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionListByCollectionRequest
 */
export class SuggestionListByCollectionRequest extends Message<SuggestionListByCollectionRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<SuggestionListByCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionListByCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListByCollectionRequest {
    return new SuggestionListByCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListByCollectionRequest {
    return new SuggestionListByCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListByCollectionRequest {
    return new SuggestionListByCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListByCollectionRequest | PlainMessage<SuggestionListByCollectionRequest> | undefined, b: SuggestionListByCollectionRequest | PlainMessage<SuggestionListByCollectionRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionListByCollectionRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionListByCollectionResponse
 */
export class SuggestionListByCollectionResponse extends Message<SuggestionListByCollectionResponse> {
  /**
   * @generated from field: repeated saacs.common.v0.Suggestion suggestions = 1;
   */
  suggestions: Suggestion[] = [];

  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<SuggestionListByCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionListByCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListByCollectionResponse {
    return new SuggestionListByCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListByCollectionResponse {
    return new SuggestionListByCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListByCollectionResponse {
    return new SuggestionListByCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListByCollectionResponse | PlainMessage<SuggestionListByCollectionResponse> | undefined, b: SuggestionListByCollectionResponse | PlainMessage<SuggestionListByCollectionResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionListByCollectionResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionListByItemRequest
 */
export class SuggestionListByItemRequest extends Message<SuggestionListByItemRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey item_key = 1;
   */
  itemKey?: ItemKey;

  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<SuggestionListByItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionListByItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_key", kind: "message", T: ItemKey },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListByItemRequest {
    return new SuggestionListByItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListByItemRequest {
    return new SuggestionListByItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListByItemRequest {
    return new SuggestionListByItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListByItemRequest | PlainMessage<SuggestionListByItemRequest> | undefined, b: SuggestionListByItemRequest | PlainMessage<SuggestionListByItemRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionListByItemRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionListByItemResponse
 */
export class SuggestionListByItemResponse extends Message<SuggestionListByItemResponse> {
  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 1;
   */
  pagination?: Pagination;

  /**
   * @generated from field: repeated saacs.common.v0.Suggestion suggestions = 2;
   */
  suggestions: Suggestion[] = [];

  constructor(data?: PartialMessage<SuggestionListByItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionListByItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: Pagination },
    { no: 2, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListByItemResponse {
    return new SuggestionListByItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListByItemResponse {
    return new SuggestionListByItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListByItemResponse {
    return new SuggestionListByItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListByItemResponse | PlainMessage<SuggestionListByItemResponse> | undefined, b: SuggestionListByItemResponse | PlainMessage<SuggestionListByItemResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionListByItemResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionByPartialKeyRequest
 */
export class SuggestionByPartialKeyRequest extends Message<SuggestionByPartialKeyRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey item_key = 1;
   */
  itemKey?: ItemKey;

  /**
   * @generated from field: int32 num_attrs = 2;
   */
  numAttrs = 0;

  /**
   * @generated from field: string suggestion_id = 3;
   */
  suggestionId = "";

  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<SuggestionByPartialKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionByPartialKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_key", kind: "message", T: ItemKey },
    { no: 2, name: "num_attrs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "suggestion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionByPartialKeyRequest {
    return new SuggestionByPartialKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionByPartialKeyRequest {
    return new SuggestionByPartialKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionByPartialKeyRequest {
    return new SuggestionByPartialKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionByPartialKeyRequest | PlainMessage<SuggestionByPartialKeyRequest> | undefined, b: SuggestionByPartialKeyRequest | PlainMessage<SuggestionByPartialKeyRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionByPartialKeyRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionByPartialKeyResponse
 */
export class SuggestionByPartialKeyResponse extends Message<SuggestionByPartialKeyResponse> {
  /**
   * @generated from field: saacs.common.v0.Pagination pagination = 1;
   */
  pagination?: Pagination;

  /**
   * @generated from field: repeated saacs.common.v0.Suggestion suggestions = 2;
   */
  suggestions: Suggestion[] = [];

  constructor(data?: PartialMessage<SuggestionByPartialKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionByPartialKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: Pagination },
    { no: 2, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionByPartialKeyResponse {
    return new SuggestionByPartialKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionByPartialKeyResponse {
    return new SuggestionByPartialKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionByPartialKeyResponse {
    return new SuggestionByPartialKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionByPartialKeyResponse | PlainMessage<SuggestionByPartialKeyResponse> | undefined, b: SuggestionByPartialKeyResponse | PlainMessage<SuggestionByPartialKeyResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionByPartialKeyResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionCreateRequest
 */
export class SuggestionCreateRequest extends Message<SuggestionCreateRequest> {
  /**
   * @generated from field: saacs.common.v0.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<SuggestionCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionCreateRequest {
    return new SuggestionCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionCreateRequest {
    return new SuggestionCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionCreateRequest {
    return new SuggestionCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionCreateRequest | PlainMessage<SuggestionCreateRequest> | undefined, b: SuggestionCreateRequest | PlainMessage<SuggestionCreateRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionCreateRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionCreateResponse
 */
export class SuggestionCreateResponse extends Message<SuggestionCreateResponse> {
  /**
   * @generated from field: saacs.common.v0.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<SuggestionCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionCreateResponse {
    return new SuggestionCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionCreateResponse {
    return new SuggestionCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionCreateResponse {
    return new SuggestionCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionCreateResponse | PlainMessage<SuggestionCreateResponse> | undefined, b: SuggestionCreateResponse | PlainMessage<SuggestionCreateResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionCreateResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionDeleteRequest
 */
export class SuggestionDeleteRequest extends Message<SuggestionDeleteRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey item_key = 1;
   */
  itemKey?: ItemKey;

  /**
   * @generated from field: string suggestion_id = 2;
   */
  suggestionId = "";

  /**
   * @generated from field: string reason = 3;
   */
  reason = "";

  constructor(data?: PartialMessage<SuggestionDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_key", kind: "message", T: ItemKey },
    { no: 2, name: "suggestion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionDeleteRequest {
    return new SuggestionDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionDeleteRequest {
    return new SuggestionDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionDeleteRequest {
    return new SuggestionDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionDeleteRequest | PlainMessage<SuggestionDeleteRequest> | undefined, b: SuggestionDeleteRequest | PlainMessage<SuggestionDeleteRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionDeleteRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionDeleteResponse
 */
export class SuggestionDeleteResponse extends Message<SuggestionDeleteResponse> {
  /**
   * @generated from field: saacs.common.v0.Suggestion suggestion = 4;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<SuggestionDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionDeleteResponse {
    return new SuggestionDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionDeleteResponse {
    return new SuggestionDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionDeleteResponse {
    return new SuggestionDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionDeleteResponse | PlainMessage<SuggestionDeleteResponse> | undefined, b: SuggestionDeleteResponse | PlainMessage<SuggestionDeleteResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionDeleteResponse, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionApproveRequest
 */
export class SuggestionApproveRequest extends Message<SuggestionApproveRequest> {
  /**
   * @generated from field: saacs.common.v0.ItemKey item_key = 1;
   */
  itemKey?: ItemKey;

  /**
   * @generated from field: string suggestion_id = 2;
   */
  suggestionId = "";

  /**
   * @generated from field: string reason = 3;
   */
  reason = "";

  constructor(data?: PartialMessage<SuggestionApproveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionApproveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_key", kind: "message", T: ItemKey },
    { no: 2, name: "suggestion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionApproveRequest {
    return new SuggestionApproveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionApproveRequest {
    return new SuggestionApproveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionApproveRequest {
    return new SuggestionApproveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionApproveRequest | PlainMessage<SuggestionApproveRequest> | undefined, b: SuggestionApproveRequest | PlainMessage<SuggestionApproveRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionApproveRequest, a, b);
  }
}

/**
 * @generated from message saacs.chaincode.v0.SuggestionApproveResponse
 */
export class SuggestionApproveResponse extends Message<SuggestionApproveResponse> {
  /**
   * @generated from field: saacs.common.v0.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  /**
   * @generated from field: saacs.common.v0.Item item = 2;
   */
  item?: Item;

  constructor(data?: PartialMessage<SuggestionApproveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.chaincode.v0.SuggestionApproveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
    { no: 2, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionApproveResponse {
    return new SuggestionApproveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionApproveResponse {
    return new SuggestionApproveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionApproveResponse {
    return new SuggestionApproveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionApproveResponse | PlainMessage<SuggestionApproveResponse> | undefined, b: SuggestionApproveResponse | PlainMessage<SuggestionApproveResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionApproveResponse, a, b);
  }
}
