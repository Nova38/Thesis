{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/ReferenceResponse",
    "definitions": {
        "ReferenceResponse": {
            "properties": {
                "exists": {
                    "type": "boolean"
                },
                "reference": {
                    "$ref": "#/definitions/auth.Reference",
                    "additionalProperties": true
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Reference Response"
        },
        "auth.Item": {
            "properties": {
                "key": {
                    "$ref": "#/definitions/auth.ItemKey",
                    "additionalProperties": true
                },
                "value": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "═════════════════════════════════════════════════════════════════════════════\n Collection Item Wrapper Types\n ═════════════════════════════════════════════════════════════════════════════",
            "description": "═════════════════════════════════════════════════════════════════════════════ Collection Item Wrapper Types ═════════════════════════════════════════════════════════════════════════════"
        },
        "auth.ItemKey": {
            "properties": {
                "collection_id": {
                    "type": "string"
                },
                "item_type": {
                    "type": "string"
                },
                "item_id_parts": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
            "description": "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  Keys─────────────────────────────────────────────────────────────────────────────────────Item KeysWhen converted to its string form it will be:- Key := {ITEM_TYPE}{COLLECTION_ID}{...ITEM_ID}Reference KeysUsed to store references to items for case like a user having a roleWhen converted to its string form it will be:{Ref}{REFERENCE_TYPE}{COLLECTION_ID}[{ITEM1_TYPE}{...ITEM1_ID}][{ITEM2_TYPE}{...ITEM2_ID}]SubKeysWhen converted to its string form it will be:{SUB_ITEM_TYPE}{COLLECTION_ID}{ITEM_TYPE}{...ITEM_ID}{SUB_ITEM_ID}Examples- Suggestion := {auth.Suggestion}  {COLLECTION_ID}{ITEM_TYPE}{...ITEM_ID}{SUGGESTION_ID}- HiddenTxList := {auth.HiddenTxList}{COLLECTION_ID}{ITEM_TYPE} {...ITEM_ID}"
        },
        "auth.Reference": {
            "properties": {
                "reference": {
                    "$ref": "#/definitions/auth.ReferenceKey",
                    "additionalProperties": true
                },
                "item1": {
                    "$ref": "#/definitions/auth.Item",
                    "additionalProperties": true
                },
                "item2": {
                    "$ref": "#/definitions/auth.Item",
                    "additionalProperties": true
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Reference",
            "description": "Used to return the values of the items that are referenced"
        },
        "auth.ReferenceKey": {
            "properties": {
                "key1": {
                    "$ref": "#/definitions/auth.ItemKey",
                    "additionalProperties": true,
                    "description": "string reference_type = 2;"
                },
                "key2": {
                    "$ref": "#/definitions/auth.ItemKey",
                    "additionalProperties": true
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Reference Key",
            "description": "Reference Keys {auth.Reference}{REFERENCE_TYPE}{COLLECTION_ID}[{ITEM1_TYPE}{...ITEM1_ID}][{ITEM2_TYPE}{...ITEM2_ID}]"
        }
    }
}