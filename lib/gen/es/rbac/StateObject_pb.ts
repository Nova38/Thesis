// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file rbac/StateObject.proto (package stateObjects, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { DescriptorProto, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum stateObjects.TransactionType
 */
export enum TransactionType {
  /**
   * @generated from enum value: INVOKE = 0;
   */
  INVOKE = 0,

  /**
   * @generated from enum value: QUERY = 1;
   */
  QUERY = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(TransactionType)
proto3.util.setEnumType(TransactionType, "stateObjects.TransactionType", [
  { no: 0, name: "INVOKE" },
  { no: 1, name: "QUERY" },
]);

/**
 * @generated from message stateObjects.Collection
 */
export class Collection extends Message<Collection> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string object_namespace = 2;
   */
  objectNamespace = "";

  /**
   * protobuf message descriptor
   *
   * @generated from field: google.protobuf.DescriptorProto object_descriptor = 3;
   */
  objectDescriptor?: DescriptorProto;

  /**
   * Declared Roles
   *
   * @generated from field: map<int32, string> roles = 4;
   */
  roles: { [key: number]: string } = {};

  /**
   * Keys must be valid role ids defined in the roles map
   *
   * @generated from field: map<int32, stateObjects.Collection.Operations.Membership> acl_role_permissions = 5;
   */
  aclRolePermissions: { [key: number]: Collection_Operations_Membership } = {};

  /**
   * @generated from field: map<int32, stateObjects.Collection.Operations.Membership> acl_memberships = 6;
   */
  aclMemberships: { [key: number]: Collection_Operations_Membership } = {};

  /**
   * @generated from field: map<int32, stateObjects.Collection.Operations.Object> acl_object = 7;
   */
  aclObject: { [key: number]: Collection_Operations_Object } = {};

  /**
   * ObjectField Permissions
   * The Key must be a valid path for a field mask
   *
   * @generated from field: map<string, stateObjects.Collection.Operations.ObjectField> acl_object_field = 8;
   */
  aclObjectField: { [key: string]: Collection_Operations_ObjectField } = {};

  constructor(data?: PartialMessage<Collection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stateObjects.Collection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "object_descriptor", kind: "message", T: DescriptorProto },
    { no: 4, name: "roles", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "acl_role_permissions", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: Collection_Operations_Membership} },
    { no: 6, name: "acl_memberships", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: Collection_Operations_Membership} },
    { no: 7, name: "acl_object", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: Collection_Operations_Object} },
    { no: 8, name: "acl_object_field", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Collection_Operations_ObjectField} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection {
    return new Collection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection {
    return new Collection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection {
    return new Collection().fromJsonString(jsonString, options);
  }

  static equals(a: Collection | PlainMessage<Collection> | undefined, b: Collection | PlainMessage<Collection> | undefined): boolean {
    return proto3.util.equals(Collection, a, b);
  }
}

/**
 * @generated from message stateObjects.Collection.Operations
 */
export class Collection_Operations extends Message<Collection_Operations> {
  constructor(data?: PartialMessage<Collection_Operations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stateObjects.Collection.Operations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection_Operations {
    return new Collection_Operations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection_Operations {
    return new Collection_Operations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection_Operations {
    return new Collection_Operations().fromJsonString(jsonString, options);
  }

  static equals(a: Collection_Operations | PlainMessage<Collection_Operations> | undefined, b: Collection_Operations | PlainMessage<Collection_Operations> | undefined): boolean {
    return proto3.util.equals(Collection_Operations, a, b);
  }
}

/**
 * @generated from enum stateObjects.Collection.Operations.Level
 */
export enum Collection_Operations_Level {
  /**
   * @generated from enum value: LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LEVEL_VIEW = 1;
   */
  VIEW = 1,

  /**
   * @generated from enum value: LEVEL_EDIT = 2;
   */
  EDIT = 2,

  /**
   * @generated from enum value: LEVEL_SUGGEST_EDIT = 3;
   */
  SUGGEST_EDIT = 3,

  /**
   * @generated from enum value: LEVEL_SUGGEST_APPROVE = 4;
   */
  SUGGEST_APPROVE = 4,

  /**
   * @generated from enum value: LEVEL_CREATE = 6;
   */
  CREATE = 6,

  /**
   * @generated from enum value: LEVEL_DELETE = 7;
   */
  DELETE = 7,

  /**
   * @generated from enum value: LEVEL_HIDDEN_TX = 8;
   */
  HIDDEN_TX = 8,

  /**
   * @generated from enum value: LEVEL_INIT = 9;
   */
  INIT = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(Collection_Operations_Level)
proto3.util.setEnumType(Collection_Operations_Level, "stateObjects.Collection.Operations.Level", [
  { no: 0, name: "LEVEL_UNSPECIFIED" },
  { no: 1, name: "LEVEL_VIEW" },
  { no: 2, name: "LEVEL_EDIT" },
  { no: 3, name: "LEVEL_SUGGEST_EDIT" },
  { no: 4, name: "LEVEL_SUGGEST_APPROVE" },
  { no: 6, name: "LEVEL_CREATE" },
  { no: 7, name: "LEVEL_DELETE" },
  { no: 8, name: "LEVEL_HIDDEN_TX" },
  { no: 9, name: "LEVEL_INIT" },
]);

/**
 * @generated from message stateObjects.Collection.Operations.Membership
 */
export class Collection_Operations_Membership extends Message<Collection_Operations_Membership> {
  /**
   * @generated from field: bool view = 1;
   */
  view = false;

  /**
   * @generated from field: bool edit = 2;
   */
  edit = false;

  constructor(data?: PartialMessage<Collection_Operations_Membership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stateObjects.Collection.Operations.Membership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "view", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection_Operations_Membership {
    return new Collection_Operations_Membership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection_Operations_Membership {
    return new Collection_Operations_Membership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection_Operations_Membership {
    return new Collection_Operations_Membership().fromJsonString(jsonString, options);
  }

  static equals(a: Collection_Operations_Membership | PlainMessage<Collection_Operations_Membership> | undefined, b: Collection_Operations_Membership | PlainMessage<Collection_Operations_Membership> | undefined): boolean {
    return proto3.util.equals(Collection_Operations_Membership, a, b);
  }
}

/**
 * @generated from message stateObjects.Collection.Operations.Object
 */
export class Collection_Operations_Object extends Message<Collection_Operations_Object> {
  /**
   * @generated from field: bool view = 1;
   */
  view = false;

  /**
   * @generated from field: bool create = 2;
   */
  create = false;

  /**
   * @generated from field: bool delete = 3;
   */
  delete = false;

  /**
   * @generated from field: bool hidden_txs = 4;
   */
  hiddenTxs = false;

  constructor(data?: PartialMessage<Collection_Operations_Object>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stateObjects.Collection.Operations.Object";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "view", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "delete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "hidden_txs", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection_Operations_Object {
    return new Collection_Operations_Object().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection_Operations_Object {
    return new Collection_Operations_Object().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection_Operations_Object {
    return new Collection_Operations_Object().fromJsonString(jsonString, options);
  }

  static equals(a: Collection_Operations_Object | PlainMessage<Collection_Operations_Object> | undefined, b: Collection_Operations_Object | PlainMessage<Collection_Operations_Object> | undefined): boolean {
    return proto3.util.equals(Collection_Operations_Object, a, b);
  }
}

/**
 * @generated from message stateObjects.Collection.Operations.ObjectField
 */
export class Collection_Operations_ObjectField extends Message<Collection_Operations_ObjectField> {
  /**
   * @generated from field: bool view = 1;
   */
  view = false;

  /**
   * @generated from field: bool edit = 2;
   */
  edit = false;

  /**
   * @generated from field: bool suggest_edit = 3;
   */
  suggestEdit = false;

  /**
   * @generated from field: bool suggest_approve = 4;
   */
  suggestApprove = false;

  /**
   * @generated from field: bool suggest_reject = 5;
   */
  suggestReject = false;

  constructor(data?: PartialMessage<Collection_Operations_ObjectField>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stateObjects.Collection.Operations.ObjectField";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "view", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "suggest_edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "suggest_approve", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "suggest_reject", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection_Operations_ObjectField {
    return new Collection_Operations_ObjectField().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection_Operations_ObjectField {
    return new Collection_Operations_ObjectField().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection_Operations_ObjectField {
    return new Collection_Operations_ObjectField().fromJsonString(jsonString, options);
  }

  static equals(a: Collection_Operations_ObjectField | PlainMessage<Collection_Operations_ObjectField> | undefined, b: Collection_Operations_ObjectField | PlainMessage<Collection_Operations_ObjectField> | undefined): boolean {
    return proto3.util.equals(Collection_Operations_ObjectField, a, b);
  }
}

/**
 * @generated from message stateObjects.Collection.ObjectFieldPermission
 */
export class Collection_ObjectFieldPermission extends Message<Collection_ObjectFieldPermission> {
  /**
   * @generated from field: map<int32, stateObjects.Collection.Operations.ObjectField> acl_object_field = 1;
   */
  aclObjectField: { [key: number]: Collection_Operations_ObjectField } = {};

  constructor(data?: PartialMessage<Collection_ObjectFieldPermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stateObjects.Collection.ObjectFieldPermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "acl_object_field", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: Collection_Operations_ObjectField} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection_ObjectFieldPermission {
    return new Collection_ObjectFieldPermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection_ObjectFieldPermission {
    return new Collection_ObjectFieldPermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection_ObjectFieldPermission {
    return new Collection_ObjectFieldPermission().fromJsonString(jsonString, options);
  }

  static equals(a: Collection_ObjectFieldPermission | PlainMessage<Collection_ObjectFieldPermission> | undefined, b: Collection_ObjectFieldPermission | PlainMessage<Collection_ObjectFieldPermission> | undefined): boolean {
    return proto3.util.equals(Collection_ObjectFieldPermission, a, b);
  }
}

/**
 * Users are a special type of object
 *
 * @generated from message stateObjects.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: stateObjects.User.Id id = 1;
   */
  id?: User_Id;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string affiliation = 4;
   */
  affiliation = "";

  /**
   * Key is the collectionID
   *
   * @generated from field: map<string, int32> roles = 5;
   */
  roles: { [key: string]: number } = {};

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stateObjects.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: User_Id },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "affiliation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "roles", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * The key for the ledger
 *
 * @generated from message stateObjects.User.Id
 */
export class User_Id extends Message<User_Id> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<User_Id>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stateObjects.User.Id";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User_Id {
    return new User_Id().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User_Id {
    return new User_Id().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User_Id {
    return new User_Id().fromJsonString(jsonString, options);
  }

  static equals(a: User_Id | PlainMessage<User_Id> | undefined, b: User_Id | PlainMessage<User_Id> | undefined): boolean {
    return proto3.util.equals(User_Id, a, b);
  }
}

/**
 * @generated from message stateObjects.User.List
 */
export class User_List extends Message<User_List> {
  /**
   * @generated from field: repeated stateObjects.User items = 1;
   */
  items: User[] = [];

  constructor(data?: PartialMessage<User_List>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stateObjects.User.List";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User_List {
    return new User_List().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User_List {
    return new User_List().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User_List {
    return new User_List().fromJsonString(jsonString, options);
  }

  static equals(a: User_List | PlainMessage<User_List> | undefined, b: User_List | PlainMessage<User_List> | undefined): boolean {
    return proto3.util.equals(User_List, a, b);
  }
}

