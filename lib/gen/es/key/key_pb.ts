// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file key/key.proto (package key, syntax proto2)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto2 } from "@bufbuild/protobuf";

/**
 * @generated from message key.KeySchema
 */
export class KeySchema extends Message<KeySchema> {
  /**
   * @generated from field: required string namespace = 1;
   */
  namespace?: string;

  /**
   * @generated from field: required google.protobuf.FieldMask key_paths = 2;
   */
  keyPaths?: FieldMask;

  constructor(data?: PartialMessage<KeySchema>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "key.KeySchema";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_paths", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeySchema {
    return new KeySchema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeySchema {
    return new KeySchema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeySchema {
    return new KeySchema().fromJsonString(jsonString, options);
  }

  static equals(a: KeySchema | PlainMessage<KeySchema> | undefined, b: KeySchema | PlainMessage<KeySchema> | undefined): boolean {
    return proto2.util.equals(KeySchema, a, b);
  }
}

