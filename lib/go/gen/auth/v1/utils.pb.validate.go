// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/v1/utils.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on History with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *History) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on History with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HistoryMultiError, or nil if none found.
func (m *History) ValidateAll() error {
	return m.validate(true)
}

func (m *History) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetEntries()))
		i := 0
		for key := range m.GetEntries() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEntries()[key]
			_ = val

			// no validation rules for Entries[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, HistoryValidationError{
							field:  fmt.Sprintf("Entries[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, HistoryValidationError{
							field:  fmt.Sprintf("Entries[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return HistoryValidationError{
						field:  fmt.Sprintf("Entries[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return HistoryMultiError(errors)
	}

	return nil
}

// HistoryMultiError is an error wrapping multiple validation errors returned
// by History.ValidateAll() if the designated constraints aren't met.
type HistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryMultiError) AllErrors() []error { return m }

// HistoryValidationError is the validation error returned by History.Validate
// if the designated constraints aren't met.
type HistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryValidationError) ErrorName() string { return "HistoryValidationError" }

// Error satisfies the builtin error interface
func (e HistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryValidationError{}

// Validate checks the field values on StateActivity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StateActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StateActivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StateActivityMultiError, or
// nil if none found.
func (m *StateActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *StateActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxId

	// no validation rules for Note

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StateActivityValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StateActivityValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StateActivityValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StateActivityValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StateActivityValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StateActivityValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StateActivityMultiError(errors)
	}

	return nil
}

// StateActivityMultiError is an error wrapping multiple validation errors
// returned by StateActivity.ValidateAll() if the designated constraints
// aren't met.
type StateActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StateActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StateActivityMultiError) AllErrors() []error { return m }

// StateActivityValidationError is the validation error returned by
// StateActivity.Validate if the designated constraints aren't met.
type StateActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateActivityValidationError) ErrorName() string { return "StateActivityValidationError" }

// Error satisfies the builtin error interface
func (e StateActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateActivityValidationError{}

// Validate checks the field values on HiddenTx with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HiddenTx) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HiddenTx with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HiddenTxMultiError, or nil
// if none found.
func (m *HiddenTx) ValidateAll() error {
	return m.validate(true)
}

func (m *HiddenTx) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxId

	// no validation rules for Notes

	if all {
		switch v := interface{}(m.GetLastModified()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HiddenTxValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HiddenTxValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HiddenTxValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HiddenTxMultiError(errors)
	}

	return nil
}

// HiddenTxMultiError is an error wrapping multiple validation errors returned
// by HiddenTx.ValidateAll() if the designated constraints aren't met.
type HiddenTxMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HiddenTxMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HiddenTxMultiError) AllErrors() []error { return m }

// HiddenTxValidationError is the validation error returned by
// HiddenTx.Validate if the designated constraints aren't met.
type HiddenTxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HiddenTxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HiddenTxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HiddenTxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HiddenTxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HiddenTxValidationError) ErrorName() string { return "HiddenTxValidationError" }

// Error satisfies the builtin error interface
func (e HiddenTxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHiddenTx.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HiddenTxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HiddenTxValidationError{}

// Validate checks the field values on History_Entry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *History_Entry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on History_Entry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in History_EntryMultiError, or
// nil if none found.
func (m *History_Entry) ValidateAll() error {
	return m.validate(true)
}

func (m *History_Entry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxId

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, History_EntryValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, History_EntryValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return History_EntryValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDeleted

	// no validation rules for IsHidden

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, History_EntryValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, History_EntryValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return History_EntryValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return History_EntryMultiError(errors)
	}

	return nil
}

// History_EntryMultiError is an error wrapping multiple validation errors
// returned by History_Entry.ValidateAll() if the designated constraints
// aren't met.
type History_EntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m History_EntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m History_EntryMultiError) AllErrors() []error { return m }

// History_EntryValidationError is the validation error returned by
// History_Entry.Validate if the designated constraints aren't met.
type History_EntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e History_EntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e History_EntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e History_EntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e History_EntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e History_EntryValidationError) ErrorName() string { return "History_EntryValidationError" }

// Error satisfies the builtin error interface
func (e History_EntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistory_Entry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = History_EntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = History_EntryValidationError{}
