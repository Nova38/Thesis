// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: auth/v1/acl.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operation_Domain int32

const (
	Operation_DOMAIN_UNSPECIFIED Operation_Domain = 0
	// Meta create
	Operation_DOMAIN_COLLECTION            Operation_Domain = 1
	Operation_DOMAIN_COLLECTION_MEMBERSHIP Operation_Domain = 2
	Operation_DOMAIN_COLLECTION_PERMISSION Operation_Domain = 3
	Operation_DOMAIN_COLLECTION_ROLES      Operation_Domain = 4
	Operation_DOMAIN_USER                  Operation_Domain = 5
	Operation_DOMAIN_OBJECT                Operation_Domain = 6
	Operation_DOMAIN_OBJECT_FIELD          Operation_Domain = 7
	Operation_DOMAIN_TEST                  Operation_Domain = 100 // Test
)

// Enum value maps for Operation_Domain.
var (
	Operation_Domain_name = map[int32]string{
		0:   "DOMAIN_UNSPECIFIED",
		1:   "DOMAIN_COLLECTION",
		2:   "DOMAIN_COLLECTION_MEMBERSHIP",
		3:   "DOMAIN_COLLECTION_PERMISSION",
		4:   "DOMAIN_COLLECTION_ROLES",
		5:   "DOMAIN_USER",
		6:   "DOMAIN_OBJECT",
		7:   "DOMAIN_OBJECT_FIELD",
		100: "DOMAIN_TEST",
	}
	Operation_Domain_value = map[string]int32{
		"DOMAIN_UNSPECIFIED":           0,
		"DOMAIN_COLLECTION":            1,
		"DOMAIN_COLLECTION_MEMBERSHIP": 2,
		"DOMAIN_COLLECTION_PERMISSION": 3,
		"DOMAIN_COLLECTION_ROLES":      4,
		"DOMAIN_USER":                  5,
		"DOMAIN_OBJECT":                6,
		"DOMAIN_OBJECT_FIELD":          7,
		"DOMAIN_TEST":                  100,
	}
)

func (x Operation_Domain) Enum() *Operation_Domain {
	p := new(Operation_Domain)
	*p = x
	return p
}

func (x Operation_Domain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_Domain) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_v1_acl_proto_enumTypes[0].Descriptor()
}

func (Operation_Domain) Type() protoreflect.EnumType {
	return &file_auth_v1_acl_proto_enumTypes[0]
}

func (x Operation_Domain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_Domain.Descriptor instead.
func (Operation_Domain) EnumDescriptor() ([]byte, []int) {
	return file_auth_v1_acl_proto_rawDescGZIP(), []int{0, 0}
}

type Operation_Action int32

const (
	Operation_ACTION_UNSPECIFIED     Operation_Action = 0   // Default
	Operation_ACTION_VIEW            Operation_Action = 1   // View
	Operation_ACTION_CREATE          Operation_Action = 2   // Create
	Operation_ACTION_DELETE          Operation_Action = 3   // Delete
	Operation_ACTION_EDIT            Operation_Action = 4   // Edit/Update
	Operation_ACTION_VIEW_SUGGEST    Operation_Action = 5   // View the suggested update to the object
	Operation_ACTION_SUGGEST_EDIT    Operation_Action = 6   // Suggest an update to the object
	Operation_ACTION_SUGGEST_APPROVE Operation_Action = 7   // Approve the suggested update
	Operation_ACTION_SUGGEST_REJECT  Operation_Action = 8   // Reject the suggested update
	Operation_ACTION_VIEW_HISTORY    Operation_Action = 9   // View the history of the object
	Operation_ACTION_HIDDEN_TX       Operation_Action = 10  // view, hide, unhide
	Operation_ACTION_TEST            Operation_Action = 100 // Test
)

// Enum value maps for Operation_Action.
var (
	Operation_Action_name = map[int32]string{
		0:   "ACTION_UNSPECIFIED",
		1:   "ACTION_VIEW",
		2:   "ACTION_CREATE",
		3:   "ACTION_DELETE",
		4:   "ACTION_EDIT",
		5:   "ACTION_VIEW_SUGGEST",
		6:   "ACTION_SUGGEST_EDIT",
		7:   "ACTION_SUGGEST_APPROVE",
		8:   "ACTION_SUGGEST_REJECT",
		9:   "ACTION_VIEW_HISTORY",
		10:  "ACTION_HIDDEN_TX",
		100: "ACTION_TEST",
	}
	Operation_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED":     0,
		"ACTION_VIEW":            1,
		"ACTION_CREATE":          2,
		"ACTION_DELETE":          3,
		"ACTION_EDIT":            4,
		"ACTION_VIEW_SUGGEST":    5,
		"ACTION_SUGGEST_EDIT":    6,
		"ACTION_SUGGEST_APPROVE": 7,
		"ACTION_SUGGEST_REJECT":  8,
		"ACTION_VIEW_HISTORY":    9,
		"ACTION_HIDDEN_TX":       10,
		"ACTION_TEST":            100,
	}
)

func (x Operation_Action) Enum() *Operation_Action {
	p := new(Operation_Action)
	*p = x
	return p
}

func (x Operation_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_v1_acl_proto_enumTypes[1].Descriptor()
}

func (Operation_Action) Type() protoreflect.EnumType {
	return &file_auth_v1_acl_proto_enumTypes[1]
}

func (x Operation_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_Action.Descriptor instead.
func (Operation_Action) EnumDescriptor() ([]byte, []int) {
	return file_auth_v1_acl_proto_rawDescGZIP(), []int{0, 1}
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain Operation_Domain       `protobuf:"varint,1,opt,name=domain,proto3,enum=auth.Operation_Domain" json:"domain,omitempty"`
	Action Operation_Action       `protobuf:"varint,2,opt,name=action,proto3,enum=auth.Operation_Action" json:"action,omitempty"`
	Paths  *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=paths,proto3" json:"paths,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_acl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_acl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_auth_v1_acl_proto_rawDescGZIP(), []int{0}
}

func (x *Operation) GetDomain() Operation_Domain {
	if x != nil {
		return x.Domain
	}
	return Operation_DOMAIN_UNSPECIFIED
}

func (x *Operation) GetAction() Operation_Action {
	if x != nil {
		return x.Action
	}
	return Operation_ACTION_UNSPECIFIED
}

func (x *Operation) GetPaths() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Paths
	}
	return nil
}

// Types of Policies for the ACL
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//
	//	*Policy_Roles
	//	*Policy_Membership
	//	*Policy_Object_
	//	*Policy_ObjectField_
	Policy isPolicy_Policy `protobuf_oneof:"policy"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_acl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_acl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_auth_v1_acl_proto_rawDescGZIP(), []int{1}
}

func (m *Policy) GetPolicy() isPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *Policy) GetRoles() *Policy_Permissions {
	if x, ok := x.GetPolicy().(*Policy_Roles); ok {
		return x.Roles
	}
	return nil
}

func (x *Policy) GetMembership() *Policy_Permissions {
	if x, ok := x.GetPolicy().(*Policy_Membership); ok {
		return x.Membership
	}
	return nil
}

func (x *Policy) GetObject() *Policy_Object {
	if x, ok := x.GetPolicy().(*Policy_Object_); ok {
		return x.Object
	}
	return nil
}

func (x *Policy) GetObjectField() *Policy_ObjectField {
	if x, ok := x.GetPolicy().(*Policy_ObjectField_); ok {
		return x.ObjectField
	}
	return nil
}

type isPolicy_Policy interface {
	isPolicy_Policy()
}

type Policy_Roles struct {
	Roles *Policy_Permissions `protobuf:"bytes,1,opt,name=roles,proto3,oneof"`
}

type Policy_Membership struct {
	Membership *Policy_Permissions `protobuf:"bytes,2,opt,name=membership,proto3,oneof"`
}

type Policy_Object_ struct {
	Object *Policy_Object `protobuf:"bytes,3,opt,name=object,proto3,oneof"`
}

type Policy_ObjectField_ struct {
	ObjectField *Policy_ObjectField `protobuf:"bytes,4,opt,name=object_field,json=objectField,proto3,oneof"`
}

func (*Policy_Roles) isPolicy_Policy() {}

func (*Policy_Membership) isPolicy_Policy() {}

func (*Policy_Object_) isPolicy_Policy() {}

func (*Policy_ObjectField_) isPolicy_Policy() {}

// This message is the tree node for operations on the state object
type PathPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path is a sub path of a field mask
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	AllowSubPaths bool   `protobuf:"varint,2,opt,name=allow_sub_paths,json=allowSubPaths,proto3" json:"allow_sub_paths,omitempty"`
	// The key is a valid sub path in the type of state object
	SubPaths map[string]*PathPermission `protobuf:"bytes,3,rep,name=sub_paths,json=subPaths,proto3" json:"sub_paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The Key must be a valid role id defined in the roles map
	Policy *Policy_ObjectField `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *PathPermission) Reset() {
	*x = PathPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_acl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathPermission) ProtoMessage() {}

func (x *PathPermission) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_acl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathPermission.ProtoReflect.Descriptor instead.
func (*PathPermission) Descriptor() ([]byte, []int) {
	return file_auth_v1_acl_proto_rawDescGZIP(), []int{2}
}

func (x *PathPermission) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PathPermission) GetAllowSubPaths() bool {
	if x != nil {
		return x.AllowSubPaths
	}
	return false
}

func (x *PathPermission) GetSubPaths() map[string]*PathPermission {
	if x != nil {
		return x.SubPaths
	}
	return nil
}

func (x *PathPermission) GetPolicy() *Policy_ObjectField {
	if x != nil {
		return x.Policy
	}
	return nil
}

// Policy for altering the membership of a role or perms of a role
type Policy_Permissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View   bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Create bool `protobuf:"varint,2,opt,name=create,proto3" json:"create,omitempty"`
	Edit   bool `protobuf:"varint,3,opt,name=edit,proto3" json:"edit,omitempty"`
	Delete bool `protobuf:"varint,4,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *Policy_Permissions) Reset() {
	*x = Policy_Permissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_acl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Permissions) ProtoMessage() {}

func (x *Policy_Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_acl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Permissions.ProtoReflect.Descriptor instead.
func (*Policy_Permissions) Descriptor() ([]byte, []int) {
	return file_auth_v1_acl_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Policy_Permissions) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *Policy_Permissions) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *Policy_Permissions) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *Policy_Permissions) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Policy for altering the object
type Policy_Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View        bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Create      bool `protobuf:"varint,2,opt,name=create,proto3" json:"create,omitempty"`
	Delete      bool `protobuf:"varint,3,opt,name=delete,proto3" json:"delete,omitempty"`
	ViewHistory bool `protobuf:"varint,4,opt,name=view_history,json=viewHistory,proto3" json:"view_history,omitempty"`
	HiddenTx    bool `protobuf:"varint,5,opt,name=hidden_tx,json=hiddenTx,proto3" json:"hidden_tx,omitempty"`
}

func (x *Policy_Object) Reset() {
	*x = Policy_Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_acl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Object) ProtoMessage() {}

func (x *Policy_Object) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_acl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Object.ProtoReflect.Descriptor instead.
func (*Policy_Object) Descriptor() ([]byte, []int) {
	return file_auth_v1_acl_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Policy_Object) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *Policy_Object) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *Policy_Object) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *Policy_Object) GetViewHistory() bool {
	if x != nil {
		return x.ViewHistory
	}
	return false
}

func (x *Policy_Object) GetHiddenTx() bool {
	if x != nil {
		return x.HiddenTx
	}
	return false
}

// Policy for altering the object
type Policy_ObjectField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View           bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Edit           bool `protobuf:"varint,2,opt,name=edit,proto3" json:"edit,omitempty"`
	SuggestEdit    bool `protobuf:"varint,3,opt,name=suggest_edit,json=suggestEdit,proto3" json:"suggest_edit,omitempty"`
	SuggestApprove bool `protobuf:"varint,4,opt,name=suggest_approve,json=suggestApprove,proto3" json:"suggest_approve,omitempty"`
	SuggestReject  bool `protobuf:"varint,5,opt,name=suggest_reject,json=suggestReject,proto3" json:"suggest_reject,omitempty"`
}

func (x *Policy_ObjectField) Reset() {
	*x = Policy_ObjectField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_acl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_ObjectField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_ObjectField) ProtoMessage() {}

func (x *Policy_ObjectField) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_acl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_ObjectField.ProtoReflect.Descriptor instead.
func (*Policy_ObjectField) Descriptor() ([]byte, []int) {
	return file_auth_v1_acl_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Policy_ObjectField) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *Policy_ObjectField) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *Policy_ObjectField) GetSuggestEdit() bool {
	if x != nil {
		return x.SuggestEdit
	}
	return false
}

func (x *Policy_ObjectField) GetSuggestApprove() bool {
	if x != nil {
		return x.SuggestApprove
	}
	return false
}

func (x *Policy_ObjectField) GetSuggestReject() bool {
	if x != nil {
		return x.SuggestReject
	}
	return false
}

var file_auth_v1_acl_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*Operation)(nil),
		Field:         57775,
		Name:          "auth.operation",
		Tag:           "bytes,57775,opt,name=operation",
		Filename:      "auth/v1/acl.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional auth.Operation operation = 57775;
	E_Operation = &file_auth_v1_acl_proto_extTypes[0]
)

var File_auth_v1_acl_proto protoreflect.FileDescriptor

var file_auth_v1_acl_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x0d, 0x0a, 0x09, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x06, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x53, 0x48, 0x49, 0x50, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x10, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x55,
	0x47, 0x47, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x06,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45,
	0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45,
	0x4e, 0x5f, 0x54, 0x58, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x64, 0x3a, 0xd7, 0x08, 0xba, 0x48, 0xd3, 0x08, 0x1a, 0x77,
	0x0a, 0x1d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x30, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73,
	0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x1a, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21,
	0x3d, 0x20, 0x30, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x1a, 0x71, 0x0a, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x1a, 0x27, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21,
	0x3d, 0x20, 0x31, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x32, 0x2c, 0x33, 0x29, 0x1a, 0x64, 0x0a, 0x2b, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x1a, 0x11, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x32, 0x20,
	0x1a, 0x94, 0x01, 0x0a, 0x2b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x65, 0x77,
	0x2c, 0x65, 0x64, 0x69, 0x74, 0x2c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x29, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x33, 0x20, 0x26,
	0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
	0x28, 0x31, 0x2c, 0x33, 0x2c, 0x34, 0x29, 0x1a, 0x99, 0x01, 0x0a, 0x2d, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x76,
	0x69, 0x65, 0x77, 0x2c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x2c, 0x65, 0x64, 0x69, 0x74, 0x1a, 0x2b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x34, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c, 0x32, 0x2c, 0x33,
	0x2c, 0x34, 0x29, 0x1a, 0x7a, 0x0a, 0x1a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x65, 0x77, 0x2c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0x65, 0x64,
	0x69, 0x74, 0x1a, 0x2b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20,
	0x21, 0x3d, 0x20, 0x35, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c, 0x32, 0x2c, 0x33, 0x2c, 0x34, 0x29, 0x1a,
	0x96, 0x01, 0x0a, 0x1c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x46, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x65, 0x77, 0x2c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x1a, 0x2e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x36, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c, 0x32,
	0x2c, 0x33, 0x2c, 0x39, 0x2c, 0x31, 0x30, 0x29, 0x1a, 0xb6, 0x01, 0x0a, 0x22, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x5f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x20, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x20, 0x76, 0x69, 0x65, 0x77, 0x2c, 0x65, 0x64, 0x69, 0x74, 0x2c, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x2c, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x2c,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x1a, 0x2f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d,
	0x20, 0x37, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c, 0x34, 0x2c, 0x35, 0x2c, 0x36, 0x2c, 0x37, 0x2c, 0x38,
	0x29, 0x22, 0x8f, 0x05, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x65, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a,
	0x8c, 0x01, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x74, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x78, 0x1a, 0xa8,
	0x01, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0x8a, 0x03, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x38, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x51, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x65, 0xba, 0x48, 0x62, 0x1a, 0x60,
	0x0a, 0x0f, 0x53, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x19, 0x53, 0x75, 0x62, 0x20, 0x50, 0x61, 0x74, 0x68, 0x73, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a, 0x32, 0x21, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x30,
	0x3a, 0x4f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xaf, 0xc3,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x71, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x42, 0x08, 0x41,
	0x63, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x76, 0x61, 0x33, 0x38, 0x2f, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x04, 0x41,
	0x75, 0x74, 0x68, 0xca, 0x02, 0x04, 0x41, 0x75, 0x74, 0x68, 0xe2, 0x02, 0x10, 0x41, 0x75, 0x74,
	0x68, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x04,
	0x41, 0x75, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auth_v1_acl_proto_rawDescOnce sync.Once
	file_auth_v1_acl_proto_rawDescData = file_auth_v1_acl_proto_rawDesc
)

func file_auth_v1_acl_proto_rawDescGZIP() []byte {
	file_auth_v1_acl_proto_rawDescOnce.Do(func() {
		file_auth_v1_acl_proto_rawDescData = protoimpl.X.CompressGZIP(file_auth_v1_acl_proto_rawDescData)
	})
	return file_auth_v1_acl_proto_rawDescData
}

var file_auth_v1_acl_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_auth_v1_acl_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_auth_v1_acl_proto_goTypes = []interface{}{
	(Operation_Domain)(0),              // 0: auth.Operation.Domain
	(Operation_Action)(0),              // 1: auth.Operation.Action
	(*Operation)(nil),                  // 2: auth.Operation
	(*Policy)(nil),                     // 3: auth.Policy
	(*PathPermission)(nil),             // 4: auth.PathPermission
	(*Policy_Permissions)(nil),         // 5: auth.Policy.Permissions
	(*Policy_Object)(nil),              // 6: auth.Policy.Object
	(*Policy_ObjectField)(nil),         // 7: auth.Policy.ObjectField
	nil,                                // 8: auth.PathPermission.SubPathsEntry
	(*fieldmaskpb.FieldMask)(nil),      // 9: google.protobuf.FieldMask
	(*descriptorpb.MethodOptions)(nil), // 10: google.protobuf.MethodOptions
}
var file_auth_v1_acl_proto_depIdxs = []int32{
	0,  // 0: auth.Operation.domain:type_name -> auth.Operation.Domain
	1,  // 1: auth.Operation.action:type_name -> auth.Operation.Action
	9,  // 2: auth.Operation.paths:type_name -> google.protobuf.FieldMask
	5,  // 3: auth.Policy.roles:type_name -> auth.Policy.Permissions
	5,  // 4: auth.Policy.membership:type_name -> auth.Policy.Permissions
	6,  // 5: auth.Policy.object:type_name -> auth.Policy.Object
	7,  // 6: auth.Policy.object_field:type_name -> auth.Policy.ObjectField
	8,  // 7: auth.PathPermission.sub_paths:type_name -> auth.PathPermission.SubPathsEntry
	7,  // 8: auth.PathPermission.policy:type_name -> auth.Policy.ObjectField
	4,  // 9: auth.PathPermission.SubPathsEntry.value:type_name -> auth.PathPermission
	10, // 10: auth.operation:extendee -> google.protobuf.MethodOptions
	2,  // 11: auth.operation:type_name -> auth.Operation
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	11, // [11:12] is the sub-list for extension type_name
	10, // [10:11] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_auth_v1_acl_proto_init() }
func file_auth_v1_acl_proto_init() {
	if File_auth_v1_acl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_auth_v1_acl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_acl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_acl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_acl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Permissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_acl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_acl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_ObjectField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_auth_v1_acl_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Policy_Roles)(nil),
		(*Policy_Membership)(nil),
		(*Policy_Object_)(nil),
		(*Policy_ObjectField_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auth_v1_acl_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_auth_v1_acl_proto_goTypes,
		DependencyIndexes: file_auth_v1_acl_proto_depIdxs,
		EnumInfos:         file_auth_v1_acl_proto_enumTypes,
		MessageInfos:      file_auth_v1_acl_proto_msgTypes,
		ExtensionInfos:    file_auth_v1_acl_proto_extTypes,
	}.Build()
	File_auth_v1_acl_proto = out.File
	file_auth_v1_acl_proto_rawDesc = nil
	file_auth_v1_acl_proto_goTypes = nil
	file_auth_v1_acl_proto_depIdxs = nil
}
