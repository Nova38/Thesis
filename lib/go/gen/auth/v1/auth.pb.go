// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: auth/v1/auth.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nova38/thesis/lib/go/gen/hlf"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operation_Domain int32

const (
	Operation_DOMAIN_UNSPECIFIED Operation_Domain = 0
	// Meta create
	Operation_DOMAIN_COLLECTION            Operation_Domain = 1
	Operation_DOMAIN_COLLECTION_MEMBERSHIP Operation_Domain = 2
	Operation_DOMAIN_COLLECTION_PERMISSION Operation_Domain = 3
	Operation_DOMAIN_COLLECTION_ROLES      Operation_Domain = 4
	Operation_DOMAIN_USER                  Operation_Domain = 5
	Operation_DOMAIN_OBJECT                Operation_Domain = 6
	Operation_DOMAIN_OBJECT_FIELD          Operation_Domain = 7
	Operation_DOMAIN_TEST                  Operation_Domain = 100 // Test
)

// Enum value maps for Operation_Domain.
var (
	Operation_Domain_name = map[int32]string{
		0:   "DOMAIN_UNSPECIFIED",
		1:   "DOMAIN_COLLECTION",
		2:   "DOMAIN_COLLECTION_MEMBERSHIP",
		3:   "DOMAIN_COLLECTION_PERMISSION",
		4:   "DOMAIN_COLLECTION_ROLES",
		5:   "DOMAIN_USER",
		6:   "DOMAIN_OBJECT",
		7:   "DOMAIN_OBJECT_FIELD",
		100: "DOMAIN_TEST",
	}
	Operation_Domain_value = map[string]int32{
		"DOMAIN_UNSPECIFIED":           0,
		"DOMAIN_COLLECTION":            1,
		"DOMAIN_COLLECTION_MEMBERSHIP": 2,
		"DOMAIN_COLLECTION_PERMISSION": 3,
		"DOMAIN_COLLECTION_ROLES":      4,
		"DOMAIN_USER":                  5,
		"DOMAIN_OBJECT":                6,
		"DOMAIN_OBJECT_FIELD":          7,
		"DOMAIN_TEST":                  100,
	}
)

func (x Operation_Domain) Enum() *Operation_Domain {
	p := new(Operation_Domain)
	*p = x
	return p
}

func (x Operation_Domain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_Domain) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_v1_auth_proto_enumTypes[0].Descriptor()
}

func (Operation_Domain) Type() protoreflect.EnumType {
	return &file_auth_v1_auth_proto_enumTypes[0]
}

func (x Operation_Domain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_Domain.Descriptor instead.
func (Operation_Domain) EnumDescriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{1, 0}
}

type Operation_Action int32

const (
	Operation_ACTION_UNSPECIFIED     Operation_Action = 0   // Default
	Operation_ACTION_VIEW            Operation_Action = 1   // View
	Operation_ACTION_CREATE          Operation_Action = 2   // Create
	Operation_ACTION_DELETE          Operation_Action = 3   // Delete
	Operation_ACTION_EDIT            Operation_Action = 4   // Edit/Update
	Operation_ACTION_VIEW_SUGGEST    Operation_Action = 5   // View the suggested update to the object
	Operation_ACTION_SUGGEST_EDIT    Operation_Action = 6   // Suggest an update to the object
	Operation_ACTION_SUGGEST_APPROVE Operation_Action = 7   // Approve the suggested update
	Operation_ACTION_SUGGEST_REJECT  Operation_Action = 8   // Reject the suggested update
	Operation_ACTION_VIEW_HISTORY    Operation_Action = 9   // View the history of the object
	Operation_ACTION_HIDDEN_TX       Operation_Action = 10  // view, hide, unhide
	Operation_ACTION_TEST            Operation_Action = 100 // Test
)

// Enum value maps for Operation_Action.
var (
	Operation_Action_name = map[int32]string{
		0:   "ACTION_UNSPECIFIED",
		1:   "ACTION_VIEW",
		2:   "ACTION_CREATE",
		3:   "ACTION_DELETE",
		4:   "ACTION_EDIT",
		5:   "ACTION_VIEW_SUGGEST",
		6:   "ACTION_SUGGEST_EDIT",
		7:   "ACTION_SUGGEST_APPROVE",
		8:   "ACTION_SUGGEST_REJECT",
		9:   "ACTION_VIEW_HISTORY",
		10:  "ACTION_HIDDEN_TX",
		100: "ACTION_TEST",
	}
	Operation_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED":     0,
		"ACTION_VIEW":            1,
		"ACTION_CREATE":          2,
		"ACTION_DELETE":          3,
		"ACTION_EDIT":            4,
		"ACTION_VIEW_SUGGEST":    5,
		"ACTION_SUGGEST_EDIT":    6,
		"ACTION_SUGGEST_APPROVE": 7,
		"ACTION_SUGGEST_REJECT":  8,
		"ACTION_VIEW_HISTORY":    9,
		"ACTION_HIDDEN_TX":       10,
		"ACTION_TEST":            100,
	}
)

func (x Operation_Action) Enum() *Operation_Action {
	p := new(Operation_Action)
	*p = x
	return p
}

func (x Operation_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_v1_auth_proto_enumTypes[1].Descriptor()
}

func (Operation_Action) Type() protoreflect.EnumType {
	return &file_auth_v1_auth_proto_enumTypes[1]
}

func (x Operation_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_Action.Descriptor instead.
func (Operation_Action) EnumDescriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{1, 1}
}

type Collection_AuthType int32

const (
	Collection_AUTH_TYPE_UNSPECIFIED Collection_AuthType = 0
	// Role based access control:
	// 1. Valid Roles are defined in the roles list
	// 2. Roles are assigned to users in the memberships map
	// 3. Permissions are stored in the Collections ACL with the role id as the key
	Collection_AUTH_TYPE_RBAC Collection_AuthType = 1
	// Attribute based access control:
	// 1. Valid Attribute definitions are defined in the attributes list
	// 2. Attributes are stored in the users x509 certificate
	// 3. Permissions are stored in the Collections ACL with the user id as the key
	Collection_AUTH_TYPE_ABAC Collection_AuthType = 2
	// Identity based access control:
	// 1. Valid Identities are users registered in the smart contract
	// 2. Permissions are stored in the Collections ACL with the user id as the key
	Collection_AUTH_TYPE_IDENTITY Collection_AuthType = 3
)

// Enum value maps for Collection_AuthType.
var (
	Collection_AuthType_name = map[int32]string{
		0: "AUTH_TYPE_UNSPECIFIED",
		1: "AUTH_TYPE_RBAC",
		2: "AUTH_TYPE_ABAC",
		3: "AUTH_TYPE_IDENTITY",
	}
	Collection_AuthType_value = map[string]int32{
		"AUTH_TYPE_UNSPECIFIED": 0,
		"AUTH_TYPE_RBAC":        1,
		"AUTH_TYPE_ABAC":        2,
		"AUTH_TYPE_IDENTITY":    3,
	}
)

func (x Collection_AuthType) Enum() *Collection_AuthType {
	p := new(Collection_AuthType)
	*p = x
	return p
}

func (x Collection_AuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Collection_AuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_v1_auth_proto_enumTypes[2].Descriptor()
}

func (Collection_AuthType) Type() protoreflect.EnumType {
	return &file_auth_v1_auth_proto_enumTypes[2]
}

func (x Collection_AuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Collection_AuthType.Descriptor instead.
func (Collection_AuthType) EnumDescriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{3, 0}
}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*Identifier_Attribute_
	//	*Identifier_Role_
	//	*Identifier_Identity_
	Id isIdentifier_Id `protobuf_oneof:"id"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{0}
}

func (m *Identifier) GetId() isIdentifier_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *Identifier) GetAttribute() *Identifier_Attribute {
	if x, ok := x.GetId().(*Identifier_Attribute_); ok {
		return x.Attribute
	}
	return nil
}

func (x *Identifier) GetRole() *Identifier_Role {
	if x, ok := x.GetId().(*Identifier_Role_); ok {
		return x.Role
	}
	return nil
}

func (x *Identifier) GetIdentity() *Identifier_Identity {
	if x, ok := x.GetId().(*Identifier_Identity_); ok {
		return x.Identity
	}
	return nil
}

type isIdentifier_Id interface {
	isIdentifier_Id()
}

type Identifier_Attribute_ struct {
	Attribute *Identifier_Attribute `protobuf:"bytes,1,opt,name=attribute,proto3,oneof"`
}

type Identifier_Role_ struct {
	Role *Identifier_Role `protobuf:"bytes,2,opt,name=role,proto3,oneof"`
}

type Identifier_Identity_ struct {
	Identity *Identifier_Identity `protobuf:"bytes,3,opt,name=identity,proto3,oneof"`
}

func (*Identifier_Attribute_) isIdentifier_Id() {}

func (*Identifier_Role_) isIdentifier_Id() {}

func (*Identifier_Identity_) isIdentifier_Id() {}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain Operation_Domain       `protobuf:"varint,1,opt,name=domain,proto3,enum=auth.Operation_Domain" json:"domain,omitempty"`
	Action Operation_Action       `protobuf:"varint,2,opt,name=action,proto3,enum=auth.Operation_Action" json:"action,omitempty"`
	Paths  *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=paths,proto3" json:"paths,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{1}
}

func (x *Operation) GetDomain() Operation_Domain {
	if x != nil {
		return x.Domain
	}
	return Operation_DOMAIN_UNSPECIFIED
}

func (x *Operation) GetAction() Operation_Action {
	if x != nil {
		return x.Action
	}
	return Operation_ACTION_UNSPECIFIED
}

func (x *Operation) GetPaths() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Paths
	}
	return nil
}

type ACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The string is the stringified Identifier
	Entries map[string]*ACL_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The default is the base permissions for all users
	Default *ACL_Entry `protobuf:"bytes,2,opt,name=default,proto3" json:"default,omitempty"`
	// The public is the base permissions unregistered users. Manly for viewing
	Public *ACL_Entry `protobuf:"bytes,3,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *ACL) Reset() {
	*x = ACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL) ProtoMessage() {}

func (x *ACL) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL.ProtoReflect.Descriptor instead.
func (*ACL) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{2}
}

func (x *ACL) GetEntries() map[string]*ACL_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ACL) GetDefault() *ACL_Entry {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *ACL) GetPublic() *ACL_Entry {
	if x != nil {
		return x.Public
	}
	return nil
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key for the ledger
	Id       *Collection_Id       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Settings *Collection_Settings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	// The full type of object that this collection will store
	ObjectType string `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	// The namespace of the object that this collection will store
	ObjectNamespace string `protobuf:"bytes,4,opt,name=object_namespace,json=objectNamespace,proto3" json:"object_namespace,omitempty"`
	Acl             *ACL   `protobuf:"bytes,5,opt,name=acl,proto3" json:"acl,omitempty"`
	// The key is the stringified Identifier
	// The value is the IdentifierEntry, which contains the Identifier and the parents
	// The parents are the attributes that this attribute is derived from
	Identifiers map[string]*Collection_IdentifierEntry `protobuf:"bytes,6,rep,name=identifiers,proto3" json:"identifiers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{3}
}

func (x *Collection) GetId() *Collection_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Collection) GetSettings() *Collection_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Collection) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *Collection) GetObjectNamespace() string {
	if x != nil {
		return x.ObjectNamespace
	}
	return ""
}

func (x *Collection) GetAcl() *ACL {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *Collection) GetIdentifiers() map[string]*Collection_IdentifierEntry {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *User_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Memberships stores the roles that the user has in each collection
	// Key is the collection id
	// Value is the role id
	Memberships map[string]string `protobuf:"bytes,3,rep,name=memberships,proto3" json:"memberships,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{4}
}

func (x *User) GetId() *User_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetMemberships() map[string]string {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type Identifier_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MspId string `protobuf:"bytes,2,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Identifier_Attribute) Reset() {
	*x = Identifier_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier_Attribute) ProtoMessage() {}

func (x *Identifier_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier_Attribute.ProtoReflect.Descriptor instead.
func (*Identifier_Attribute) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Identifier_Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identifier_Attribute) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *Identifier_Attribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Identifier_Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Identifier_Role) Reset() {
	*x = Identifier_Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier_Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier_Role) ProtoMessage() {}

func (x *Identifier_Role) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier_Role.ProtoReflect.Descriptor instead.
func (*Identifier_Role) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Identifier_Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Identifier_Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Identifier_Identity) Reset() {
	*x = Identifier_Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier_Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier_Identity) ProtoMessage() {}

func (x *Identifier_Identity) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier_Identity.ProtoReflect.Descriptor instead.
func (*Identifier_Identity) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Identifier_Identity) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *Identifier_Identity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Types of Policies for the ACL
type ACL_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ACL_Policy) Reset() {
	*x = ACL_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Policy) ProtoMessage() {}

func (x *ACL_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Policy.ProtoReflect.Descriptor instead.
func (*ACL_Policy) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{2, 0}
}

// This message is the tree node for operations on the state object
type ACL_PathPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path is a sub path of a field mask
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	AllowSubPaths bool   `protobuf:"varint,2,opt,name=allow_sub_paths,json=allowSubPaths,proto3" json:"allow_sub_paths,omitempty"`
	// The key is a valid sub path in the type of state object
	SubPaths map[string]*ACL_PathPermission `protobuf:"bytes,3,rep,name=sub_paths,json=subPaths,proto3" json:"sub_paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If the policy is not set than use a parent policy unless nested policy is set
	Policy *ACL_Policy_ObjectField `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *ACL_PathPermission) Reset() {
	*x = ACL_PathPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_PathPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_PathPermission) ProtoMessage() {}

func (x *ACL_PathPermission) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_PathPermission.ProtoReflect.Descriptor instead.
func (*ACL_PathPermission) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ACL_PathPermission) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ACL_PathPermission) GetAllowSubPaths() bool {
	if x != nil {
		return x.AllowSubPaths
	}
	return false
}

func (x *ACL_PathPermission) GetSubPaths() map[string]*ACL_PathPermission {
	if x != nil {
		return x.SubPaths
	}
	return nil
}

func (x *ACL_PathPermission) GetPolicy() *ACL_Policy_ObjectField {
	if x != nil {
		return x.Policy
	}
	return nil
}

type ACL_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memberships     *ACL_Policy_Permission `protobuf:"bytes,1,opt,name=memberships,proto3" json:"memberships,omitempty"`
	RolePermissions *ACL_Policy_Permission `protobuf:"bytes,2,opt,name=role_permissions,json=rolePermissions,proto3" json:"role_permissions,omitempty"`
	RoleDefs        *ACL_Policy_Permission `protobuf:"bytes,3,opt,name=role_defs,json=roleDefs,proto3" json:"role_defs,omitempty"`
	Object          *ACL_Policy_Object     `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
	ObjectPaths     *ACL_PathPermission    `protobuf:"bytes,5,opt,name=object_paths,json=objectPaths,proto3" json:"object_paths,omitempty"`
	ViewMask        *fieldmaskpb.FieldMask `protobuf:"bytes,6,opt,name=view_mask,json=viewMask,proto3" json:"view_mask,omitempty"`
}

func (x *ACL_Entry) Reset() {
	*x = ACL_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Entry) ProtoMessage() {}

func (x *ACL_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Entry.ProtoReflect.Descriptor instead.
func (*ACL_Entry) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{2, 2}
}

func (x *ACL_Entry) GetMemberships() *ACL_Policy_Permission {
	if x != nil {
		return x.Memberships
	}
	return nil
}

func (x *ACL_Entry) GetRolePermissions() *ACL_Policy_Permission {
	if x != nil {
		return x.RolePermissions
	}
	return nil
}

func (x *ACL_Entry) GetRoleDefs() *ACL_Policy_Permission {
	if x != nil {
		return x.RoleDefs
	}
	return nil
}

func (x *ACL_Entry) GetObject() *ACL_Policy_Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ACL_Entry) GetObjectPaths() *ACL_PathPermission {
	if x != nil {
		return x.ObjectPaths
	}
	return nil
}

func (x *ACL_Entry) GetViewMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ViewMask
	}
	return nil
}

// Policy for altering the membership of a role or perms of a role
type ACL_Policy_Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View   bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Create bool `protobuf:"varint,2,opt,name=create,proto3" json:"create,omitempty"`
	Edit   bool `protobuf:"varint,3,opt,name=edit,proto3" json:"edit,omitempty"`
	Delete bool `protobuf:"varint,4,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *ACL_Policy_Permission) Reset() {
	*x = ACL_Policy_Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Policy_Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Policy_Permission) ProtoMessage() {}

func (x *ACL_Policy_Permission) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Policy_Permission.ProtoReflect.Descriptor instead.
func (*ACL_Policy_Permission) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *ACL_Policy_Permission) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *ACL_Policy_Permission) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *ACL_Policy_Permission) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *ACL_Policy_Permission) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Policy for altering the object
type ACL_Policy_Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View        bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Create      bool `protobuf:"varint,2,opt,name=create,proto3" json:"create,omitempty"`
	Delete      bool `protobuf:"varint,3,opt,name=delete,proto3" json:"delete,omitempty"`
	ViewHistory bool `protobuf:"varint,4,opt,name=view_history,json=viewHistory,proto3" json:"view_history,omitempty"`
	HiddenTx    bool `protobuf:"varint,5,opt,name=hidden_tx,json=hiddenTx,proto3" json:"hidden_tx,omitempty"`
}

func (x *ACL_Policy_Object) Reset() {
	*x = ACL_Policy_Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Policy_Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Policy_Object) ProtoMessage() {}

func (x *ACL_Policy_Object) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Policy_Object.ProtoReflect.Descriptor instead.
func (*ACL_Policy_Object) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{2, 0, 1}
}

func (x *ACL_Policy_Object) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *ACL_Policy_Object) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *ACL_Policy_Object) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *ACL_Policy_Object) GetViewHistory() bool {
	if x != nil {
		return x.ViewHistory
	}
	return false
}

func (x *ACL_Policy_Object) GetHiddenTx() bool {
	if x != nil {
		return x.HiddenTx
	}
	return false
}

// Policy for altering the object
type ACL_Policy_ObjectField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View           bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Edit           bool `protobuf:"varint,2,opt,name=edit,proto3" json:"edit,omitempty"`
	SuggestEdit    bool `protobuf:"varint,3,opt,name=suggest_edit,json=suggestEdit,proto3" json:"suggest_edit,omitempty"`
	SuggestApprove bool `protobuf:"varint,4,opt,name=suggest_approve,json=suggestApprove,proto3" json:"suggest_approve,omitempty"`
	SuggestReject  bool `protobuf:"varint,5,opt,name=suggest_reject,json=suggestReject,proto3" json:"suggest_reject,omitempty"`
}

func (x *ACL_Policy_ObjectField) Reset() {
	*x = ACL_Policy_ObjectField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Policy_ObjectField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Policy_ObjectField) ProtoMessage() {}

func (x *ACL_Policy_ObjectField) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Policy_ObjectField.ProtoReflect.Descriptor instead.
func (*ACL_Policy_ObjectField) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{2, 0, 2}
}

func (x *ACL_Policy_ObjectField) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *ACL_Policy_ObjectField) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *ACL_Policy_ObjectField) GetSuggestEdit() bool {
	if x != nil {
		return x.SuggestEdit
	}
	return false
}

func (x *ACL_Policy_ObjectField) GetSuggestApprove() bool {
	if x != nil {
		return x.SuggestApprove
	}
	return false
}

func (x *ACL_Policy_ObjectField) GetSuggestReject() bool {
	if x != nil {
		return x.SuggestReject
	}
	return false
}

type Collection_IdentifierEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *Identifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The parent attribute that this attribute is derived from
	// If this is set, then it means that it should look in the permissions of
	// the parent attribute to if the user doesn't have a defined permission
	// for this attribute. Only if a non-root permission is not defined for the
	// the attribute will it look back to the parent attribute for a permissions.
	// This allows for a hierarchy of attributes to be defined
	Parents []string `protobuf:"bytes,2,rep,name=parents,proto3" json:"parents,omitempty"`
}

func (x *Collection_IdentifierEntry) Reset() {
	*x = Collection_IdentifierEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_IdentifierEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_IdentifierEntry) ProtoMessage() {}

func (x *Collection_IdentifierEntry) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_IdentifierEntry.ProtoReflect.Descriptor instead.
func (*Collection_IdentifierEntry) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Collection_IdentifierEntry) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Collection_IdentifierEntry) GetParents() []string {
	if x != nil {
		return x.Parents
	}
	return nil
}

type Collection_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of authentication to use for this collection
	AuthType Collection_AuthType `protobuf:"varint,1,opt,name=auth_type,json=authType,proto3,enum=auth.Collection_AuthType" json:"auth_type,omitempty"`
	// If true, then the ACL will be used to restrict the view of the object
	// to only those users who have been granted access to that level of the object
	// This means that for listing objects, a filter will have to be applied
	// to each object. For list all objects, this will be a very expensive operation
	// as it will require walking multiple collections paths
	ViewRestrictionsEnabled bool `protobuf:"varint,2,opt,name=view_restrictions_enabled,json=viewRestrictionsEnabled,proto3" json:"view_restrictions_enabled,omitempty"`
	AclInheritanceEnabled   bool `protobuf:"varint,3,opt,name=acl_inheritance_enabled,json=aclInheritanceEnabled,proto3" json:"acl_inheritance_enabled,omitempty"`
}

func (x *Collection_Settings) Reset() {
	*x = Collection_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_Settings) ProtoMessage() {}

func (x *Collection_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_Settings.ProtoReflect.Descriptor instead.
func (*Collection_Settings) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Collection_Settings) GetAuthType() Collection_AuthType {
	if x != nil {
		return x.AuthType
	}
	return Collection_AUTH_TYPE_UNSPECIFIED
}

func (x *Collection_Settings) GetViewRestrictionsEnabled() bool {
	if x != nil {
		return x.ViewRestrictionsEnabled
	}
	return false
}

func (x *Collection_Settings) GetAclInheritanceEnabled() bool {
	if x != nil {
		return x.AclInheritanceEnabled
	}
	return false
}

type Collection_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *Collection_Id) Reset() {
	*x = Collection_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_Id) ProtoMessage() {}

func (x *Collection_Id) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_Id.ProtoReflect.Descriptor instead.
func (*Collection_Id) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Collection_Id) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

// The key for the ledger
type User_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *User_Id) Reset() {
	*x = User_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_auth_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Id) ProtoMessage() {}

func (x *User_Id) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_auth_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Id.ProtoReflect.Descriptor instead.
func (*User_Id) Descriptor() ([]byte, []int) {
	return file_auth_v1_auth_proto_rawDescGZIP(), []int{4, 0}
}

func (x *User_Id) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *User_Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var file_auth_v1_auth_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*Operation)(nil),
		Field:         57775,
		Name:          "auth.operation",
		Tag:           "bytes,57775,opt,name=operation",
		Filename:      "auth/v1/auth.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional auth.Operation operation = 57775;
	E_Operation = &file_auth_v1_auth_proto_extTypes[0]
)

var File_auth_v1_auth_proto protoreflect.FileDescriptor

var file_auth_v1_auth_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x68, 0x6c, 0x66,
	0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x03, 0x0a, 0x0a, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x67, 0x0a, 0x09, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x32, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x11, 0xba, 0xd4, 0x1a, 0x0d, 0x0a, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x1a, 0x63, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6d,
	0x73, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x1e, 0xba,
	0xd4, 0x1a, 0x1a, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x0c, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x0a, 0x02, 0x69, 0x64, 0x42, 0x04, 0x0a,
	0x02, 0x69, 0x64, 0x22, 0xf4, 0x0d, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x64, 0x22, 0x91, 0x02, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45,
	0x53, 0x54, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x08,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x54, 0x58, 0x10, 0x0a, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x64,
	0x3a, 0xd7, 0x08, 0xba, 0x48, 0xd3, 0x08, 0x1a, 0x77, 0x0a, 0x1d, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x24, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x20, 0x7c, 0x7c, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x30,
	0x1a, 0x71, 0x0a, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6f,
	0x6e, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x27, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x31, 0x20, 0x26, 0x26, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x32,
	0x2c, 0x33, 0x29, 0x1a, 0x64, 0x0a, 0x2b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53,
	0x48, 0x49, 0x50, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x22, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x20, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x1a, 0x11, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x32, 0x20, 0x1a, 0x94, 0x01, 0x0a, 0x2b, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20,
	0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x65, 0x77, 0x2c, 0x65, 0x64, 0x69, 0x74, 0x2c, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x29, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x33, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c, 0x33, 0x2c, 0x34, 0x29,
	0x1a, 0x99, 0x01, 0x0a, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x53, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x65, 0x77, 0x2c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0x65, 0x64, 0x69, 0x74, 0x1a,
	0x2b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20,
	0x34, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c, 0x32, 0x2c, 0x33, 0x2c, 0x34, 0x29, 0x1a, 0x7a, 0x0a, 0x1a,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x55, 0x73, 0x65, 0x72,
	0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6f,
	0x6e, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x65, 0x77, 0x2c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2c,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0x65, 0x64, 0x69, 0x74, 0x1a, 0x2b, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x35, 0x20, 0x26, 0x26,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28,
	0x31, 0x2c, 0x32, 0x2c, 0x33, 0x2c, 0x34, 0x29, 0x1a, 0x96, 0x01, 0x0a, 0x1c, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
	0x76, 0x69, 0x65, 0x77, 0x2c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x2c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x1a, 0x2e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21,
	0x3d, 0x20, 0x36, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c, 0x32, 0x2c, 0x33, 0x2c, 0x39, 0x2c, 0x31, 0x30,
	0x29, 0x1a, 0xb6, 0x01, 0x0a, 0x22, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x76, 0x69,
	0x65, 0x77, 0x2c, 0x65, 0x64, 0x69, 0x74, 0x2c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x2c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x2c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x2f, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x37, 0x20, 0x26, 0x26, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c,
	0x34, 0x2c, 0x35, 0x2c, 0x36, 0x2c, 0x37, 0x2c, 0x38, 0x29, 0x22, 0xd6, 0x0b, 0x0a, 0x03, 0x41,
	0x43, 0x4c, 0x12, 0x38, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x2f, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x1a, 0xa8, 0x03, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x64, 0x0a, 0x0a, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x1a, 0x8c, 0x01, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x74, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x78,
	0x1a, 0xa8, 0x01, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x96, 0x03, 0x0a, 0x0e,
	0x50, 0x61, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x62, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x43,
	0x4c, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x41, 0x43, 0x4c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x55, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x41, 0x43, 0x4c, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x65, 0xba,
	0x48, 0x62, 0x1a, 0x60, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x19, 0x53, 0x75, 0x62, 0x20, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x1a, 0x32, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x73, 0x75, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29,
	0x20, 0x3e, 0x20, 0x30, 0x1a, 0x9f, 0x03, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x45,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x41, 0x43, 0x4c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41,
	0x43, 0x4c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x43, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x43,
	0x4c, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x76, 0x69,
	0x65, 0x77, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x4b, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41,
	0x43, 0x4c, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe1, 0x06, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x27,
	0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x12,
	0x43, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x1a, 0x65, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xb6, 0x01, 0x0a, 0x08,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x19, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x61, 0x63, 0x6c, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61,
	0x63, 0x6c, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x1a, 0x32, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x60, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x08, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x42, 0x41, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x42, 0x41, 0x43, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10,
	0x03, 0x3a, 0x24, 0xba, 0xd4, 0x1a, 0x20, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x10, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xa9, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x1a, 0x3d, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x73, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x1f, 0xba, 0xd4, 0x1a, 0x1b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x12, 0x0a, 0x09, 0x69, 0x64, 0x2e, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x0a, 0x05, 0x69, 0x64,
	0x2e, 0x69, 0x64, 0x3a, 0x4f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xaf, 0xc3, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x42, 0x09, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x76, 0x61, 0x33, 0x38,
	0x2f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58,
	0xaa, 0x02, 0x04, 0x41, 0x75, 0x74, 0x68, 0xca, 0x02, 0x04, 0x41, 0x75, 0x74, 0x68, 0xe2, 0x02,
	0x10, 0x41, 0x75, 0x74, 0x68, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x04, 0x41, 0x75, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auth_v1_auth_proto_rawDescOnce sync.Once
	file_auth_v1_auth_proto_rawDescData = file_auth_v1_auth_proto_rawDesc
)

func file_auth_v1_auth_proto_rawDescGZIP() []byte {
	file_auth_v1_auth_proto_rawDescOnce.Do(func() {
		file_auth_v1_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_auth_v1_auth_proto_rawDescData)
	})
	return file_auth_v1_auth_proto_rawDescData
}

var file_auth_v1_auth_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_auth_v1_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_auth_v1_auth_proto_goTypes = []interface{}{
	(Operation_Domain)(0),              // 0: auth.Operation.Domain
	(Operation_Action)(0),              // 1: auth.Operation.Action
	(Collection_AuthType)(0),           // 2: auth.Collection.AuthType
	(*Identifier)(nil),                 // 3: auth.Identifier
	(*Operation)(nil),                  // 4: auth.Operation
	(*ACL)(nil),                        // 5: auth.ACL
	(*Collection)(nil),                 // 6: auth.Collection
	(*User)(nil),                       // 7: auth.User
	(*Identifier_Attribute)(nil),       // 8: auth.Identifier.Attribute
	(*Identifier_Role)(nil),            // 9: auth.Identifier.Role
	(*Identifier_Identity)(nil),        // 10: auth.Identifier.Identity
	(*ACL_Policy)(nil),                 // 11: auth.ACL.Policy
	(*ACL_PathPermission)(nil),         // 12: auth.ACL.PathPermission
	(*ACL_Entry)(nil),                  // 13: auth.ACL.Entry
	nil,                                // 14: auth.ACL.EntriesEntry
	(*ACL_Policy_Permission)(nil),      // 15: auth.ACL.Policy.Permission
	(*ACL_Policy_Object)(nil),          // 16: auth.ACL.Policy.Object
	(*ACL_Policy_ObjectField)(nil),     // 17: auth.ACL.Policy.ObjectField
	nil,                                // 18: auth.ACL.PathPermission.SubPathsEntry
	(*Collection_IdentifierEntry)(nil), // 19: auth.Collection.IdentifierEntry
	(*Collection_Settings)(nil),        // 20: auth.Collection.Settings
	(*Collection_Id)(nil),              // 21: auth.Collection.Id
	nil,                                // 22: auth.Collection.IdentifiersEntry
	(*User_Id)(nil),                    // 23: auth.User.Id
	nil,                                // 24: auth.User.MembershipsEntry
	(*fieldmaskpb.FieldMask)(nil),      // 25: google.protobuf.FieldMask
	(*descriptorpb.MethodOptions)(nil), // 26: google.protobuf.MethodOptions
}
var file_auth_v1_auth_proto_depIdxs = []int32{
	8,  // 0: auth.Identifier.attribute:type_name -> auth.Identifier.Attribute
	9,  // 1: auth.Identifier.role:type_name -> auth.Identifier.Role
	10, // 2: auth.Identifier.identity:type_name -> auth.Identifier.Identity
	0,  // 3: auth.Operation.domain:type_name -> auth.Operation.Domain
	1,  // 4: auth.Operation.action:type_name -> auth.Operation.Action
	25, // 5: auth.Operation.paths:type_name -> google.protobuf.FieldMask
	14, // 6: auth.ACL.entries:type_name -> auth.ACL.EntriesEntry
	13, // 7: auth.ACL.default:type_name -> auth.ACL.Entry
	13, // 8: auth.ACL.public:type_name -> auth.ACL.Entry
	21, // 9: auth.Collection.id:type_name -> auth.Collection.Id
	20, // 10: auth.Collection.settings:type_name -> auth.Collection.Settings
	5,  // 11: auth.Collection.acl:type_name -> auth.ACL
	22, // 12: auth.Collection.identifiers:type_name -> auth.Collection.IdentifiersEntry
	23, // 13: auth.User.id:type_name -> auth.User.Id
	24, // 14: auth.User.memberships:type_name -> auth.User.MembershipsEntry
	18, // 15: auth.ACL.PathPermission.sub_paths:type_name -> auth.ACL.PathPermission.SubPathsEntry
	17, // 16: auth.ACL.PathPermission.policy:type_name -> auth.ACL.Policy.ObjectField
	15, // 17: auth.ACL.Entry.memberships:type_name -> auth.ACL.Policy.Permission
	15, // 18: auth.ACL.Entry.role_permissions:type_name -> auth.ACL.Policy.Permission
	15, // 19: auth.ACL.Entry.role_defs:type_name -> auth.ACL.Policy.Permission
	16, // 20: auth.ACL.Entry.object:type_name -> auth.ACL.Policy.Object
	12, // 21: auth.ACL.Entry.object_paths:type_name -> auth.ACL.PathPermission
	25, // 22: auth.ACL.Entry.view_mask:type_name -> google.protobuf.FieldMask
	13, // 23: auth.ACL.EntriesEntry.value:type_name -> auth.ACL.Entry
	12, // 24: auth.ACL.PathPermission.SubPathsEntry.value:type_name -> auth.ACL.PathPermission
	3,  // 25: auth.Collection.IdentifierEntry.identifier:type_name -> auth.Identifier
	2,  // 26: auth.Collection.Settings.auth_type:type_name -> auth.Collection.AuthType
	19, // 27: auth.Collection.IdentifiersEntry.value:type_name -> auth.Collection.IdentifierEntry
	26, // 28: auth.operation:extendee -> google.protobuf.MethodOptions
	4,  // 29: auth.operation:type_name -> auth.Operation
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	29, // [29:30] is the sub-list for extension type_name
	28, // [28:29] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_auth_v1_auth_proto_init() }
func file_auth_v1_auth_proto_init() {
	if File_auth_v1_auth_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_auth_v1_auth_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier_Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier_Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_PathPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Policy_Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Policy_Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Policy_ObjectField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_IdentifierEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_auth_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_auth_v1_auth_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Identifier_Attribute_)(nil),
		(*Identifier_Role_)(nil),
		(*Identifier_Identity_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auth_v1_auth_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_auth_v1_auth_proto_goTypes,
		DependencyIndexes: file_auth_v1_auth_proto_depIdxs,
		EnumInfos:         file_auth_v1_auth_proto_enumTypes,
		MessageInfos:      file_auth_v1_auth_proto_msgTypes,
		ExtensionInfos:    file_auth_v1_auth_proto_extTypes,
	}.Build()
	File_auth_v1_auth_proto = out.File
	file_auth_v1_auth_proto_rawDesc = nil
	file_auth_v1_auth_proto_goTypes = nil
	file_auth_v1_auth_proto_depIdxs = nil
}
