// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/v1/acl.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Operation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Operation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Operation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OperationMultiError, or nil
// if none found.
func (m *Operation) ValidateAll() error {
	return m.validate(true)
}

func (m *Operation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Action

	if all {
		switch v := interface{}(m.GetPaths()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperationValidationError{
					field:  "Paths",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperationValidationError{
					field:  "Paths",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaths()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperationValidationError{
				field:  "Paths",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OperationMultiError(errors)
	}

	return nil
}

// OperationMultiError is an error wrapping multiple validation errors returned
// by Operation.ValidateAll() if the designated constraints aren't met.
type OperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationMultiError) AllErrors() []error { return m }

// OperationValidationError is the validation error returned by
// Operation.Validate if the designated constraints aren't met.
type OperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationValidationError) ErrorName() string { return "OperationValidationError" }

// Error satisfies the builtin error interface
func (e OperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationValidationError{}

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PolicyMultiError, or nil if none found.
func (m *Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Policy.(type) {
	case *Policy_Roles:
		if v == nil {
			err := PolicyValidationError{
				field:  "Policy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRoles()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "Roles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "Roles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRoles()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					field:  "Roles",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Policy_Membership:
		if v == nil {
			err := PolicyValidationError{
				field:  "Policy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMembership()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "Membership",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "Membership",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMembership()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Policy_Object_:
		if v == nil {
			err := PolicyValidationError{
				field:  "Policy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Policy_ObjectField_:
		if v == nil {
			err := PolicyValidationError{
				field:  "Policy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetObjectField()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "ObjectField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "ObjectField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObjectField()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					field:  "ObjectField",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PolicyMultiError(errors)
	}

	return nil
}

// PolicyMultiError is an error wrapping multiple validation errors returned by
// Policy.ValidateAll() if the designated constraints aren't met.
type PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyMultiError) AllErrors() []error { return m }

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyValidationError) ErrorName() string { return "PolicyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyValidationError{}

// Validate checks the field values on PathPermission with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PathPermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PathPermission with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PathPermissionMultiError,
// or nil if none found.
func (m *PathPermission) ValidateAll() error {
	return m.validate(true)
}

func (m *PathPermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for AllowSubPaths

	{
		sorted_keys := make([]string, len(m.GetSubPaths()))
		i := 0
		for key := range m.GetSubPaths() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetSubPaths()[key]
			_ = val

			// no validation rules for SubPaths[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PathPermissionValidationError{
							field:  fmt.Sprintf("SubPaths[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PathPermissionValidationError{
							field:  fmt.Sprintf("SubPaths[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PathPermissionValidationError{
						field:  fmt.Sprintf("SubPaths[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PathPermissionValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PathPermissionValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PathPermissionValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PathPermissionMultiError(errors)
	}

	return nil
}

// PathPermissionMultiError is an error wrapping multiple validation errors
// returned by PathPermission.ValidateAll() if the designated constraints
// aren't met.
type PathPermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PathPermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PathPermissionMultiError) AllErrors() []error { return m }

// PathPermissionValidationError is the validation error returned by
// PathPermission.Validate if the designated constraints aren't met.
type PathPermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PathPermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PathPermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PathPermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PathPermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PathPermissionValidationError) ErrorName() string { return "PathPermissionValidationError" }

// Error satisfies the builtin error interface
func (e PathPermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPathPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PathPermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PathPermissionValidationError{}

// Validate checks the field values on Policy_Permissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Policy_Permissions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Policy_Permissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Policy_PermissionsMultiError, or nil if none found.
func (m *Policy_Permissions) ValidateAll() error {
	return m.validate(true)
}

func (m *Policy_Permissions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for View

	// no validation rules for Create

	// no validation rules for Edit

	// no validation rules for Delete

	if len(errors) > 0 {
		return Policy_PermissionsMultiError(errors)
	}

	return nil
}

// Policy_PermissionsMultiError is an error wrapping multiple validation errors
// returned by Policy_Permissions.ValidateAll() if the designated constraints
// aren't met.
type Policy_PermissionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Policy_PermissionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Policy_PermissionsMultiError) AllErrors() []error { return m }

// Policy_PermissionsValidationError is the validation error returned by
// Policy_Permissions.Validate if the designated constraints aren't met.
type Policy_PermissionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Policy_PermissionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Policy_PermissionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Policy_PermissionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Policy_PermissionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Policy_PermissionsValidationError) ErrorName() string {
	return "Policy_PermissionsValidationError"
}

// Error satisfies the builtin error interface
func (e Policy_PermissionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy_Permissions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Policy_PermissionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Policy_PermissionsValidationError{}

// Validate checks the field values on Policy_Object with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Policy_Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Policy_Object with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Policy_ObjectMultiError, or
// nil if none found.
func (m *Policy_Object) ValidateAll() error {
	return m.validate(true)
}

func (m *Policy_Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for View

	// no validation rules for Create

	// no validation rules for Delete

	// no validation rules for ViewHistory

	// no validation rules for HiddenTx

	if len(errors) > 0 {
		return Policy_ObjectMultiError(errors)
	}

	return nil
}

// Policy_ObjectMultiError is an error wrapping multiple validation errors
// returned by Policy_Object.ValidateAll() if the designated constraints
// aren't met.
type Policy_ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Policy_ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Policy_ObjectMultiError) AllErrors() []error { return m }

// Policy_ObjectValidationError is the validation error returned by
// Policy_Object.Validate if the designated constraints aren't met.
type Policy_ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Policy_ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Policy_ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Policy_ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Policy_ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Policy_ObjectValidationError) ErrorName() string { return "Policy_ObjectValidationError" }

// Error satisfies the builtin error interface
func (e Policy_ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy_Object.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Policy_ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Policy_ObjectValidationError{}

// Validate checks the field values on Policy_ObjectField with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Policy_ObjectField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Policy_ObjectField with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Policy_ObjectFieldMultiError, or nil if none found.
func (m *Policy_ObjectField) ValidateAll() error {
	return m.validate(true)
}

func (m *Policy_ObjectField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for View

	// no validation rules for Edit

	// no validation rules for SuggestEdit

	// no validation rules for SuggestApprove

	// no validation rules for SuggestReject

	if len(errors) > 0 {
		return Policy_ObjectFieldMultiError(errors)
	}

	return nil
}

// Policy_ObjectFieldMultiError is an error wrapping multiple validation errors
// returned by Policy_ObjectField.ValidateAll() if the designated constraints
// aren't met.
type Policy_ObjectFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Policy_ObjectFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Policy_ObjectFieldMultiError) AllErrors() []error { return m }

// Policy_ObjectFieldValidationError is the validation error returned by
// Policy_ObjectField.Validate if the designated constraints aren't met.
type Policy_ObjectFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Policy_ObjectFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Policy_ObjectFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Policy_ObjectFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Policy_ObjectFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Policy_ObjectFieldValidationError) ErrorName() string {
	return "Policy_ObjectFieldValidationError"
}

// Error satisfies the builtin error interface
func (e Policy_ObjectFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy_ObjectField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Policy_ObjectFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Policy_ObjectFieldValidationError{}
