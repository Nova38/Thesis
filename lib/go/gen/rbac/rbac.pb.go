// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: rbac/rbac.proto

package rbac

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nova38/thesis/lib/go/gen/key"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	typepb "google.golang.org/protobuf/types/known/typepb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operations_Domain int32

const (
	Operations_DOMAIN_UNSPECIFIED  Operations_Domain = 0
	Operations_DOMAIN_COLLECTION   Operations_Domain = 1
	Operations_DOMAIN_OBJECT       Operations_Domain = 2
	Operations_DOMAIN_OBJECT_FIELD Operations_Domain = 3
)

// Enum value maps for Operations_Domain.
var (
	Operations_Domain_name = map[int32]string{
		0: "DOMAIN_UNSPECIFIED",
		1: "DOMAIN_COLLECTION",
		2: "DOMAIN_OBJECT",
		3: "DOMAIN_OBJECT_FIELD",
	}
	Operations_Domain_value = map[string]int32{
		"DOMAIN_UNSPECIFIED":  0,
		"DOMAIN_COLLECTION":   1,
		"DOMAIN_OBJECT":       2,
		"DOMAIN_OBJECT_FIELD": 3,
	}
)

func (x Operations_Domain) Enum() *Operations_Domain {
	p := new(Operations_Domain)
	*p = x
	return p
}

func (x Operations_Domain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operations_Domain) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_rbac_proto_enumTypes[0].Descriptor()
}

func (Operations_Domain) Type() protoreflect.EnumType {
	return &file_rbac_rbac_proto_enumTypes[0]
}

func (x Operations_Domain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operations_Domain.Descriptor instead.
func (Operations_Domain) EnumDescriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{2, 0}
}

type Operations_Action_Type int32

const (
	Operations_Action_TYPE_UNSPECIFIED     Operations_Action_Type = 0
	Operations_Action_TYPE_VIEW            Operations_Action_Type = 1
	Operations_Action_TYPE_EDIT            Operations_Action_Type = 2
	Operations_Action_TYPE_SUGGEST_EDIT    Operations_Action_Type = 3
	Operations_Action_TYPE_SUGGEST_APPROVE Operations_Action_Type = 4
	Operations_Action_TYPE_SUGGEST_REJECT  Operations_Action_Type = 5
	Operations_Action_TYPE_CREATE          Operations_Action_Type = 6
	Operations_Action_TYPE_DELETE          Operations_Action_Type = 7
	Operations_Action_TYPE_HIDDEN_TX       Operations_Action_Type = 8
	Operations_Action_TYPE_INIT            Operations_Action_Type = 9
)

// Enum value maps for Operations_Action_Type.
var (
	Operations_Action_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_VIEW",
		2: "TYPE_EDIT",
		3: "TYPE_SUGGEST_EDIT",
		4: "TYPE_SUGGEST_APPROVE",
		5: "TYPE_SUGGEST_REJECT",
		6: "TYPE_CREATE",
		7: "TYPE_DELETE",
		8: "TYPE_HIDDEN_TX",
		9: "TYPE_INIT",
	}
	Operations_Action_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":     0,
		"TYPE_VIEW":            1,
		"TYPE_EDIT":            2,
		"TYPE_SUGGEST_EDIT":    3,
		"TYPE_SUGGEST_APPROVE": 4,
		"TYPE_SUGGEST_REJECT":  5,
		"TYPE_CREATE":          6,
		"TYPE_DELETE":          7,
		"TYPE_HIDDEN_TX":       8,
		"TYPE_INIT":            9,
	}
)

func (x Operations_Action_Type) Enum() *Operations_Action_Type {
	p := new(Operations_Action_Type)
	*p = x
	return p
}

func (x Operations_Action_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operations_Action_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_rbac_proto_enumTypes[1].Descriptor()
}

func (Operations_Action_Type) Type() protoreflect.EnumType {
	return &file_rbac_rbac_proto_enumTypes[1]
}

func (x Operations_Action_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operations_Action_Type.Descriptor instead.
func (Operations_Action_Type) EnumDescriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{2, 0, 0}
}

type StateActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId      string                 `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Note      string                 `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId    *User_Id               `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *StateActivity) Reset() {
	*x = StateActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateActivity) ProtoMessage() {}

func (x *StateActivity) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateActivity.ProtoReflect.Descriptor instead.
func (*StateActivity) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *StateActivity) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *StateActivity) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *StateActivity) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StateActivity) GetUserId() *User_Id {
	if x != nil {
		return x.UserId
	}
	return nil
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Collection_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The namespace of the object
	ObjectNamespace string `protobuf:"bytes,2,opt,name=object_namespace,json=objectNamespace,proto3" json:"object_namespace,omitempty"`
	// protobuf message descriptor
	// google.protobuf.Type object_type = 3 [(buf.validate.field).required = true];
	ObjectType *typepb.Type `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	// Declared Roles for the collection
	//   - The key is the role id
	//   - The value is the role name
	Roles    map[int32]string `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RoleNums []int32          `protobuf:"varint,9,rep,packed,name=role_nums,json=roleNums,proto3" json:"role_nums,omitempty"`
	// Declared Permissions for the permissions of all roles in the collection
	Acl map[int32]*Collection_ACL `protobuf:"bytes,5,rep,name=acl,proto3" json:"acl,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *Collection) GetId() *Collection_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Collection) GetObjectNamespace() string {
	if x != nil {
		return x.ObjectNamespace
	}
	return ""
}

func (x *Collection) GetObjectType() *typepb.Type {
	if x != nil {
		return x.ObjectType
	}
	return nil
}

func (x *Collection) GetRoles() map[int32]string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Collection) GetRoleNums() []int32 {
	if x != nil {
		return x.RoleNums
	}
	return nil
}

func (x *Collection) GetAcl() map[int32]*Collection_ACL {
	if x != nil {
		return x.Acl
	}
	return nil
}

type Operations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain Operations_Domain  `protobuf:"varint,1,opt,name=domain,proto3,enum=rbac.Operations_Domain" json:"domain,omitempty"`
	Action *Operations_Action `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Operations) Reset() {
	*x = Operations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operations) ProtoMessage() {}

func (x *Operations) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operations.ProtoReflect.Descriptor instead.
func (*Operations) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *Operations) GetDomain() Operations_Domain {
	if x != nil {
		return x.Domain
	}
	return Operations_DOMAIN_UNSPECIFIED
}

func (x *Operations) GetAction() *Operations_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

// Users are a special type of object
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *User_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Key is the collectionID
	Roles    map[string]int32 `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Metadata *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetId() *User_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetRoles() map[string]int32 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *User) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Collection_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *Collection_Id) Reset() {
	*x = Collection_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_Id) ProtoMessage() {}

func (x *Collection_Id) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_Id.ProtoReflect.Descriptor instead.
func (*Collection_Id) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Collection_Id) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type Collection_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Collection `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Collection_List) Reset() {
	*x = Collection_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_List) ProtoMessage() {}

func (x *Collection_List) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_List.ProtoReflect.Descriptor instead.
func (*Collection_List) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Collection_List) GetItems() []*Collection {
	if x != nil {
		return x.Items
	}
	return nil
}

type Collection_ACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Declared Permissions for the permissions of all roles in the collection
	//   - The value is the permissions for the role
	RolePermissions *Operations_Membership `protobuf:"bytes,5,opt,name=role_permissions,json=rolePermissions,proto3" json:"role_permissions,omitempty"`
	// Declared Permissions for the memberships of all roles in the Collection
	//   - The key is the role id
	//   - The value is the permissions for the role
	Memberships *Operations_Membership `protobuf:"bytes,6,opt,name=memberships,proto3" json:"memberships,omitempty"`
	// acl_object are the permissions for the object
	// Keys must be valid role ids defined in the roles map
	Object *Operations_Object `protobuf:"bytes,7,opt,name=object,proto3" json:"object,omitempty"`
	//	ObjectField Permissions
	//
	// Key must be a valid field path in the object descriptor
	ObjectPaths map[string]*Operations_PathRolePermission `protobuf:"bytes,8,rep,name=object_paths,json=objectPaths,proto3" json:"object_paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Collection_ACL) Reset() {
	*x = Collection_ACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_ACL) ProtoMessage() {}

func (x *Collection_ACL) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_ACL.ProtoReflect.Descriptor instead.
func (*Collection_ACL) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Collection_ACL) GetRolePermissions() *Operations_Membership {
	if x != nil {
		return x.RolePermissions
	}
	return nil
}

func (x *Collection_ACL) GetMemberships() *Operations_Membership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

func (x *Collection_ACL) GetObject() *Operations_Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *Collection_ACL) GetObjectPaths() map[string]*Operations_PathRolePermission {
	if x != nil {
		return x.ObjectPaths
	}
	return nil
}

type Operations_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Operations_Action_Type `protobuf:"varint,1,opt,name=type,proto3,enum=rbac.Operations_Action_Type" json:"type,omitempty"`
	Paths *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=paths,proto3" json:"paths,omitempty"`
}

func (x *Operations_Action) Reset() {
	*x = Operations_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operations_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operations_Action) ProtoMessage() {}

func (x *Operations_Action) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operations_Action.ProtoReflect.Descriptor instead.
func (*Operations_Action) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Operations_Action) GetType() Operations_Action_Type {
	if x != nil {
		return x.Type
	}
	return Operations_Action_TYPE_UNSPECIFIED
}

func (x *Operations_Action) GetPaths() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Operations_Membership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Edit bool `protobuf:"varint,2,opt,name=edit,proto3" json:"edit,omitempty"`
}

func (x *Operations_Membership) Reset() {
	*x = Operations_Membership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operations_Membership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operations_Membership) ProtoMessage() {}

func (x *Operations_Membership) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operations_Membership.ProtoReflect.Descriptor instead.
func (*Operations_Membership) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Operations_Membership) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *Operations_Membership) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

type Operations_Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View      bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Create    bool `protobuf:"varint,2,opt,name=create,proto3" json:"create,omitempty"`
	Delete    bool `protobuf:"varint,3,opt,name=delete,proto3" json:"delete,omitempty"`
	HiddenTxs bool `protobuf:"varint,4,opt,name=hidden_txs,json=hiddenTxs,proto3" json:"hidden_txs,omitempty"`
}

func (x *Operations_Object) Reset() {
	*x = Operations_Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operations_Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operations_Object) ProtoMessage() {}

func (x *Operations_Object) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operations_Object.ProtoReflect.Descriptor instead.
func (*Operations_Object) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Operations_Object) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *Operations_Object) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *Operations_Object) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *Operations_Object) GetHiddenTxs() bool {
	if x != nil {
		return x.HiddenTxs
	}
	return false
}

type Operations_ObjectField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View           bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Edit           bool `protobuf:"varint,2,opt,name=edit,proto3" json:"edit,omitempty"`
	SuggestEdit    bool `protobuf:"varint,3,opt,name=suggest_edit,json=suggestEdit,proto3" json:"suggest_edit,omitempty"`
	SuggestApprove bool `protobuf:"varint,4,opt,name=suggest_approve,json=suggestApprove,proto3" json:"suggest_approve,omitempty"`
	SuggestReject  bool `protobuf:"varint,5,opt,name=suggest_reject,json=suggestReject,proto3" json:"suggest_reject,omitempty"`
}

func (x *Operations_ObjectField) Reset() {
	*x = Operations_ObjectField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operations_ObjectField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operations_ObjectField) ProtoMessage() {}

func (x *Operations_ObjectField) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operations_ObjectField.ProtoReflect.Descriptor instead.
func (*Operations_ObjectField) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Operations_ObjectField) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *Operations_ObjectField) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *Operations_ObjectField) GetSuggestEdit() bool {
	if x != nil {
		return x.SuggestEdit
	}
	return false
}

func (x *Operations_ObjectField) GetSuggestApprove() bool {
	if x != nil {
		return x.SuggestApprove
	}
	return false
}

func (x *Operations_ObjectField) GetSuggestReject() bool {
	if x != nil {
		return x.SuggestReject
	}
	return false
}

// This message is the tree node for operations on the state object
type Operations_PathRolePermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path is a sub path of a field mask
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The key is a valid sub path in the collection object descriptor
	SubPaths map[string]*Operations_PathRolePermission `protobuf:"bytes,2,rep,name=sub_paths,json=subPaths,proto3" json:"sub_paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The Key must be a valid role id defined in the roles map
	Acl map[int32]*Operations_ObjectField `protobuf:"bytes,3,rep,name=acl,proto3" json:"acl,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Operations_PathRolePermission) Reset() {
	*x = Operations_PathRolePermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operations_PathRolePermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operations_PathRolePermission) ProtoMessage() {}

func (x *Operations_PathRolePermission) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operations_PathRolePermission.ProtoReflect.Descriptor instead.
func (*Operations_PathRolePermission) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{2, 4}
}

func (x *Operations_PathRolePermission) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Operations_PathRolePermission) GetSubPaths() map[string]*Operations_PathRolePermission {
	if x != nil {
		return x.SubPaths
	}
	return nil
}

func (x *Operations_PathRolePermission) GetAcl() map[int32]*Operations_ObjectField {
	if x != nil {
		return x.Acl
	}
	return nil
}

// The key for the ledger
type User_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *User_Id) Reset() {
	*x = User_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Id) ProtoMessage() {}

func (x *User_Id) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Id.ProtoReflect.Descriptor instead.
func (*User_Id) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{3, 0}
}

func (x *User_Id) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *User_Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type User_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*User `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *User_List) Reset() {
	*x = User_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_List) ProtoMessage() {}

func (x *User_List) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_List.ProtoReflect.Descriptor instead.
func (*User_List) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{3, 1}
}

func (x *User_List) GetItems() []*User {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_rbac_rbac_proto protoreflect.FileDescriptor

var file_rbac_rbac_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x72, 0x62, 0x61, 0x63, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x6b, 0x65, 0x79, 0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x99, 0x08,
	0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x03,
	0x61, 0x63, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x1a, 0x32, 0x0a, 0x02, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x2e, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xec, 0x02,
	0x0a, 0x03, 0x41, 0x43, 0x4c, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0f, 0x72, 0x6f,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x48, 0x0a,
	0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x63, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x08, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0xa2, 0x01, 0xba, 0x48, 0x7b, 0x1a, 0x79, 0x0a, 0x08, 0x41, 0x43,
	0x4c, 0x20, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x43, 0x41, 0x43, 0x4c, 0x5b, 0x52, 0x6f, 0x6c, 0x65,
	0x5d, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x69,
	0x64, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x70, 0x1a, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x72, 0x6f, 0x6c, 0x65, 0x2c, 0x20,
	0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x72,
	0x6f, 0x6c, 0x65, 0x29, 0x29, 0xba, 0xd4, 0x1a, 0x20, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x10, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xe0, 0x09, 0x0a, 0x0a, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb8, 0x02, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x44, 0x49, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45,
	0x4e, 0x5f, 0x54, 0x58, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x10, 0x09, 0x1a, 0x34, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x1a, 0x6b, 0x0a, 0x06, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x78, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x0b, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04,
	0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x45,
	0x64, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x1a, 0x81, 0x03, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x46, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x1a,
	0x60, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x54, 0x0a, 0x08, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x63, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x03, 0x22, 0xf0, 0x02, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x02, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x28, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x1f,
	0xba, 0xd4, 0x1a, 0x1b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x09, 0x69,
	0x64, 0x2e, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x0a, 0x05, 0x69, 0x64, 0x2e, 0x69, 0x64, 0x42,
	0x6f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x42, 0x09, 0x52, 0x62, 0x61,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x76, 0x61, 0x33, 0x38, 0x2f, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x62,
	0x61, 0x63, 0xa2, 0x02, 0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x04, 0x52, 0x62, 0x61, 0x63, 0xca,
	0x02, 0x04, 0x52, 0x62, 0x61, 0x63, 0xe2, 0x02, 0x10, 0x52, 0x62, 0x61, 0x63, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x04, 0x52, 0x62, 0x61, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rbac_rbac_proto_rawDescOnce sync.Once
	file_rbac_rbac_proto_rawDescData = file_rbac_rbac_proto_rawDesc
)

func file_rbac_rbac_proto_rawDescGZIP() []byte {
	file_rbac_rbac_proto_rawDescOnce.Do(func() {
		file_rbac_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(file_rbac_rbac_proto_rawDescData)
	})
	return file_rbac_rbac_proto_rawDescData
}

var file_rbac_rbac_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rbac_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_rbac_rbac_proto_goTypes = []interface{}{
	(Operations_Domain)(0),                // 0: rbac.Operations.Domain
	(Operations_Action_Type)(0),           // 1: rbac.Operations.Action.Type
	(*StateActivity)(nil),                 // 2: rbac.StateActivity
	(*Collection)(nil),                    // 3: rbac.Collection
	(*Operations)(nil),                    // 4: rbac.Operations
	(*User)(nil),                          // 5: rbac.User
	(*Collection_Id)(nil),                 // 6: rbac.Collection.Id
	(*Collection_List)(nil),               // 7: rbac.Collection.List
	(*Collection_ACL)(nil),                // 8: rbac.Collection.ACL
	nil,                                   // 9: rbac.Collection.RolesEntry
	nil,                                   // 10: rbac.Collection.AclEntry
	nil,                                   // 11: rbac.Collection.ACL.ObjectPathsEntry
	(*Operations_Action)(nil),             // 12: rbac.Operations.Action
	(*Operations_Membership)(nil),         // 13: rbac.Operations.Membership
	(*Operations_Object)(nil),             // 14: rbac.Operations.Object
	(*Operations_ObjectField)(nil),        // 15: rbac.Operations.ObjectField
	(*Operations_PathRolePermission)(nil), // 16: rbac.Operations.PathRolePermission
	nil,                                   // 17: rbac.Operations.PathRolePermission.SubPathsEntry
	nil,                                   // 18: rbac.Operations.PathRolePermission.AclEntry
	(*User_Id)(nil),                       // 19: rbac.User.Id
	(*User_List)(nil),                     // 20: rbac.User.List
	nil,                                   // 21: rbac.User.RolesEntry
	(*timestamppb.Timestamp)(nil),         // 22: google.protobuf.Timestamp
	(*typepb.Type)(nil),                   // 23: google.protobuf.Type
	(*structpb.Struct)(nil),               // 24: google.protobuf.Struct
	(*fieldmaskpb.FieldMask)(nil),         // 25: google.protobuf.FieldMask
}
var file_rbac_rbac_proto_depIdxs = []int32{
	22, // 0: rbac.StateActivity.timestamp:type_name -> google.protobuf.Timestamp
	19, // 1: rbac.StateActivity.user_id:type_name -> rbac.User.Id
	6,  // 2: rbac.Collection.id:type_name -> rbac.Collection.Id
	23, // 3: rbac.Collection.object_type:type_name -> google.protobuf.Type
	9,  // 4: rbac.Collection.roles:type_name -> rbac.Collection.RolesEntry
	10, // 5: rbac.Collection.acl:type_name -> rbac.Collection.AclEntry
	0,  // 6: rbac.Operations.domain:type_name -> rbac.Operations.Domain
	12, // 7: rbac.Operations.action:type_name -> rbac.Operations.Action
	19, // 8: rbac.User.id:type_name -> rbac.User.Id
	21, // 9: rbac.User.roles:type_name -> rbac.User.RolesEntry
	24, // 10: rbac.User.metadata:type_name -> google.protobuf.Struct
	3,  // 11: rbac.Collection.List.items:type_name -> rbac.Collection
	13, // 12: rbac.Collection.ACL.role_permissions:type_name -> rbac.Operations.Membership
	13, // 13: rbac.Collection.ACL.memberships:type_name -> rbac.Operations.Membership
	14, // 14: rbac.Collection.ACL.object:type_name -> rbac.Operations.Object
	11, // 15: rbac.Collection.ACL.object_paths:type_name -> rbac.Collection.ACL.ObjectPathsEntry
	8,  // 16: rbac.Collection.AclEntry.value:type_name -> rbac.Collection.ACL
	16, // 17: rbac.Collection.ACL.ObjectPathsEntry.value:type_name -> rbac.Operations.PathRolePermission
	1,  // 18: rbac.Operations.Action.type:type_name -> rbac.Operations.Action.Type
	25, // 19: rbac.Operations.Action.paths:type_name -> google.protobuf.FieldMask
	17, // 20: rbac.Operations.PathRolePermission.sub_paths:type_name -> rbac.Operations.PathRolePermission.SubPathsEntry
	18, // 21: rbac.Operations.PathRolePermission.acl:type_name -> rbac.Operations.PathRolePermission.AclEntry
	16, // 22: rbac.Operations.PathRolePermission.SubPathsEntry.value:type_name -> rbac.Operations.PathRolePermission
	15, // 23: rbac.Operations.PathRolePermission.AclEntry.value:type_name -> rbac.Operations.ObjectField
	5,  // 24: rbac.User.List.items:type_name -> rbac.User
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_rbac_rbac_proto_init() }
func file_rbac_rbac_proto_init() {
	if File_rbac_rbac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rbac_rbac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_ACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operations_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operations_Membership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operations_Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operations_ObjectField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operations_PathRolePermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rbac_rbac_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rbac_rbac_proto_goTypes,
		DependencyIndexes: file_rbac_rbac_proto_depIdxs,
		EnumInfos:         file_rbac_rbac_proto_enumTypes,
		MessageInfos:      file_rbac_rbac_proto_msgTypes,
	}.Build()
	File_rbac_rbac_proto = out.File
	file_rbac_rbac_proto_rawDesc = nil
	file_rbac_rbac_proto_goTypes = nil
	file_rbac_rbac_proto_depIdxs = nil
}
