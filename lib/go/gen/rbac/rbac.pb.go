// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: rbac/rbac.proto

package rbac

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nova38/thesis/lib/go/gen/hlf"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error int32

const (
	Error_ERROR_UNSPECIFIED     Error = 0
	Error_ERROR_REQUEST_INVALID Error = 1
	Error_ERROR_RUNTIME         Error = 2
	Error_ERROR_RUNTIME_BAD_OPS Error = 3
	// The collection id is invalid
	Error_ERROR_COLLECTION_INVALID_ID Error = 11
	// The collection is not registered
	Error_ERROR_COLLECTION_UNREGISTERED Error = 12
	// The collection is already registered
	Error_ERROR_COLLECTION_ALREADY_REGISTERED Error = 13
	// The Collection is invalid
	Error_ERROR_COLLECTION_INVALID Error = 14
	// The object type name is invalid
	Error_ERROR_COLLECTION_INVALID_OBJECT_TYPE Error = 15
	// The role id is invalid
	Error_ERROR_COLLECTION_INVALID_ROLE_ID Error = 16
	// The user does not have permission to perform the operation
	Error_ERROR_USER_INVALID_ID Error = 20
	// The user is not registered
	Error_ERROR_USER_UNREGISTERED Error = 21
	// The user is already registered
	Error_ERROR_USER_ALREADY_REGISTERED Error = 22
	// The user is invalid
	Error_ERROR_USER_INVALID Error = 23
	// The user does not have a role in the collection
	Error_ERROR_USER_NO_ROLE Error = 24
	// The user has a deleted role in the collection
	Error_ERROR_USER_DELETED_ROLE Error = 25
	// The user does not have permission to perform the operation
	Error_ERROR_USER_PERMISSION_DENIED Error = 26
	// The object id is invalid
	Error_ERROR_OBJECT_INVALID_ID Error = 31
	// The object is not registered
	Error_ERROR_OBJECT_UNREGISTERED Error = 32
	// The object is already registered
	Error_ERROR_OBJECT_ALREADY_REGISTERED Error = 33
	// The object is invalid
	Error_ERROR_OBJECT_INVALID Error = 34
	//
	Error_ERROR_INVALID_OBJECT_FIELD_PATH  Error = 35
	Error_ERROR_INVALID_OBJECT_FIELD_VALUE Error = 36
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0:  "ERROR_UNSPECIFIED",
		1:  "ERROR_REQUEST_INVALID",
		2:  "ERROR_RUNTIME",
		3:  "ERROR_RUNTIME_BAD_OPS",
		11: "ERROR_COLLECTION_INVALID_ID",
		12: "ERROR_COLLECTION_UNREGISTERED",
		13: "ERROR_COLLECTION_ALREADY_REGISTERED",
		14: "ERROR_COLLECTION_INVALID",
		15: "ERROR_COLLECTION_INVALID_OBJECT_TYPE",
		16: "ERROR_COLLECTION_INVALID_ROLE_ID",
		20: "ERROR_USER_INVALID_ID",
		21: "ERROR_USER_UNREGISTERED",
		22: "ERROR_USER_ALREADY_REGISTERED",
		23: "ERROR_USER_INVALID",
		24: "ERROR_USER_NO_ROLE",
		25: "ERROR_USER_DELETED_ROLE",
		26: "ERROR_USER_PERMISSION_DENIED",
		31: "ERROR_OBJECT_INVALID_ID",
		32: "ERROR_OBJECT_UNREGISTERED",
		33: "ERROR_OBJECT_ALREADY_REGISTERED",
		34: "ERROR_OBJECT_INVALID",
		35: "ERROR_INVALID_OBJECT_FIELD_PATH",
		36: "ERROR_INVALID_OBJECT_FIELD_VALUE",
	}
	Error_value = map[string]int32{
		"ERROR_UNSPECIFIED":                    0,
		"ERROR_REQUEST_INVALID":                1,
		"ERROR_RUNTIME":                        2,
		"ERROR_RUNTIME_BAD_OPS":                3,
		"ERROR_COLLECTION_INVALID_ID":          11,
		"ERROR_COLLECTION_UNREGISTERED":        12,
		"ERROR_COLLECTION_ALREADY_REGISTERED":  13,
		"ERROR_COLLECTION_INVALID":             14,
		"ERROR_COLLECTION_INVALID_OBJECT_TYPE": 15,
		"ERROR_COLLECTION_INVALID_ROLE_ID":     16,
		"ERROR_USER_INVALID_ID":                20,
		"ERROR_USER_UNREGISTERED":              21,
		"ERROR_USER_ALREADY_REGISTERED":        22,
		"ERROR_USER_INVALID":                   23,
		"ERROR_USER_NO_ROLE":                   24,
		"ERROR_USER_DELETED_ROLE":              25,
		"ERROR_USER_PERMISSION_DENIED":         26,
		"ERROR_OBJECT_INVALID_ID":              31,
		"ERROR_OBJECT_UNREGISTERED":            32,
		"ERROR_OBJECT_ALREADY_REGISTERED":      33,
		"ERROR_OBJECT_INVALID":                 34,
		"ERROR_INVALID_OBJECT_FIELD_PATH":      35,
		"ERROR_INVALID_OBJECT_FIELD_VALUE":     36,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_rbac_proto_enumTypes[0].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_rbac_rbac_proto_enumTypes[0]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{0}
}

type ACL_Domain int32

const (
	ACL_DOMAIN_UNSPECIFIED ACL_Domain = 0
	// Meta create
	ACL_DOMAIN_COLLECTION            ACL_Domain = 1
	ACL_DOMAIN_COLLECTION_MEMBERSHIP ACL_Domain = 2
	ACL_DOMAIN_COLLECTION_PERMISSION ACL_Domain = 3
	ACL_DOMAIN_COLLECTION_ROLES      ACL_Domain = 4
	ACL_DOMAIN_USER                  ACL_Domain = 5
	ACL_DOMAIN_OBJECT                ACL_Domain = 6
	ACL_DOMAIN_OBJECT_FIELD          ACL_Domain = 7
	ACL_DOMAIN_TEST                  ACL_Domain = 100 // Test
)

// Enum value maps for ACL_Domain.
var (
	ACL_Domain_name = map[int32]string{
		0:   "DOMAIN_UNSPECIFIED",
		1:   "DOMAIN_COLLECTION",
		2:   "DOMAIN_COLLECTION_MEMBERSHIP",
		3:   "DOMAIN_COLLECTION_PERMISSION",
		4:   "DOMAIN_COLLECTION_ROLES",
		5:   "DOMAIN_USER",
		6:   "DOMAIN_OBJECT",
		7:   "DOMAIN_OBJECT_FIELD",
		100: "DOMAIN_TEST",
	}
	ACL_Domain_value = map[string]int32{
		"DOMAIN_UNSPECIFIED":           0,
		"DOMAIN_COLLECTION":            1,
		"DOMAIN_COLLECTION_MEMBERSHIP": 2,
		"DOMAIN_COLLECTION_PERMISSION": 3,
		"DOMAIN_COLLECTION_ROLES":      4,
		"DOMAIN_USER":                  5,
		"DOMAIN_OBJECT":                6,
		"DOMAIN_OBJECT_FIELD":          7,
		"DOMAIN_TEST":                  100,
	}
)

func (x ACL_Domain) Enum() *ACL_Domain {
	p := new(ACL_Domain)
	*p = x
	return p
}

func (x ACL_Domain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACL_Domain) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_rbac_proto_enumTypes[1].Descriptor()
}

func (ACL_Domain) Type() protoreflect.EnumType {
	return &file_rbac_rbac_proto_enumTypes[1]
}

func (x ACL_Domain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACL_Domain.Descriptor instead.
func (ACL_Domain) EnumDescriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{0, 0}
}

type ACL_Action int32

const (
	ACL_ACTION_UNSPECIFIED     ACL_Action = 0   // Default
	ACL_ACTION_VIEW            ACL_Action = 1   // View
	ACL_ACTION_CREATE          ACL_Action = 2   // Create
	ACL_ACTION_DELETE          ACL_Action = 3   // Delete
	ACL_ACTION_EDIT            ACL_Action = 4   // Edit/Update
	ACL_ACTION_VIEW_SUGGEST    ACL_Action = 5   // View the suggested update to the object
	ACL_ACTION_SUGGEST_EDIT    ACL_Action = 6   // Suggest an update to the object
	ACL_ACTION_SUGGEST_APPROVE ACL_Action = 7   // Approve the suggested update
	ACL_ACTION_SUGGEST_REJECT  ACL_Action = 8   // Reject the suggested update
	ACL_ACTION_VIEW_HISTORY    ACL_Action = 9   // View the history of the object
	ACL_ACTION_HIDDEN_TX       ACL_Action = 10  // view, hide, unhide
	ACL_ACTION_TEST            ACL_Action = 100 // Test
)

// Enum value maps for ACL_Action.
var (
	ACL_Action_name = map[int32]string{
		0:   "ACTION_UNSPECIFIED",
		1:   "ACTION_VIEW",
		2:   "ACTION_CREATE",
		3:   "ACTION_DELETE",
		4:   "ACTION_EDIT",
		5:   "ACTION_VIEW_SUGGEST",
		6:   "ACTION_SUGGEST_EDIT",
		7:   "ACTION_SUGGEST_APPROVE",
		8:   "ACTION_SUGGEST_REJECT",
		9:   "ACTION_VIEW_HISTORY",
		10:  "ACTION_HIDDEN_TX",
		100: "ACTION_TEST",
	}
	ACL_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED":     0,
		"ACTION_VIEW":            1,
		"ACTION_CREATE":          2,
		"ACTION_DELETE":          3,
		"ACTION_EDIT":            4,
		"ACTION_VIEW_SUGGEST":    5,
		"ACTION_SUGGEST_EDIT":    6,
		"ACTION_SUGGEST_APPROVE": 7,
		"ACTION_SUGGEST_REJECT":  8,
		"ACTION_VIEW_HISTORY":    9,
		"ACTION_HIDDEN_TX":       10,
		"ACTION_TEST":            100,
	}
)

func (x ACL_Action) Enum() *ACL_Action {
	p := new(ACL_Action)
	*p = x
	return p
}

func (x ACL_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACL_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_rbac_proto_enumTypes[2].Descriptor()
}

func (ACL_Action) Type() protoreflect.EnumType {
	return &file_rbac_rbac_proto_enumTypes[2]
}

func (x ACL_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACL_Action.Descriptor instead.
func (ACL_Action) EnumDescriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{0, 1}
}

// The ACL will be defined in a map per role
type ACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The permissions for modifications to valid roles in the collection
	// # Policy
	//   - Maps to the domain: DOMAIN_COLLECTION_ROLES
	RoleDefs *ACL_Policy_Roles `protobuf:"bytes,1,opt,name=role_defs,json=roleDefs,proto3" json:"role_defs,omitempty"`
	// The permissions for modifications the permissions of a role
	// # Policy
	//   - Maps to the domain: DOMAIN_COLLECTION_PERMISSION
	RolePermissions *ACL_Policy_Roles `protobuf:"bytes,2,opt,name=role_permissions,json=rolePermissions,proto3" json:"role_permissions,omitempty"`
	// The permissions for modifications user memberships in the collection
	// # Policy
	//   - Maps to the domain: DOMAIN_USER
	Memberships *ACL_Policy_Roles `protobuf:"bytes,3,opt,name=memberships,proto3" json:"memberships,omitempty"`
	// The permissions for modifications to the object
	// # Policy
	//   - Maps to the domain: DOMAIN_OBJECT
	Object *ACL_Policy_Object `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
	// The permissions for modifications to the object's fields
	// # Policy
	//   - Maps to the domain: DOMAIN_OBJECT_FIELD
	ObjectPaths *ACL_PathPermission `protobuf:"bytes,5,opt,name=object_paths,json=objectPaths,proto3" json:"object_paths,omitempty"`
}

func (x *ACL) Reset() {
	*x = ACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL) ProtoMessage() {}

func (x *ACL) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL.ProtoReflect.Descriptor instead.
func (*ACL) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *ACL) GetRoleDefs() *ACL_Policy_Roles {
	if x != nil {
		return x.RoleDefs
	}
	return nil
}

func (x *ACL) GetRolePermissions() *ACL_Policy_Roles {
	if x != nil {
		return x.RolePermissions
	}
	return nil
}

func (x *ACL) GetMemberships() *ACL_Policy_Roles {
	if x != nil {
		return x.Memberships
	}
	return nil
}

func (x *ACL) GetObject() *ACL_Policy_Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ACL) GetObjectPaths() *ACL_PathPermission {
	if x != nil {
		return x.ObjectPaths
	}
	return nil
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key for the ledger
	Id *Collection_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The namespace of the object
	ObjectNamespace string `protobuf:"bytes,2,opt,name=object_namespace,json=objectNamespace,proto3" json:"object_namespace,omitempty"`
	// The full name of the object type
	// must be a valid protobuf message type
	ObjectType string `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	// Declared Roles for the collection
	//   - The key is the role id
	//   - The value is the role name
	Roles map[string]string `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Declared Permissions for the permissions of all roles in the collection
	Acl map[string]*ACL `protobuf:"bytes,5,rep,name=acl,proto3" json:"acl,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *Collection) GetId() *Collection_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Collection) GetObjectNamespace() string {
	if x != nil {
		return x.ObjectNamespace
	}
	return ""
}

func (x *Collection) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *Collection) GetRoles() map[string]string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Collection) GetAcl() map[string]*ACL {
	if x != nil {
		return x.Acl
	}
	return nil
}

// Users are a special type of object
// buf:lint:ignore MESSAGE_NO_DELETE
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key for the ledger
	Id   *User_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Key is the collectionID
	Roles    map[string]*User_Role `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metadata map[string]string     `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetId() *User_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetRoles() map[string]*User_Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *User) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type StateActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId      string                 `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Note      string                 `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId    *User_Id               `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *StateActivity) Reset() {
	*x = StateActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateActivity) ProtoMessage() {}

func (x *StateActivity) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateActivity.ProtoReflect.Descriptor instead.
func (*StateActivity) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *StateActivity) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *StateActivity) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *StateActivity) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StateActivity) GetUserId() *User_Id {
	if x != nil {
		return x.UserId
	}
	return nil
}

type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*History_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{4}
}

func (x *History) GetEntries() []*History_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ACL_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain ACL_Domain             `protobuf:"varint,1,opt,name=domain,proto3,enum=rbac.ACL_Domain" json:"domain,omitempty"`
	Action ACL_Action             `protobuf:"varint,2,opt,name=action,proto3,enum=rbac.ACL_Action" json:"action,omitempty"`
	Paths  *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=paths,proto3" json:"paths,omitempty"`
}

func (x *ACL_Operation) Reset() {
	*x = ACL_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Operation) ProtoMessage() {}

func (x *ACL_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Operation.ProtoReflect.Descriptor instead.
func (*ACL_Operation) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ACL_Operation) GetDomain() ACL_Domain {
	if x != nil {
		return x.Domain
	}
	return ACL_DOMAIN_UNSPECIFIED
}

func (x *ACL_Operation) GetAction() ACL_Action {
	if x != nil {
		return x.Action
	}
	return ACL_ACTION_UNSPECIFIED
}

func (x *ACL_Operation) GetPaths() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Paths
	}
	return nil
}

// Types of Policies for the ACL
type ACL_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//
	//	*ACL_Policy_Roles_
	//	*ACL_Policy_Membership
	//	*ACL_Policy_Object_
	//	*ACL_Policy_ObjectField_
	Policy isACL_Policy_Policy `protobuf_oneof:"policy"`
}

func (x *ACL_Policy) Reset() {
	*x = ACL_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Policy) ProtoMessage() {}

func (x *ACL_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Policy.ProtoReflect.Descriptor instead.
func (*ACL_Policy) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ACL_Policy) GetPolicy() isACL_Policy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *ACL_Policy) GetRoles() *ACL_Policy_Roles {
	if x, ok := x.GetPolicy().(*ACL_Policy_Roles_); ok {
		return x.Roles
	}
	return nil
}

func (x *ACL_Policy) GetMembership() *ACL_Policy_Roles {
	if x, ok := x.GetPolicy().(*ACL_Policy_Membership); ok {
		return x.Membership
	}
	return nil
}

func (x *ACL_Policy) GetObject() *ACL_Policy_Object {
	if x, ok := x.GetPolicy().(*ACL_Policy_Object_); ok {
		return x.Object
	}
	return nil
}

func (x *ACL_Policy) GetObjectField() *ACL_Policy_ObjectField {
	if x, ok := x.GetPolicy().(*ACL_Policy_ObjectField_); ok {
		return x.ObjectField
	}
	return nil
}

type isACL_Policy_Policy interface {
	isACL_Policy_Policy()
}

type ACL_Policy_Roles_ struct {
	Roles *ACL_Policy_Roles `protobuf:"bytes,1,opt,name=roles,proto3,oneof"`
}

type ACL_Policy_Membership struct {
	Membership *ACL_Policy_Roles `protobuf:"bytes,2,opt,name=membership,proto3,oneof"`
}

type ACL_Policy_Object_ struct {
	Object *ACL_Policy_Object `protobuf:"bytes,3,opt,name=object,proto3,oneof"`
}

type ACL_Policy_ObjectField_ struct {
	ObjectField *ACL_Policy_ObjectField `protobuf:"bytes,4,opt,name=object_field,json=objectField,proto3,oneof"`
}

func (*ACL_Policy_Roles_) isACL_Policy_Policy() {}

func (*ACL_Policy_Membership) isACL_Policy_Policy() {}

func (*ACL_Policy_Object_) isACL_Policy_Policy() {}

func (*ACL_Policy_ObjectField_) isACL_Policy_Policy() {}

// This message is the tree node for operations on the state object
type ACL_PathPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path is a sub path of a field mask
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	AllowSubPaths bool   `protobuf:"varint,2,opt,name=allow_sub_paths,json=allowSubPaths,proto3" json:"allow_sub_paths,omitempty"`
	// The key is a valid sub path in the type of state object
	SubPaths map[string]*ACL_PathPermission `protobuf:"bytes,3,rep,name=sub_paths,json=subPaths,proto3" json:"sub_paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The Key must be a valid role id defined in the roles map
	Policy *ACL_Policy_ObjectField `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *ACL_PathPermission) Reset() {
	*x = ACL_PathPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_PathPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_PathPermission) ProtoMessage() {}

func (x *ACL_PathPermission) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_PathPermission.ProtoReflect.Descriptor instead.
func (*ACL_PathPermission) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ACL_PathPermission) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ACL_PathPermission) GetAllowSubPaths() bool {
	if x != nil {
		return x.AllowSubPaths
	}
	return false
}

func (x *ACL_PathPermission) GetSubPaths() map[string]*ACL_PathPermission {
	if x != nil {
		return x.SubPaths
	}
	return nil
}

func (x *ACL_PathPermission) GetPolicy() *ACL_Policy_ObjectField {
	if x != nil {
		return x.Policy
	}
	return nil
}

// Policy for altering the membership of a role or perms of a role
type ACL_Policy_Roles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View   bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Create bool `protobuf:"varint,2,opt,name=create,proto3" json:"create,omitempty"`
	Edit   bool `protobuf:"varint,3,opt,name=edit,proto3" json:"edit,omitempty"`
	Delete bool `protobuf:"varint,4,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *ACL_Policy_Roles) Reset() {
	*x = ACL_Policy_Roles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Policy_Roles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Policy_Roles) ProtoMessage() {}

func (x *ACL_Policy_Roles) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Policy_Roles.ProtoReflect.Descriptor instead.
func (*ACL_Policy_Roles) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *ACL_Policy_Roles) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *ACL_Policy_Roles) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *ACL_Policy_Roles) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *ACL_Policy_Roles) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Policy for altering the object
type ACL_Policy_Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View        bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Create      bool `protobuf:"varint,2,opt,name=create,proto3" json:"create,omitempty"`
	Delete      bool `protobuf:"varint,3,opt,name=delete,proto3" json:"delete,omitempty"`
	ViewHistory bool `protobuf:"varint,4,opt,name=view_history,json=viewHistory,proto3" json:"view_history,omitempty"`
	HiddenTx    bool `protobuf:"varint,5,opt,name=hidden_tx,json=hiddenTx,proto3" json:"hidden_tx,omitempty"`
}

func (x *ACL_Policy_Object) Reset() {
	*x = ACL_Policy_Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Policy_Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Policy_Object) ProtoMessage() {}

func (x *ACL_Policy_Object) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Policy_Object.ProtoReflect.Descriptor instead.
func (*ACL_Policy_Object) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *ACL_Policy_Object) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *ACL_Policy_Object) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *ACL_Policy_Object) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *ACL_Policy_Object) GetViewHistory() bool {
	if x != nil {
		return x.ViewHistory
	}
	return false
}

func (x *ACL_Policy_Object) GetHiddenTx() bool {
	if x != nil {
		return x.HiddenTx
	}
	return false
}

// Policy for altering the object
type ACL_Policy_ObjectField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View           bool `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Edit           bool `protobuf:"varint,2,opt,name=edit,proto3" json:"edit,omitempty"`
	SuggestEdit    bool `protobuf:"varint,3,opt,name=suggest_edit,json=suggestEdit,proto3" json:"suggest_edit,omitempty"`
	SuggestApprove bool `protobuf:"varint,4,opt,name=suggest_approve,json=suggestApprove,proto3" json:"suggest_approve,omitempty"`
	SuggestReject  bool `protobuf:"varint,5,opt,name=suggest_reject,json=suggestReject,proto3" json:"suggest_reject,omitempty"`
}

func (x *ACL_Policy_ObjectField) Reset() {
	*x = ACL_Policy_ObjectField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Policy_ObjectField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Policy_ObjectField) ProtoMessage() {}

func (x *ACL_Policy_ObjectField) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Policy_ObjectField.ProtoReflect.Descriptor instead.
func (*ACL_Policy_ObjectField) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *ACL_Policy_ObjectField) GetView() bool {
	if x != nil {
		return x.View
	}
	return false
}

func (x *ACL_Policy_ObjectField) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *ACL_Policy_ObjectField) GetSuggestEdit() bool {
	if x != nil {
		return x.SuggestEdit
	}
	return false
}

func (x *ACL_Policy_ObjectField) GetSuggestApprove() bool {
	if x != nil {
		return x.SuggestApprove
	}
	return false
}

func (x *ACL_Policy_ObjectField) GetSuggestReject() bool {
	if x != nil {
		return x.SuggestReject
	}
	return false
}

type Collection_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *Collection_Id) Reset() {
	*x = Collection_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_Id) ProtoMessage() {}

func (x *Collection_Id) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_Id.ProtoReflect.Descriptor instead.
func (*Collection_Id) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Collection_Id) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

// The key for the ledger
type User_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *User_Id) Reset() {
	*x = User_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Id) ProtoMessage() {}

func (x *User_Id) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Id.ProtoReflect.Descriptor instead.
func (*User_Id) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{2, 0}
}

func (x *User_Id) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *User_Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type User_Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId *Collection_Id `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	RoleId       string         `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	GrantedBy    *User_Id       `protobuf:"bytes,3,opt,name=granted_by,json=grantedBy,proto3" json:"granted_by,omitempty"`
}

func (x *User_Role) Reset() {
	*x = User_Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Role) ProtoMessage() {}

func (x *User_Role) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Role.ProtoReflect.Descriptor instead.
func (*User_Role) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{2, 1}
}

func (x *User_Role) GetCollectionId() *Collection_Id {
	if x != nil {
		return x.CollectionId
	}
	return nil
}

func (x *User_Role) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *User_Role) GetGrantedBy() *User_Id {
	if x != nil {
		return x.GrantedBy
	}
	return nil
}

type History_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId      string                 `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsDeleted bool                   `protobuf:"varint,3,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	IsHidden  bool                   `protobuf:"varint,4,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	State     *anypb.Any             `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *History_Entry) Reset() {
	*x = History_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_rbac_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History_Entry) ProtoMessage() {}

func (x *History_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_rbac_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History_Entry.ProtoReflect.Descriptor instead.
func (*History_Entry) Descriptor() ([]byte, []int) {
	return file_rbac_rbac_proto_rawDescGZIP(), []int{4, 0}
}

func (x *History_Entry) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *History_Entry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *History_Entry) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *History_Entry) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *History_Entry) GetState() *anypb.Any {
	if x != nil {
		return x.State
	}
	return nil
}

var file_rbac_rbac_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*ACL_Operation)(nil),
		Field:         57777,
		Name:          "rbac.operation",
		Tag:           "bytes,57777,opt,name=operation",
		Filename:      "rbac/rbac.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional rbac.ACL.Operation operation = 57777;
	E_Operation = &file_rbac_rbac_proto_extTypes[0]
)

var File_rbac_rbac_proto protoreflect.FileDescriptor

var file_rbac_rbac_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x72, 0x62, 0x61, 0x63, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x68, 0x6c, 0x66, 0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x18, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x12, 0x3b, 0x0a, 0x09, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x41, 0x43, 0x4c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x43,
	0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x1a, 0xeb, 0x09, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x3a, 0xd7, 0x08, 0xba, 0x48, 0xd3, 0x08, 0x1a, 0x77,
	0x0a, 0x1d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x30, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73,
	0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x1a, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21,
	0x3d, 0x20, 0x30, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x1a, 0x71, 0x0a, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x1a, 0x27, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21,
	0x3d, 0x20, 0x31, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x32, 0x2c, 0x33, 0x29, 0x1a, 0x64, 0x0a, 0x2b, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x1a, 0x11, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x32, 0x20,
	0x1a, 0x94, 0x01, 0x0a, 0x2b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x65, 0x77,
	0x2c, 0x65, 0x64, 0x69, 0x74, 0x2c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x29, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x33, 0x20, 0x26,
	0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
	0x28, 0x31, 0x2c, 0x33, 0x2c, 0x34, 0x29, 0x1a, 0x99, 0x01, 0x0a, 0x2d, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x76,
	0x69, 0x65, 0x77, 0x2c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x2c, 0x65, 0x64, 0x69, 0x74, 0x1a, 0x2b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x34, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c, 0x32, 0x2c, 0x33,
	0x2c, 0x34, 0x29, 0x1a, 0x7a, 0x0a, 0x1a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x65, 0x77, 0x2c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0x65, 0x64,
	0x69, 0x74, 0x1a, 0x2b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20,
	0x21, 0x3d, 0x20, 0x35, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c, 0x32, 0x2c, 0x33, 0x2c, 0x34, 0x29, 0x1a,
	0x96, 0x01, 0x0a, 0x1c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x46, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x65, 0x77, 0x2c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x1a, 0x2e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x36, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c, 0x32,
	0x2c, 0x33, 0x2c, 0x39, 0x2c, 0x31, 0x30, 0x29, 0x1a, 0xb6, 0x01, 0x0a, 0x22, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x5f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x20, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x20, 0x76, 0x69, 0x65, 0x77, 0x2c, 0x65, 0x64, 0x69, 0x74, 0x2c, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x2c, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x2c,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x1a, 0x2f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x21, 0x3d,
	0x20, 0x37, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x69, 0x6e, 0x28, 0x31, 0x2c, 0x34, 0x2c, 0x35, 0x2c, 0x36, 0x2c, 0x37, 0x2c, 0x38,
	0x29, 0x1a, 0x8d, 0x05, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41, 0x43,
	0x4c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x5f, 0x0a, 0x05,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x8c, 0x01,
	0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x74, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x78, 0x1a, 0xa8, 0x01, 0x0a,
	0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x65, 0x64, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x1a, 0x96, 0x03, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x55, 0x0a, 0x0d,
	0x53, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x65, 0xba, 0x48, 0x62, 0x1a, 0x60, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x19, 0x53, 0x75, 0x62,
	0x20, 0x50, 0x61, 0x74, 0x68, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a, 0x32, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x26, 0x26,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2e,
	0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x22, 0xe6, 0x01, 0x0a, 0x06, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x53, 0x48, 0x49, 0x50, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x10, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x55,
	0x47, 0x47, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x06,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45,
	0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45,
	0x4e, 0x5f, 0x54, 0x58, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x64, 0x22, 0xbb, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x1a,
	0x32, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x1a, 0x38, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x08, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0xa2, 0x01, 0xba, 0x48, 0x7b, 0x1a, 0x79, 0x0a, 0x08, 0x41, 0x43, 0x4c, 0x20, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x43, 0x41, 0x43, 0x4c, 0x5b, 0x52, 0x6f, 0x6c, 0x65, 0x5d, 0x3a, 0x20, 0x54,
	0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x69, 0x64, 0x73, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x70, 0x1a, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x63,
	0x6c, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x72, 0x6f, 0x6c, 0x65, 0x2c, 0x20, 0x68, 0x61, 0x73, 0x28,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x29,
	0x29, 0xba, 0xd4, 0x1a, 0x20, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x10, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x9f, 0x04, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6d,
	0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x1a, 0x87, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x38, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x49,
	0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x1f, 0xba, 0xd4, 0x1a, 0x1b, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x09, 0x69, 0x64, 0x2e, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64,
	0x0a, 0x05, 0x69, 0x64, 0x2e, 0x69, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x05, 0x74, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x1a, 0xbe, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2a, 0xd2, 0x05, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4f, 0x50, 0x53, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x0c, 0x12,
	0x27, 0x0a, 0x23, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0f,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0x14, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x15, 0x12, 0x21,
	0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x16, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10,
	0x18, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x19, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x1a,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x1f, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x20, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x21, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x22, 0x12, 0x23, 0x0a, 0x1f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x23,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x24, 0x3a, 0x53, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xb1, 0xc3, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x42, 0x09, 0x52, 0x62, 0x61, 0x63, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6e, 0x6f, 0x76, 0x61, 0x33, 0x38, 0x2f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2f, 0x6c,
	0x69, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x62, 0x61, 0x63, 0xa2, 0x02,
	0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x04, 0x52, 0x62, 0x61, 0x63, 0xca, 0x02, 0x04, 0x52, 0x62,
	0x61, 0x63, 0xe2, 0x02, 0x10, 0x52, 0x62, 0x61, 0x63, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x04, 0x52, 0x62, 0x61, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rbac_rbac_proto_rawDescOnce sync.Once
	file_rbac_rbac_proto_rawDescData = file_rbac_rbac_proto_rawDesc
)

func file_rbac_rbac_proto_rawDescGZIP() []byte {
	file_rbac_rbac_proto_rawDescOnce.Do(func() {
		file_rbac_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(file_rbac_rbac_proto_rawDescData)
	})
	return file_rbac_rbac_proto_rawDescData
}

var file_rbac_rbac_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_rbac_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_rbac_rbac_proto_goTypes = []interface{}{
	(Error)(0),                         // 0: rbac.Error
	(ACL_Domain)(0),                    // 1: rbac.ACL.Domain
	(ACL_Action)(0),                    // 2: rbac.ACL.Action
	(*ACL)(nil),                        // 3: rbac.ACL
	(*Collection)(nil),                 // 4: rbac.Collection
	(*User)(nil),                       // 5: rbac.User
	(*StateActivity)(nil),              // 6: rbac.StateActivity
	(*History)(nil),                    // 7: rbac.History
	(*ACL_Operation)(nil),              // 8: rbac.ACL.Operation
	(*ACL_Policy)(nil),                 // 9: rbac.ACL.Policy
	(*ACL_PathPermission)(nil),         // 10: rbac.ACL.PathPermission
	(*ACL_Policy_Roles)(nil),           // 11: rbac.ACL.Policy.Roles
	(*ACL_Policy_Object)(nil),          // 12: rbac.ACL.Policy.Object
	(*ACL_Policy_ObjectField)(nil),     // 13: rbac.ACL.Policy.ObjectField
	nil,                                // 14: rbac.ACL.PathPermission.SubPathsEntry
	(*Collection_Id)(nil),              // 15: rbac.Collection.Id
	nil,                                // 16: rbac.Collection.RolesEntry
	nil,                                // 17: rbac.Collection.AclEntry
	(*User_Id)(nil),                    // 18: rbac.User.Id
	(*User_Role)(nil),                  // 19: rbac.User.Role
	nil,                                // 20: rbac.User.RolesEntry
	nil,                                // 21: rbac.User.MetadataEntry
	(*History_Entry)(nil),              // 22: rbac.History.Entry
	(*timestamppb.Timestamp)(nil),      // 23: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),      // 24: google.protobuf.FieldMask
	(*anypb.Any)(nil),                  // 25: google.protobuf.Any
	(*descriptorpb.MethodOptions)(nil), // 26: google.protobuf.MethodOptions
}
var file_rbac_rbac_proto_depIdxs = []int32{
	11, // 0: rbac.ACL.role_defs:type_name -> rbac.ACL.Policy.Roles
	11, // 1: rbac.ACL.role_permissions:type_name -> rbac.ACL.Policy.Roles
	11, // 2: rbac.ACL.memberships:type_name -> rbac.ACL.Policy.Roles
	12, // 3: rbac.ACL.object:type_name -> rbac.ACL.Policy.Object
	10, // 4: rbac.ACL.object_paths:type_name -> rbac.ACL.PathPermission
	15, // 5: rbac.Collection.id:type_name -> rbac.Collection.Id
	16, // 6: rbac.Collection.roles:type_name -> rbac.Collection.RolesEntry
	17, // 7: rbac.Collection.acl:type_name -> rbac.Collection.AclEntry
	18, // 8: rbac.User.id:type_name -> rbac.User.Id
	20, // 9: rbac.User.roles:type_name -> rbac.User.RolesEntry
	21, // 10: rbac.User.metadata:type_name -> rbac.User.MetadataEntry
	23, // 11: rbac.StateActivity.timestamp:type_name -> google.protobuf.Timestamp
	18, // 12: rbac.StateActivity.user_id:type_name -> rbac.User.Id
	22, // 13: rbac.History.entries:type_name -> rbac.History.Entry
	1,  // 14: rbac.ACL.Operation.domain:type_name -> rbac.ACL.Domain
	2,  // 15: rbac.ACL.Operation.action:type_name -> rbac.ACL.Action
	24, // 16: rbac.ACL.Operation.paths:type_name -> google.protobuf.FieldMask
	11, // 17: rbac.ACL.Policy.roles:type_name -> rbac.ACL.Policy.Roles
	11, // 18: rbac.ACL.Policy.membership:type_name -> rbac.ACL.Policy.Roles
	12, // 19: rbac.ACL.Policy.object:type_name -> rbac.ACL.Policy.Object
	13, // 20: rbac.ACL.Policy.object_field:type_name -> rbac.ACL.Policy.ObjectField
	14, // 21: rbac.ACL.PathPermission.sub_paths:type_name -> rbac.ACL.PathPermission.SubPathsEntry
	13, // 22: rbac.ACL.PathPermission.policy:type_name -> rbac.ACL.Policy.ObjectField
	10, // 23: rbac.ACL.PathPermission.SubPathsEntry.value:type_name -> rbac.ACL.PathPermission
	3,  // 24: rbac.Collection.AclEntry.value:type_name -> rbac.ACL
	15, // 25: rbac.User.Role.collection_id:type_name -> rbac.Collection.Id
	18, // 26: rbac.User.Role.granted_by:type_name -> rbac.User.Id
	19, // 27: rbac.User.RolesEntry.value:type_name -> rbac.User.Role
	23, // 28: rbac.History.Entry.timestamp:type_name -> google.protobuf.Timestamp
	25, // 29: rbac.History.Entry.state:type_name -> google.protobuf.Any
	26, // 30: rbac.operation:extendee -> google.protobuf.MethodOptions
	8,  // 31: rbac.operation:type_name -> rbac.ACL.Operation
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	31, // [31:32] is the sub-list for extension type_name
	30, // [30:31] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_rbac_rbac_proto_init() }
func file_rbac_rbac_proto_init() {
	if File_rbac_rbac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rbac_rbac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_PathPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Policy_Roles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Policy_Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Policy_ObjectField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_rbac_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rbac_rbac_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ACL_Policy_Roles_)(nil),
		(*ACL_Policy_Membership)(nil),
		(*ACL_Policy_Object_)(nil),
		(*ACL_Policy_ObjectField_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rbac_rbac_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_rbac_rbac_proto_goTypes,
		DependencyIndexes: file_rbac_rbac_proto_depIdxs,
		EnumInfos:         file_rbac_rbac_proto_enumTypes,
		MessageInfos:      file_rbac_rbac_proto_msgTypes,
		ExtensionInfos:    file_rbac_rbac_proto_extTypes,
	}.Build()
	File_rbac_rbac_proto = out.File
	file_rbac_rbac_proto_rawDesc = nil
	file_rbac_rbac_proto_goTypes = nil
	file_rbac_rbac_proto_depIdxs = nil
}
