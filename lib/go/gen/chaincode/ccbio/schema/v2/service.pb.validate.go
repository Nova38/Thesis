// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaincode/ccbio/schema/v2/service.proto

package schemav2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSuggestedUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSuggestedUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuggestedUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSuggestedUpdateRequestMultiError, or nil if none found.
func (m *GetSuggestedUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestedUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSuggestedUpdateRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSuggestedUpdateRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSuggestedUpdateRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSuggestedUpdateRequestMultiError(errors)
	}

	return nil
}

// GetSuggestedUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by GetSuggestedUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type GetSuggestedUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestedUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestedUpdateRequestMultiError) AllErrors() []error { return m }

// GetSuggestedUpdateRequestValidationError is the validation error returned by
// GetSuggestedUpdateRequest.Validate if the designated constraints aren't met.
type GetSuggestedUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestedUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestedUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestedUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestedUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestedUpdateRequestValidationError) ErrorName() string {
	return "GetSuggestedUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestedUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestedUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestedUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestedUpdateRequestValidationError{}

// Validate checks the field values on GetSuggestedUpdateBySpecimenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSuggestedUpdateBySpecimenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuggestedUpdateBySpecimenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSuggestedUpdateBySpecimenRequestMultiError, or nil if none found.
func (m *GetSuggestedUpdateBySpecimenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestedUpdateBySpecimenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSuggestedUpdateBySpecimenRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSuggestedUpdateBySpecimenRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSuggestedUpdateBySpecimenRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSuggestedUpdateBySpecimenRequestMultiError(errors)
	}

	return nil
}

// GetSuggestedUpdateBySpecimenRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetSuggestedUpdateBySpecimenRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSuggestedUpdateBySpecimenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestedUpdateBySpecimenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestedUpdateBySpecimenRequestMultiError) AllErrors() []error { return m }

// GetSuggestedUpdateBySpecimenRequestValidationError is the validation error
// returned by GetSuggestedUpdateBySpecimenRequest.Validate if the designated
// constraints aren't met.
type GetSuggestedUpdateBySpecimenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestedUpdateBySpecimenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestedUpdateBySpecimenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestedUpdateBySpecimenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestedUpdateBySpecimenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestedUpdateBySpecimenRequestValidationError) ErrorName() string {
	return "GetSuggestedUpdateBySpecimenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestedUpdateBySpecimenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestedUpdateBySpecimenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestedUpdateBySpecimenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestedUpdateBySpecimenRequestValidationError{}

// Validate checks the field values on GetSuggestedUpdateByCollectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSuggestedUpdateByCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuggestedUpdateByCollectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSuggestedUpdateByCollectionRequestMultiError, or nil if none found.
func (m *GetSuggestedUpdateByCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestedUpdateByCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSuggestedUpdateByCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSuggestedUpdateByCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSuggestedUpdateByCollectionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSuggestedUpdateByCollectionRequestMultiError(errors)
	}

	return nil
}

// GetSuggestedUpdateByCollectionRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetSuggestedUpdateByCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSuggestedUpdateByCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestedUpdateByCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestedUpdateByCollectionRequestMultiError) AllErrors() []error { return m }

// GetSuggestedUpdateByCollectionRequestValidationError is the validation error
// returned by GetSuggestedUpdateByCollectionRequest.Validate if the
// designated constraints aren't met.
type GetSuggestedUpdateByCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestedUpdateByCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestedUpdateByCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestedUpdateByCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestedUpdateByCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestedUpdateByCollectionRequestValidationError) ErrorName() string {
	return "GetSuggestedUpdateByCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestedUpdateByCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestedUpdateByCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestedUpdateByCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestedUpdateByCollectionRequestValidationError{}

// Validate checks the field values on GetUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserListRequestMultiError, or nil if none found.
func (m *GetUserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserListRequestMultiError(errors)
	}

	return nil
}

// GetUserListRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListRequestMultiError) AllErrors() []error { return m }

// GetUserListRequestValidationError is the validation error returned by
// GetUserListRequest.Validate if the designated constraints aren't met.
type GetUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListRequestValidationError) ErrorName() string {
	return "GetUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListRequestValidationError{}

// Validate checks the field values on GetUserListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserListResponseMultiError, or nil if none found.
func (m *GetUserListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserListResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserListResponseMultiError(errors)
	}

	return nil
}

// GetUserListResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListResponseMultiError) AllErrors() []error { return m }

// GetUserListResponseValidationError is the validation error returned by
// GetUserListResponse.Validate if the designated constraints aren't met.
type GetUserListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListResponseValidationError) ErrorName() string {
	return "GetUserListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionRequestMultiError, or nil if none found.
func (m *GetCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCollectionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCollectionRequestMultiError(errors)
	}

	return nil
}

// GetCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by GetCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionRequestMultiError) AllErrors() []error { return m }

// GetCollectionRequestValidationError is the validation error returned by
// GetCollectionRequest.Validate if the designated constraints aren't met.
type GetCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionRequestValidationError) ErrorName() string {
	return "GetCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionRequestValidationError{}

// Validate checks the field values on GetSpecimenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecimenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecimenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecimenRequestMultiError, or nil if none found.
func (m *GetSpecimenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecimenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpecimenRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpecimenRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpecimenRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSpecimenRequestMultiError(errors)
	}

	return nil
}

// GetSpecimenRequestMultiError is an error wrapping multiple validation errors
// returned by GetSpecimenRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSpecimenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecimenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecimenRequestMultiError) AllErrors() []error { return m }

// GetSpecimenRequestValidationError is the validation error returned by
// GetSpecimenRequest.Validate if the designated constraints aren't met.
type GetSpecimenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecimenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecimenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecimenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecimenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecimenRequestValidationError) ErrorName() string {
	return "GetSpecimenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecimenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecimenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecimenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecimenRequestValidationError{}

// Validate checks the field values on GetSpecimenHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecimenHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecimenHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecimenHistoryRequestMultiError, or nil if none found.
func (m *GetSpecimenHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecimenHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpecimenHistoryRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpecimenHistoryRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpecimenHistoryRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IncludeHidden

	if len(errors) > 0 {
		return GetSpecimenHistoryRequestMultiError(errors)
	}

	return nil
}

// GetSpecimenHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetSpecimenHistoryRequest.ValidateAll() if the
// designated constraints aren't met.
type GetSpecimenHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecimenHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecimenHistoryRequestMultiError) AllErrors() []error { return m }

// GetSpecimenHistoryRequestValidationError is the validation error returned by
// GetSpecimenHistoryRequest.Validate if the designated constraints aren't met.
type GetSpecimenHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecimenHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecimenHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecimenHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecimenHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecimenHistoryRequestValidationError) ErrorName() string {
	return "GetSpecimenHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecimenHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecimenHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecimenHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecimenHistoryRequestValidationError{}

// Validate checks the field values on GetSpecimenByCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecimenByCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecimenByCollectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSpecimenByCollectionRequestMultiError, or nil if none found.
func (m *GetSpecimenByCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecimenByCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpecimenByCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpecimenByCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpecimenByCollectionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSpecimenByCollectionRequestMultiError(errors)
	}

	return nil
}

// GetSpecimenByCollectionRequestMultiError is an error wrapping multiple
// validation errors returned by GetSpecimenByCollectionRequest.ValidateAll()
// if the designated constraints aren't met.
type GetSpecimenByCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecimenByCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecimenByCollectionRequestMultiError) AllErrors() []error { return m }

// GetSpecimenByCollectionRequestValidationError is the validation error
// returned by GetSpecimenByCollectionRequest.Validate if the designated
// constraints aren't met.
type GetSpecimenByCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecimenByCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecimenByCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecimenByCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecimenByCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecimenByCollectionRequestValidationError) ErrorName() string {
	return "GetSpecimenByCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecimenByCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecimenByCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecimenByCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecimenByCollectionRequestValidationError{}

// Validate checks the field values on GetUserByCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByCollectionRequestMultiError, or nil if none found.
func (m *GetUserByCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserByCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserByCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByCollectionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserByCollectionRequestMultiError(errors)
	}

	return nil
}

// GetUserByCollectionRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserByCollectionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserByCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByCollectionRequestMultiError) AllErrors() []error { return m }

// GetUserByCollectionRequestValidationError is the validation error returned
// by GetUserByCollectionRequest.Validate if the designated constraints aren't met.
type GetUserByCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByCollectionRequestValidationError) ErrorName() string {
	return "GetUserByCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByCollectionRequestValidationError{}

// Validate checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterRequestMultiError, or nil if none found.
func (m *UserRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Affiliation

	if len(errors) > 0 {
		return UserRegisterRequestMultiError(errors)
	}

	return nil
}

// UserRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by UserRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterRequestMultiError) AllErrors() []error { return m }

// UserRegisterRequestValidationError is the validation error returned by
// UserRegisterRequest.Validate if the designated constraints aren't met.
type UserRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterRequestValidationError) ErrorName() string {
	return "UserRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterRequestValidationError{}

// Validate checks the field values on UpdateMembershipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMembershipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMembershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMembershipRequestMultiError, or nil if none found.
func (m *UpdateMembershipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMembershipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMembershipRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMembershipRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMembershipRequestValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCollectionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMembershipRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMembershipRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollectionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMembershipRequestValidationError{
				field:  "CollectionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NewRole

	if len(errors) > 0 {
		return UpdateMembershipRequestMultiError(errors)
	}

	return nil
}

// UpdateMembershipRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMembershipRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMembershipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMembershipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMembershipRequestMultiError) AllErrors() []error { return m }

// UpdateMembershipRequestValidationError is the validation error returned by
// UpdateMembershipRequest.Validate if the designated constraints aren't met.
type UpdateMembershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMembershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMembershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMembershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMembershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMembershipRequestValidationError) ErrorName() string {
	return "UpdateMembershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMembershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMembershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMembershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMembershipRequestValidationError{}

// Validate checks the field values on CollectionCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionCreateRequestMultiError, or nil if none found.
func (m *CollectionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionCreateRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionCreateRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionCreateRequestValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionCreateRequestMultiError(errors)
	}

	return nil
}

// CollectionCreateRequestMultiError is an error wrapping multiple validation
// errors returned by CollectionCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionCreateRequestMultiError) AllErrors() []error { return m }

// CollectionCreateRequestValidationError is the validation error returned by
// CollectionCreateRequest.Validate if the designated constraints aren't met.
type CollectionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionCreateRequestValidationError) ErrorName() string {
	return "CollectionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionCreateRequestValidationError{}

// Validate checks the field values on CollectionUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionUpdateRequestMultiError, or nil if none found.
func (m *CollectionUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionUpdateRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionUpdateRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionUpdateRequestValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionUpdateRequestMultiError(errors)
	}

	return nil
}

// CollectionUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CollectionUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectionUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionUpdateRequestMultiError) AllErrors() []error { return m }

// CollectionUpdateRequestValidationError is the validation error returned by
// CollectionUpdateRequest.Validate if the designated constraints aren't met.
type CollectionUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionUpdateRequestValidationError) ErrorName() string {
	return "CollectionUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionUpdateRequestValidationError{}

// Validate checks the field values on STest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *STest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on STest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in STestMultiError, or nil if none found.
func (m *STest) ValidateAll() error {
	return m.validate(true)
}

func (m *STest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGeoreference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, STestValidationError{
					field:  "Georeference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, STestValidationError{
					field:  "Georeference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGeoreference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return STestValidationError{
				field:  "Georeference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return STestMultiError(errors)
	}

	return nil
}

// STestMultiError is an error wrapping multiple validation errors returned by
// STest.ValidateAll() if the designated constraints aren't met.
type STestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m STestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m STestMultiError) AllErrors() []error { return m }

// STestValidationError is the validation error returned by STest.Validate if
// the designated constraints aren't met.
type STestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e STestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e STestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e STestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e STestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e STestValidationError) ErrorName() string { return "STestValidationError" }

// Error satisfies the builtin error interface
func (e STestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSTest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = STestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = STestValidationError{}

// Validate checks the field values on SpecimenCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenCreateRequestMultiError, or nil if none found.
func (m *SpecimenCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenCreateRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaxon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Taxon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Taxon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaxon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenCreateRequestValidationError{
				field:  "Taxon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrimary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Primary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Primary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrimary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenCreateRequestValidationError{
				field:  "Primary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecondary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Secondary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Secondary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecondary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenCreateRequestValidationError{
				field:  "Secondary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGeoreference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Georeference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Georeference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGeoreference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenCreateRequestValidationError{
				field:  "Georeference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetImages()))
		i := 0
		for key := range m.GetImages() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetImages()[key]
			_ = val

			// no validation rules for Images[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SpecimenCreateRequestValidationError{
							field:  fmt.Sprintf("Images[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SpecimenCreateRequestValidationError{
							field:  fmt.Sprintf("Images[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SpecimenCreateRequestValidationError{
						field:  fmt.Sprintf("Images[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Loans

	// no validation rules for Grants

	if len(errors) > 0 {
		return SpecimenCreateRequestMultiError(errors)
	}

	return nil
}

// SpecimenCreateRequestMultiError is an error wrapping multiple validation
// errors returned by SpecimenCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type SpecimenCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenCreateRequestMultiError) AllErrors() []error { return m }

// SpecimenCreateRequestValidationError is the validation error returned by
// SpecimenCreateRequest.Validate if the designated constraints aren't met.
type SpecimenCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenCreateRequestValidationError) ErrorName() string {
	return "SpecimenCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenCreateRequestValidationError{}

// Validate checks the field values on SpecimenCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenCreateResponseMultiError, or nil if none found.
func (m *SpecimenCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenCreateResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenCreateResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenCreateResponseValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenCreateResponseMultiError(errors)
	}

	return nil
}

// SpecimenCreateResponseMultiError is an error wrapping multiple validation
// errors returned by SpecimenCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type SpecimenCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenCreateResponseMultiError) AllErrors() []error { return m }

// SpecimenCreateResponseValidationError is the validation error returned by
// SpecimenCreateResponse.Validate if the designated constraints aren't met.
type SpecimenCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenCreateResponseValidationError) ErrorName() string {
	return "SpecimenCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenCreateResponseValidationError{}

// Validate checks the field values on SpecimenUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenUpdateRequestMultiError, or nil if none found.
func (m *SpecimenUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenUpdateRequestValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenUpdateRequestValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenUpdateRequestValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenUpdateRequestMultiError(errors)
	}

	return nil
}

// SpecimenUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by SpecimenUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type SpecimenUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenUpdateRequestMultiError) AllErrors() []error { return m }

// SpecimenUpdateRequestValidationError is the validation error returned by
// SpecimenUpdateRequest.Validate if the designated constraints aren't met.
type SpecimenUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenUpdateRequestValidationError) ErrorName() string {
	return "SpecimenUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenUpdateRequestValidationError{}

// Validate checks the field values on SpecimenHideTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenHideTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenHideTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenHideTxRequestMultiError, or nil if none found.
func (m *SpecimenHideTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenHideTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenHideTxRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenHideTxRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenHideTxRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenHideTxRequestValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenHideTxRequestValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenHideTxRequestValidationError{
				field:  "Tx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenHideTxRequestMultiError(errors)
	}

	return nil
}

// SpecimenHideTxRequestMultiError is an error wrapping multiple validation
// errors returned by SpecimenHideTxRequest.ValidateAll() if the designated
// constraints aren't met.
type SpecimenHideTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenHideTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenHideTxRequestMultiError) AllErrors() []error { return m }

// SpecimenHideTxRequestValidationError is the validation error returned by
// SpecimenHideTxRequest.Validate if the designated constraints aren't met.
type SpecimenHideTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenHideTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenHideTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenHideTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenHideTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenHideTxRequestValidationError) ErrorName() string {
	return "SpecimenHideTxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenHideTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenHideTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenHideTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenHideTxRequestValidationError{}

// Validate checks the field values on SpecimenUnHideTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenUnHideTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenUnHideTxRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenUnHideTxRequestMultiError, or nil if none found.
func (m *SpecimenUnHideTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenUnHideTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenUnHideTxRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenUnHideTxRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenUnHideTxRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenUnHideTxRequestValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenUnHideTxRequestValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenUnHideTxRequestValidationError{
				field:  "Tx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenUnHideTxRequestMultiError(errors)
	}

	return nil
}

// SpecimenUnHideTxRequestMultiError is an error wrapping multiple validation
// errors returned by SpecimenUnHideTxRequest.ValidateAll() if the designated
// constraints aren't met.
type SpecimenUnHideTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenUnHideTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenUnHideTxRequestMultiError) AllErrors() []error { return m }

// SpecimenUnHideTxRequestValidationError is the validation error returned by
// SpecimenUnHideTxRequest.Validate if the designated constraints aren't met.
type SpecimenUnHideTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenUnHideTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenUnHideTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenUnHideTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenUnHideTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenUnHideTxRequestValidationError) ErrorName() string {
	return "SpecimenUnHideTxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenUnHideTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenUnHideTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenUnHideTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenUnHideTxRequestValidationError{}

// Validate checks the field values on SpecimenDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenDeleteRequestMultiError, or nil if none found.
func (m *SpecimenDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenDeleteRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenDeleteRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenDeleteRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenDeleteRequestMultiError(errors)
	}

	return nil
}

// SpecimenDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by SpecimenDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type SpecimenDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenDeleteRequestMultiError) AllErrors() []error { return m }

// SpecimenDeleteRequestValidationError is the validation error returned by
// SpecimenDeleteRequest.Validate if the designated constraints aren't met.
type SpecimenDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenDeleteRequestValidationError) ErrorName() string {
	return "SpecimenDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenDeleteRequestValidationError{}

// Validate checks the field values on SuggestedUpdateCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestedUpdateCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestedUpdateCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestedUpdateCreateRequestMultiError, or nil if none found.
func (m *SuggestedUpdateCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestedUpdateCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestedUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateCreateRequestValidationError{
					field:  "SuggestedUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateCreateRequestValidationError{
					field:  "SuggestedUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestedUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateCreateRequestValidationError{
				field:  "SuggestedUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestedUpdateCreateRequestMultiError(errors)
	}

	return nil
}

// SuggestedUpdateCreateRequestMultiError is an error wrapping multiple
// validation errors returned by SuggestedUpdateCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type SuggestedUpdateCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestedUpdateCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestedUpdateCreateRequestMultiError) AllErrors() []error { return m }

// SuggestedUpdateCreateRequestValidationError is the validation error returned
// by SuggestedUpdateCreateRequest.Validate if the designated constraints
// aren't met.
type SuggestedUpdateCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestedUpdateCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestedUpdateCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestedUpdateCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestedUpdateCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestedUpdateCreateRequestValidationError) ErrorName() string {
	return "SuggestedUpdateCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestedUpdateCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestedUpdateCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestedUpdateCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestedUpdateCreateRequestValidationError{}

// Validate checks the field values on SuggestedUpdateApproveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestedUpdateApproveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestedUpdateApproveRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SuggestedUpdateApproveRequestMultiError, or nil if none found.
func (m *SuggestedUpdateApproveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestedUpdateApproveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateApproveRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateApproveRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateApproveRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	if len(errors) > 0 {
		return SuggestedUpdateApproveRequestMultiError(errors)
	}

	return nil
}

// SuggestedUpdateApproveRequestMultiError is an error wrapping multiple
// validation errors returned by SuggestedUpdateApproveRequest.ValidateAll()
// if the designated constraints aren't met.
type SuggestedUpdateApproveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestedUpdateApproveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestedUpdateApproveRequestMultiError) AllErrors() []error { return m }

// SuggestedUpdateApproveRequestValidationError is the validation error
// returned by SuggestedUpdateApproveRequest.Validate if the designated
// constraints aren't met.
type SuggestedUpdateApproveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestedUpdateApproveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestedUpdateApproveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestedUpdateApproveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestedUpdateApproveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestedUpdateApproveRequestValidationError) ErrorName() string {
	return "SuggestedUpdateApproveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestedUpdateApproveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestedUpdateApproveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestedUpdateApproveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestedUpdateApproveRequestValidationError{}

// Validate checks the field values on SuggestedUpdateRejectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestedUpdateRejectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestedUpdateRejectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestedUpdateRejectRequestMultiError, or nil if none found.
func (m *SuggestedUpdateRejectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestedUpdateRejectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateRejectRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateRejectRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateRejectRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	if len(errors) > 0 {
		return SuggestedUpdateRejectRequestMultiError(errors)
	}

	return nil
}

// SuggestedUpdateRejectRequestMultiError is an error wrapping multiple
// validation errors returned by SuggestedUpdateRejectRequest.ValidateAll() if
// the designated constraints aren't met.
type SuggestedUpdateRejectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestedUpdateRejectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestedUpdateRejectRequestMultiError) AllErrors() []error { return m }

// SuggestedUpdateRejectRequestValidationError is the validation error returned
// by SuggestedUpdateRejectRequest.Validate if the designated constraints
// aren't met.
type SuggestedUpdateRejectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestedUpdateRejectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestedUpdateRejectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestedUpdateRejectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestedUpdateRejectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestedUpdateRejectRequestValidationError) ErrorName() string {
	return "SuggestedUpdateRejectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestedUpdateRejectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestedUpdateRejectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestedUpdateRejectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestedUpdateRejectRequestValidationError{}
