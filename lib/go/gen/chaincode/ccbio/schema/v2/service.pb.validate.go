// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaincode/ccbio/schema/v2/service.proto

package schemav2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSpecimenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecimenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecimenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecimenRequestMultiError, or nil if none found.
func (m *GetSpecimenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecimenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpecimenRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpecimenRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpecimenRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSpecimenRequestMultiError(errors)
	}

	return nil
}

// GetSpecimenRequestMultiError is an error wrapping multiple validation errors
// returned by GetSpecimenRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSpecimenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecimenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecimenRequestMultiError) AllErrors() []error { return m }

// GetSpecimenRequestValidationError is the validation error returned by
// GetSpecimenRequest.Validate if the designated constraints aren't met.
type GetSpecimenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecimenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecimenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecimenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecimenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecimenRequestValidationError) ErrorName() string {
	return "GetSpecimenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecimenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecimenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecimenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecimenRequestValidationError{}

// Validate checks the field values on GetSpecimenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecimenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecimenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecimenResponseMultiError, or nil if none found.
func (m *GetSpecimenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecimenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpecimenResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpecimenResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpecimenResponseValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSpecimenResponseMultiError(errors)
	}

	return nil
}

// GetSpecimenResponseMultiError is an error wrapping multiple validation
// errors returned by GetSpecimenResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSpecimenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecimenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecimenResponseMultiError) AllErrors() []error { return m }

// GetSpecimenResponseValidationError is the validation error returned by
// GetSpecimenResponse.Validate if the designated constraints aren't met.
type GetSpecimenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecimenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecimenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecimenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecimenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecimenResponseValidationError) ErrorName() string {
	return "GetSpecimenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecimenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecimenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecimenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecimenResponseValidationError{}

// Validate checks the field values on GetSpecimenListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecimenListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecimenListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecimenListResponseMultiError, or nil if none found.
func (m *GetSpecimenListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecimenListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSpecimens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSpecimenListResponseValidationError{
						field:  fmt.Sprintf("Specimens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSpecimenListResponseValidationError{
						field:  fmt.Sprintf("Specimens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSpecimenListResponseValidationError{
					field:  fmt.Sprintf("Specimens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSpecimenListResponseMultiError(errors)
	}

	return nil
}

// GetSpecimenListResponseMultiError is an error wrapping multiple validation
// errors returned by GetSpecimenListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSpecimenListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecimenListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecimenListResponseMultiError) AllErrors() []error { return m }

// GetSpecimenListResponseValidationError is the validation error returned by
// GetSpecimenListResponse.Validate if the designated constraints aren't met.
type GetSpecimenListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecimenListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecimenListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecimenListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecimenListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecimenListResponseValidationError) ErrorName() string {
	return "GetSpecimenListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecimenListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecimenListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecimenListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecimenListResponseValidationError{}

// Validate checks the field values on GetSpecimenByCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecimenByCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecimenByCollectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSpecimenByCollectionRequestMultiError, or nil if none found.
func (m *GetSpecimenByCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecimenByCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpecimenByCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpecimenByCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpecimenByCollectionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSpecimenByCollectionRequestMultiError(errors)
	}

	return nil
}

// GetSpecimenByCollectionRequestMultiError is an error wrapping multiple
// validation errors returned by GetSpecimenByCollectionRequest.ValidateAll()
// if the designated constraints aren't met.
type GetSpecimenByCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecimenByCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecimenByCollectionRequestMultiError) AllErrors() []error { return m }

// GetSpecimenByCollectionRequestValidationError is the validation error
// returned by GetSpecimenByCollectionRequest.Validate if the designated
// constraints aren't met.
type GetSpecimenByCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecimenByCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecimenByCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecimenByCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecimenByCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecimenByCollectionRequestValidationError) ErrorName() string {
	return "GetSpecimenByCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecimenByCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecimenByCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecimenByCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecimenByCollectionRequestValidationError{}

// Validate checks the field values on GetSpecimenByCollectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecimenByCollectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecimenByCollectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSpecimenByCollectionResponseMultiError, or nil if none found.
func (m *GetSpecimenByCollectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecimenByCollectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSpecimens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSpecimenByCollectionResponseValidationError{
						field:  fmt.Sprintf("Specimens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSpecimenByCollectionResponseValidationError{
						field:  fmt.Sprintf("Specimens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSpecimenByCollectionResponseValidationError{
					field:  fmt.Sprintf("Specimens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSpecimenByCollectionResponseMultiError(errors)
	}

	return nil
}

// GetSpecimenByCollectionResponseMultiError is an error wrapping multiple
// validation errors returned by GetSpecimenByCollectionResponse.ValidateAll()
// if the designated constraints aren't met.
type GetSpecimenByCollectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecimenByCollectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecimenByCollectionResponseMultiError) AllErrors() []error { return m }

// GetSpecimenByCollectionResponseValidationError is the validation error
// returned by GetSpecimenByCollectionResponse.Validate if the designated
// constraints aren't met.
type GetSpecimenByCollectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecimenByCollectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecimenByCollectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecimenByCollectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecimenByCollectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecimenByCollectionResponseValidationError) ErrorName() string {
	return "GetSpecimenByCollectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecimenByCollectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecimenByCollectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecimenByCollectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecimenByCollectionResponseValidationError{}

// Validate checks the field values on GetSpecimenHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecimenHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecimenHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecimenHistoryRequestMultiError, or nil if none found.
func (m *GetSpecimenHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecimenHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpecimenHistoryRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpecimenHistoryRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpecimenHistoryRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IncludeHidden

	if len(errors) > 0 {
		return GetSpecimenHistoryRequestMultiError(errors)
	}

	return nil
}

// GetSpecimenHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetSpecimenHistoryRequest.ValidateAll() if the
// designated constraints aren't met.
type GetSpecimenHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecimenHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecimenHistoryRequestMultiError) AllErrors() []error { return m }

// GetSpecimenHistoryRequestValidationError is the validation error returned by
// GetSpecimenHistoryRequest.Validate if the designated constraints aren't met.
type GetSpecimenHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecimenHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecimenHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecimenHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecimenHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecimenHistoryRequestValidationError) ErrorName() string {
	return "GetSpecimenHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecimenHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecimenHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecimenHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecimenHistoryRequestValidationError{}

// Validate checks the field values on GetSpecimenHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecimenHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecimenHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecimenHistoryResponseMultiError, or nil if none found.
func (m *GetSpecimenHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecimenHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpecimenHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpecimenHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpecimenHistoryResponseValidationError{
				field:  "History",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSpecimenHistoryResponseMultiError(errors)
	}

	return nil
}

// GetSpecimenHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by GetSpecimenHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetSpecimenHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecimenHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecimenHistoryResponseMultiError) AllErrors() []error { return m }

// GetSpecimenHistoryResponseValidationError is the validation error returned
// by GetSpecimenHistoryResponse.Validate if the designated constraints aren't met.
type GetSpecimenHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecimenHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecimenHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecimenHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecimenHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecimenHistoryResponseValidationError) ErrorName() string {
	return "GetSpecimenHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecimenHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecimenHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecimenHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecimenHistoryResponseValidationError{}

// Validate checks the field values on SpecimenCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenCreateRequestMultiError, or nil if none found.
func (m *SpecimenCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenCreateRequestValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenCreateRequestValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenCreateRequestMultiError(errors)
	}

	return nil
}

// SpecimenCreateRequestMultiError is an error wrapping multiple validation
// errors returned by SpecimenCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type SpecimenCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenCreateRequestMultiError) AllErrors() []error { return m }

// SpecimenCreateRequestValidationError is the validation error returned by
// SpecimenCreateRequest.Validate if the designated constraints aren't met.
type SpecimenCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenCreateRequestValidationError) ErrorName() string {
	return "SpecimenCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenCreateRequestValidationError{}

// Validate checks the field values on SpecimenCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenCreateResponseMultiError, or nil if none found.
func (m *SpecimenCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenCreateResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenCreateResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenCreateResponseValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenCreateResponseMultiError(errors)
	}

	return nil
}

// SpecimenCreateResponseMultiError is an error wrapping multiple validation
// errors returned by SpecimenCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type SpecimenCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenCreateResponseMultiError) AllErrors() []error { return m }

// SpecimenCreateResponseValidationError is the validation error returned by
// SpecimenCreateResponse.Validate if the designated constraints aren't met.
type SpecimenCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenCreateResponseValidationError) ErrorName() string {
	return "SpecimenCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenCreateResponseValidationError{}

// Validate checks the field values on SpecimenUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenUpdateRequestMultiError, or nil if none found.
func (m *SpecimenUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenUpdateRequestValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenUpdateRequestValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenUpdateRequestValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenUpdateRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenUpdateRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenUpdateRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenUpdateRequestMultiError(errors)
	}

	return nil
}

// SpecimenUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by SpecimenUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type SpecimenUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenUpdateRequestMultiError) AllErrors() []error { return m }

// SpecimenUpdateRequestValidationError is the validation error returned by
// SpecimenUpdateRequest.Validate if the designated constraints aren't met.
type SpecimenUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenUpdateRequestValidationError) ErrorName() string {
	return "SpecimenUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenUpdateRequestValidationError{}

// Validate checks the field values on SpecimenUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenUpdateResponseMultiError, or nil if none found.
func (m *SpecimenUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenUpdateResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenUpdateResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenUpdateResponseValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenUpdateResponseValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenUpdateResponseValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenUpdateResponseValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenUpdateResponseMultiError(errors)
	}

	return nil
}

// SpecimenUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by SpecimenUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type SpecimenUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenUpdateResponseMultiError) AllErrors() []error { return m }

// SpecimenUpdateResponseValidationError is the validation error returned by
// SpecimenUpdateResponse.Validate if the designated constraints aren't met.
type SpecimenUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenUpdateResponseValidationError) ErrorName() string {
	return "SpecimenUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenUpdateResponseValidationError{}

// Validate checks the field values on SpecimenDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenDeleteRequestMultiError, or nil if none found.
func (m *SpecimenDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenDeleteRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenDeleteRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenDeleteRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenDeleteRequestMultiError(errors)
	}

	return nil
}

// SpecimenDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by SpecimenDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type SpecimenDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenDeleteRequestMultiError) AllErrors() []error { return m }

// SpecimenDeleteRequestValidationError is the validation error returned by
// SpecimenDeleteRequest.Validate if the designated constraints aren't met.
type SpecimenDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenDeleteRequestValidationError) ErrorName() string {
	return "SpecimenDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenDeleteRequestValidationError{}

// Validate checks the field values on SpecimenDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenDeleteResponseMultiError, or nil if none found.
func (m *SpecimenDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenDeleteResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenDeleteResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenDeleteResponseValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenDeleteResponseMultiError(errors)
	}

	return nil
}

// SpecimenDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by SpecimenDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type SpecimenDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenDeleteResponseMultiError) AllErrors() []error { return m }

// SpecimenDeleteResponseValidationError is the validation error returned by
// SpecimenDeleteResponse.Validate if the designated constraints aren't met.
type SpecimenDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenDeleteResponseValidationError) ErrorName() string {
	return "SpecimenDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenDeleteResponseValidationError{}

// Validate checks the field values on SpecimenHideTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenHideTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenHideTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenHideTxRequestMultiError, or nil if none found.
func (m *SpecimenHideTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenHideTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenHideTxRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenHideTxRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenHideTxRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenHideTxRequestValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenHideTxRequestValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenHideTxRequestValidationError{
				field:  "Tx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenHideTxRequestMultiError(errors)
	}

	return nil
}

// SpecimenHideTxRequestMultiError is an error wrapping multiple validation
// errors returned by SpecimenHideTxRequest.ValidateAll() if the designated
// constraints aren't met.
type SpecimenHideTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenHideTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenHideTxRequestMultiError) AllErrors() []error { return m }

// SpecimenHideTxRequestValidationError is the validation error returned by
// SpecimenHideTxRequest.Validate if the designated constraints aren't met.
type SpecimenHideTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenHideTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenHideTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenHideTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenHideTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenHideTxRequestValidationError) ErrorName() string {
	return "SpecimenHideTxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenHideTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenHideTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenHideTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenHideTxRequestValidationError{}

// Validate checks the field values on SpecimenHideTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenHideTxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenHideTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenHideTxResponseMultiError, or nil if none found.
func (m *SpecimenHideTxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenHideTxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenHideTxResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenHideTxResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenHideTxResponseValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenHideTxResponseMultiError(errors)
	}

	return nil
}

// SpecimenHideTxResponseMultiError is an error wrapping multiple validation
// errors returned by SpecimenHideTxResponse.ValidateAll() if the designated
// constraints aren't met.
type SpecimenHideTxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenHideTxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenHideTxResponseMultiError) AllErrors() []error { return m }

// SpecimenHideTxResponseValidationError is the validation error returned by
// SpecimenHideTxResponse.Validate if the designated constraints aren't met.
type SpecimenHideTxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenHideTxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenHideTxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenHideTxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenHideTxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenHideTxResponseValidationError) ErrorName() string {
	return "SpecimenHideTxResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenHideTxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenHideTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenHideTxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenHideTxResponseValidationError{}

// Validate checks the field values on SpecimenUnHideTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenUnHideTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenUnHideTxRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenUnHideTxRequestMultiError, or nil if none found.
func (m *SpecimenUnHideTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenUnHideTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenUnHideTxRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenUnHideTxRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenUnHideTxRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenUnHideTxRequestValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenUnHideTxRequestValidationError{
					field:  "Tx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenUnHideTxRequestValidationError{
				field:  "Tx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenUnHideTxRequestMultiError(errors)
	}

	return nil
}

// SpecimenUnHideTxRequestMultiError is an error wrapping multiple validation
// errors returned by SpecimenUnHideTxRequest.ValidateAll() if the designated
// constraints aren't met.
type SpecimenUnHideTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenUnHideTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenUnHideTxRequestMultiError) AllErrors() []error { return m }

// SpecimenUnHideTxRequestValidationError is the validation error returned by
// SpecimenUnHideTxRequest.Validate if the designated constraints aren't met.
type SpecimenUnHideTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenUnHideTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenUnHideTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenUnHideTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenUnHideTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenUnHideTxRequestValidationError) ErrorName() string {
	return "SpecimenUnHideTxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenUnHideTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenUnHideTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenUnHideTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenUnHideTxRequestValidationError{}

// Validate checks the field values on SpecimenUnHideTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecimenUnHideTxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecimenUnHideTxResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecimenUnHideTxResponseMultiError, or nil if none found.
func (m *SpecimenUnHideTxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecimenUnHideTxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenUnHideTxResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenUnHideTxResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenUnHideTxResponseValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenUnHideTxResponseMultiError(errors)
	}

	return nil
}

// SpecimenUnHideTxResponseMultiError is an error wrapping multiple validation
// errors returned by SpecimenUnHideTxResponse.ValidateAll() if the designated
// constraints aren't met.
type SpecimenUnHideTxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenUnHideTxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenUnHideTxResponseMultiError) AllErrors() []error { return m }

// SpecimenUnHideTxResponseValidationError is the validation error returned by
// SpecimenUnHideTxResponse.Validate if the designated constraints aren't met.
type SpecimenUnHideTxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenUnHideTxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenUnHideTxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenUnHideTxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenUnHideTxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenUnHideTxResponseValidationError) ErrorName() string {
	return "SpecimenUnHideTxResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpecimenUnHideTxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimenUnHideTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenUnHideTxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenUnHideTxResponseValidationError{}

// Validate checks the field values on GetSuggestedUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSuggestedUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuggestedUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSuggestedUpdateRequestMultiError, or nil if none found.
func (m *GetSuggestedUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestedUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSuggestedUpdateRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSuggestedUpdateRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSuggestedUpdateRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSuggestedUpdateRequestMultiError(errors)
	}

	return nil
}

// GetSuggestedUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by GetSuggestedUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type GetSuggestedUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestedUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestedUpdateRequestMultiError) AllErrors() []error { return m }

// GetSuggestedUpdateRequestValidationError is the validation error returned by
// GetSuggestedUpdateRequest.Validate if the designated constraints aren't met.
type GetSuggestedUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestedUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestedUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestedUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestedUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestedUpdateRequestValidationError) ErrorName() string {
	return "GetSuggestedUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestedUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestedUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestedUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestedUpdateRequestValidationError{}

// Validate checks the field values on GetSuggestedUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSuggestedUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuggestedUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSuggestedUpdateResponseMultiError, or nil if none found.
func (m *GetSuggestedUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestedUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestedUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSuggestedUpdateResponseValidationError{
					field:  "SuggestedUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSuggestedUpdateResponseValidationError{
					field:  "SuggestedUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestedUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSuggestedUpdateResponseValidationError{
				field:  "SuggestedUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSuggestedUpdateResponseMultiError(errors)
	}

	return nil
}

// GetSuggestedUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by GetSuggestedUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type GetSuggestedUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestedUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestedUpdateResponseMultiError) AllErrors() []error { return m }

// GetSuggestedUpdateResponseValidationError is the validation error returned
// by GetSuggestedUpdateResponse.Validate if the designated constraints aren't met.
type GetSuggestedUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestedUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestedUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestedUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestedUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestedUpdateResponseValidationError) ErrorName() string {
	return "GetSuggestedUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestedUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestedUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestedUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestedUpdateResponseValidationError{}

// Validate checks the field values on GetSuggestedUpdateBySpecimenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSuggestedUpdateBySpecimenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuggestedUpdateBySpecimenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSuggestedUpdateBySpecimenRequestMultiError, or nil if none found.
func (m *GetSuggestedUpdateBySpecimenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestedUpdateBySpecimenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSuggestedUpdateBySpecimenRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSuggestedUpdateBySpecimenRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSuggestedUpdateBySpecimenRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSuggestedUpdateBySpecimenRequestMultiError(errors)
	}

	return nil
}

// GetSuggestedUpdateBySpecimenRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetSuggestedUpdateBySpecimenRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSuggestedUpdateBySpecimenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestedUpdateBySpecimenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestedUpdateBySpecimenRequestMultiError) AllErrors() []error { return m }

// GetSuggestedUpdateBySpecimenRequestValidationError is the validation error
// returned by GetSuggestedUpdateBySpecimenRequest.Validate if the designated
// constraints aren't met.
type GetSuggestedUpdateBySpecimenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestedUpdateBySpecimenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestedUpdateBySpecimenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestedUpdateBySpecimenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestedUpdateBySpecimenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestedUpdateBySpecimenRequestValidationError) ErrorName() string {
	return "GetSuggestedUpdateBySpecimenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestedUpdateBySpecimenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestedUpdateBySpecimenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestedUpdateBySpecimenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestedUpdateBySpecimenRequestValidationError{}

// Validate checks the field values on GetSuggestedUpdateBySpecimenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSuggestedUpdateBySpecimenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuggestedUpdateBySpecimenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSuggestedUpdateBySpecimenResponseMultiError, or nil if none found.
func (m *GetSuggestedUpdateBySpecimenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestedUpdateBySpecimenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSuggestedUpdates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSuggestedUpdateBySpecimenResponseValidationError{
						field:  fmt.Sprintf("SuggestedUpdates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSuggestedUpdateBySpecimenResponseValidationError{
						field:  fmt.Sprintf("SuggestedUpdates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSuggestedUpdateBySpecimenResponseValidationError{
					field:  fmt.Sprintf("SuggestedUpdates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSuggestedUpdateBySpecimenResponseMultiError(errors)
	}

	return nil
}

// GetSuggestedUpdateBySpecimenResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetSuggestedUpdateBySpecimenResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSuggestedUpdateBySpecimenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestedUpdateBySpecimenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestedUpdateBySpecimenResponseMultiError) AllErrors() []error { return m }

// GetSuggestedUpdateBySpecimenResponseValidationError is the validation error
// returned by GetSuggestedUpdateBySpecimenResponse.Validate if the designated
// constraints aren't met.
type GetSuggestedUpdateBySpecimenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestedUpdateBySpecimenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestedUpdateBySpecimenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestedUpdateBySpecimenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestedUpdateBySpecimenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestedUpdateBySpecimenResponseValidationError) ErrorName() string {
	return "GetSuggestedUpdateBySpecimenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestedUpdateBySpecimenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestedUpdateBySpecimenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestedUpdateBySpecimenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestedUpdateBySpecimenResponseValidationError{}

// Validate checks the field values on GetSuggestedUpdateByCollectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSuggestedUpdateByCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuggestedUpdateByCollectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSuggestedUpdateByCollectionRequestMultiError, or nil if none found.
func (m *GetSuggestedUpdateByCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestedUpdateByCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSuggestedUpdateByCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSuggestedUpdateByCollectionRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSuggestedUpdateByCollectionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSuggestedUpdateByCollectionRequestMultiError(errors)
	}

	return nil
}

// GetSuggestedUpdateByCollectionRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetSuggestedUpdateByCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSuggestedUpdateByCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestedUpdateByCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestedUpdateByCollectionRequestMultiError) AllErrors() []error { return m }

// GetSuggestedUpdateByCollectionRequestValidationError is the validation error
// returned by GetSuggestedUpdateByCollectionRequest.Validate if the
// designated constraints aren't met.
type GetSuggestedUpdateByCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestedUpdateByCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestedUpdateByCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestedUpdateByCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestedUpdateByCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestedUpdateByCollectionRequestValidationError) ErrorName() string {
	return "GetSuggestedUpdateByCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestedUpdateByCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestedUpdateByCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestedUpdateByCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestedUpdateByCollectionRequestValidationError{}

// Validate checks the field values on GetSuggestedUpdateByCollectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSuggestedUpdateByCollectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetSuggestedUpdateByCollectionResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetSuggestedUpdateByCollectionResponseMultiError, or nil if none found.
func (m *GetSuggestedUpdateByCollectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestedUpdateByCollectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSuggestedUpdates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSuggestedUpdateByCollectionResponseValidationError{
						field:  fmt.Sprintf("SuggestedUpdates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSuggestedUpdateByCollectionResponseValidationError{
						field:  fmt.Sprintf("SuggestedUpdates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSuggestedUpdateByCollectionResponseValidationError{
					field:  fmt.Sprintf("SuggestedUpdates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSuggestedUpdateByCollectionResponseMultiError(errors)
	}

	return nil
}

// GetSuggestedUpdateByCollectionResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetSuggestedUpdateByCollectionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSuggestedUpdateByCollectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestedUpdateByCollectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestedUpdateByCollectionResponseMultiError) AllErrors() []error { return m }

// GetSuggestedUpdateByCollectionResponseValidationError is the validation
// error returned by GetSuggestedUpdateByCollectionResponse.Validate if the
// designated constraints aren't met.
type GetSuggestedUpdateByCollectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestedUpdateByCollectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestedUpdateByCollectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestedUpdateByCollectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestedUpdateByCollectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestedUpdateByCollectionResponseValidationError) ErrorName() string {
	return "GetSuggestedUpdateByCollectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestedUpdateByCollectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestedUpdateByCollectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestedUpdateByCollectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestedUpdateByCollectionResponseValidationError{}

// Validate checks the field values on GetSuggestedUpdateListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSuggestedUpdateListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuggestedUpdateListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSuggestedUpdateListResponseMultiError, or nil if none found.
func (m *GetSuggestedUpdateListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestedUpdateListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSuggestedUpdates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSuggestedUpdateListResponseValidationError{
						field:  fmt.Sprintf("SuggestedUpdates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSuggestedUpdateListResponseValidationError{
						field:  fmt.Sprintf("SuggestedUpdates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSuggestedUpdateListResponseValidationError{
					field:  fmt.Sprintf("SuggestedUpdates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSuggestedUpdateListResponseMultiError(errors)
	}

	return nil
}

// GetSuggestedUpdateListResponseMultiError is an error wrapping multiple
// validation errors returned by GetSuggestedUpdateListResponse.ValidateAll()
// if the designated constraints aren't met.
type GetSuggestedUpdateListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestedUpdateListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestedUpdateListResponseMultiError) AllErrors() []error { return m }

// GetSuggestedUpdateListResponseValidationError is the validation error
// returned by GetSuggestedUpdateListResponse.Validate if the designated
// constraints aren't met.
type GetSuggestedUpdateListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestedUpdateListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestedUpdateListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestedUpdateListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestedUpdateListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestedUpdateListResponseValidationError) ErrorName() string {
	return "GetSuggestedUpdateListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestedUpdateListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestedUpdateListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestedUpdateListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestedUpdateListResponseValidationError{}

// Validate checks the field values on SuggestedUpdateCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestedUpdateCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestedUpdateCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestedUpdateCreateRequestMultiError, or nil if none found.
func (m *SuggestedUpdateCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestedUpdateCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestedUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateCreateRequestValidationError{
					field:  "SuggestedUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateCreateRequestValidationError{
					field:  "SuggestedUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestedUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateCreateRequestValidationError{
				field:  "SuggestedUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestedUpdateCreateRequestMultiError(errors)
	}

	return nil
}

// SuggestedUpdateCreateRequestMultiError is an error wrapping multiple
// validation errors returned by SuggestedUpdateCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type SuggestedUpdateCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestedUpdateCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestedUpdateCreateRequestMultiError) AllErrors() []error { return m }

// SuggestedUpdateCreateRequestValidationError is the validation error returned
// by SuggestedUpdateCreateRequest.Validate if the designated constraints
// aren't met.
type SuggestedUpdateCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestedUpdateCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestedUpdateCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestedUpdateCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestedUpdateCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestedUpdateCreateRequestValidationError) ErrorName() string {
	return "SuggestedUpdateCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestedUpdateCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestedUpdateCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestedUpdateCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestedUpdateCreateRequestValidationError{}

// Validate checks the field values on SuggestedUpdateCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestedUpdateCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestedUpdateCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SuggestedUpdateCreateResponseMultiError, or nil if none found.
func (m *SuggestedUpdateCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestedUpdateCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestedUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateCreateResponseValidationError{
					field:  "SuggestedUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateCreateResponseValidationError{
					field:  "SuggestedUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestedUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateCreateResponseValidationError{
				field:  "SuggestedUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestedUpdateCreateResponseMultiError(errors)
	}

	return nil
}

// SuggestedUpdateCreateResponseMultiError is an error wrapping multiple
// validation errors returned by SuggestedUpdateCreateResponse.ValidateAll()
// if the designated constraints aren't met.
type SuggestedUpdateCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestedUpdateCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestedUpdateCreateResponseMultiError) AllErrors() []error { return m }

// SuggestedUpdateCreateResponseValidationError is the validation error
// returned by SuggestedUpdateCreateResponse.Validate if the designated
// constraints aren't met.
type SuggestedUpdateCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestedUpdateCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestedUpdateCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestedUpdateCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestedUpdateCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestedUpdateCreateResponseValidationError) ErrorName() string {
	return "SuggestedUpdateCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestedUpdateCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestedUpdateCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestedUpdateCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestedUpdateCreateResponseValidationError{}

// Validate checks the field values on SuggestedUpdateApproveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestedUpdateApproveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestedUpdateApproveRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SuggestedUpdateApproveRequestMultiError, or nil if none found.
func (m *SuggestedUpdateApproveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestedUpdateApproveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateApproveRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateApproveRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateApproveRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	if len(errors) > 0 {
		return SuggestedUpdateApproveRequestMultiError(errors)
	}

	return nil
}

// SuggestedUpdateApproveRequestMultiError is an error wrapping multiple
// validation errors returned by SuggestedUpdateApproveRequest.ValidateAll()
// if the designated constraints aren't met.
type SuggestedUpdateApproveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestedUpdateApproveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestedUpdateApproveRequestMultiError) AllErrors() []error { return m }

// SuggestedUpdateApproveRequestValidationError is the validation error
// returned by SuggestedUpdateApproveRequest.Validate if the designated
// constraints aren't met.
type SuggestedUpdateApproveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestedUpdateApproveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestedUpdateApproveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestedUpdateApproveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestedUpdateApproveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestedUpdateApproveRequestValidationError) ErrorName() string {
	return "SuggestedUpdateApproveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestedUpdateApproveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestedUpdateApproveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestedUpdateApproveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestedUpdateApproveRequestValidationError{}

// Validate checks the field values on SuggestedUpdateApproveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestedUpdateApproveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestedUpdateApproveResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SuggestedUpdateApproveResponseMultiError, or nil if none found.
func (m *SuggestedUpdateApproveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestedUpdateApproveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateApproveResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateApproveResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateApproveResponseValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestedUpdateApproveResponseMultiError(errors)
	}

	return nil
}

// SuggestedUpdateApproveResponseMultiError is an error wrapping multiple
// validation errors returned by SuggestedUpdateApproveResponse.ValidateAll()
// if the designated constraints aren't met.
type SuggestedUpdateApproveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestedUpdateApproveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestedUpdateApproveResponseMultiError) AllErrors() []error { return m }

// SuggestedUpdateApproveResponseValidationError is the validation error
// returned by SuggestedUpdateApproveResponse.Validate if the designated
// constraints aren't met.
type SuggestedUpdateApproveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestedUpdateApproveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestedUpdateApproveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestedUpdateApproveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestedUpdateApproveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestedUpdateApproveResponseValidationError) ErrorName() string {
	return "SuggestedUpdateApproveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestedUpdateApproveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestedUpdateApproveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestedUpdateApproveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestedUpdateApproveResponseValidationError{}

// Validate checks the field values on SuggestedUpdateRejectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestedUpdateRejectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestedUpdateRejectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestedUpdateRejectRequestMultiError, or nil if none found.
func (m *SuggestedUpdateRejectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestedUpdateRejectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateRejectRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateRejectRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateRejectRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	if len(errors) > 0 {
		return SuggestedUpdateRejectRequestMultiError(errors)
	}

	return nil
}

// SuggestedUpdateRejectRequestMultiError is an error wrapping multiple
// validation errors returned by SuggestedUpdateRejectRequest.ValidateAll() if
// the designated constraints aren't met.
type SuggestedUpdateRejectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestedUpdateRejectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestedUpdateRejectRequestMultiError) AllErrors() []error { return m }

// SuggestedUpdateRejectRequestValidationError is the validation error returned
// by SuggestedUpdateRejectRequest.Validate if the designated constraints
// aren't met.
type SuggestedUpdateRejectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestedUpdateRejectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestedUpdateRejectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestedUpdateRejectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestedUpdateRejectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestedUpdateRejectRequestValidationError) ErrorName() string {
	return "SuggestedUpdateRejectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestedUpdateRejectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestedUpdateRejectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestedUpdateRejectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestedUpdateRejectRequestValidationError{}

// Validate checks the field values on SuggestedUpdateRejectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestedUpdateRejectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestedUpdateRejectResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SuggestedUpdateRejectResponseMultiError, or nil if none found.
func (m *SuggestedUpdateRejectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestedUpdateRejectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateRejectResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateRejectResponseValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateRejectResponseValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestedUpdateRejectResponseMultiError(errors)
	}

	return nil
}

// SuggestedUpdateRejectResponseMultiError is an error wrapping multiple
// validation errors returned by SuggestedUpdateRejectResponse.ValidateAll()
// if the designated constraints aren't met.
type SuggestedUpdateRejectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestedUpdateRejectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestedUpdateRejectResponseMultiError) AllErrors() []error { return m }

// SuggestedUpdateRejectResponseValidationError is the validation error
// returned by SuggestedUpdateRejectResponse.Validate if the designated
// constraints aren't met.
type SuggestedUpdateRejectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestedUpdateRejectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestedUpdateRejectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestedUpdateRejectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestedUpdateRejectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestedUpdateRejectResponseValidationError) ErrorName() string {
	return "SuggestedUpdateRejectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestedUpdateRejectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestedUpdateRejectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestedUpdateRejectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestedUpdateRejectResponseValidationError{}
