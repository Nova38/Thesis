// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaincode/ccbio/schema/v2/state.proto

package schemav2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Specimen with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Specimen) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specimen with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpecimenMultiError, or nil
// if none found.
func (m *Specimen) ValidateAll() error {
	return m.validate(true)
}

func (m *Specimen) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrimary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "Primary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "Primary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrimary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenValidationError{
				field:  "Primary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecondary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "Secondary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "Secondary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecondary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenValidationError{
				field:  "Secondary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaxon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "Taxon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "Taxon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaxon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenValidationError{
				field:  "Taxon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGeoreference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "Georeference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "Georeference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGeoreference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenValidationError{
				field:  "Georeference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetImages()))
		i := 0
		for key := range m.GetImages() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetImages()[key]
			_ = val

			// no validation rules for Images[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SpecimenValidationError{
							field:  fmt.Sprintf("Images[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SpecimenValidationError{
							field:  fmt.Sprintf("Images[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SpecimenValidationError{
						field:  fmt.Sprintf("Images[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetLoans()))
		i := 0
		for key := range m.GetLoans() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLoans()[key]
			_ = val

			// no validation rules for Loans[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SpecimenValidationError{
							field:  fmt.Sprintf("Loans[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SpecimenValidationError{
							field:  fmt.Sprintf("Loans[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SpecimenValidationError{
						field:  fmt.Sprintf("Loans[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetGrants()))
		i := 0
		for key := range m.GetGrants() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetGrants()[key]
			_ = val

			// no validation rules for Grants[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SpecimenValidationError{
							field:  fmt.Sprintf("Grants[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SpecimenValidationError{
							field:  fmt.Sprintf("Grants[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SpecimenValidationError{
						field:  fmt.Sprintf("Grants[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetHiddenTxs()))
		i := 0
		for key := range m.GetHiddenTxs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHiddenTxs()[key]
			_ = val

			// no validation rules for HiddenTxs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SpecimenValidationError{
							field:  fmt.Sprintf("HiddenTxs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SpecimenValidationError{
							field:  fmt.Sprintf("HiddenTxs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SpecimenValidationError{
						field:  fmt.Sprintf("HiddenTxs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetLastModified()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecimenValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecimenValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpecimenMultiError(errors)
	}

	return nil
}

// SpecimenMultiError is an error wrapping multiple validation errors returned
// by Specimen.ValidateAll() if the designated constraints aren't met.
type SpecimenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecimenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecimenMultiError) AllErrors() []error { return m }

// SpecimenValidationError is the validation error returned by
// Specimen.Validate if the designated constraints aren't met.
type SpecimenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecimenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecimenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecimenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecimenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecimenValidationError) ErrorName() string { return "SpecimenValidationError" }

// Error satisfies the builtin error interface
func (e SpecimenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecimenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecimenValidationError{}

// Validate checks the field values on SuggestedUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SuggestedUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestedUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestedUpdateMultiError, or nil if none found.
func (m *SuggestedUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestedUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateValidationError{
					field:  "UpdateInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateValidationError{
					field:  "UpdateInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateValidationError{
				field:  "UpdateInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpecimen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateValidationError{
					field:  "Specimen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateValidationError{
				field:  "Specimen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdateValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdateValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdateValidationError{
				field:  "Mask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestedUpdateMultiError(errors)
	}

	return nil
}

// SuggestedUpdateMultiError is an error wrapping multiple validation errors
// returned by SuggestedUpdate.ValidateAll() if the designated constraints
// aren't met.
type SuggestedUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestedUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestedUpdateMultiError) AllErrors() []error { return m }

// SuggestedUpdateValidationError is the validation error returned by
// SuggestedUpdate.Validate if the designated constraints aren't met.
type SuggestedUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestedUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestedUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestedUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestedUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestedUpdateValidationError) ErrorName() string { return "SuggestedUpdateValidationError" }

// Error satisfies the builtin error interface
func (e SuggestedUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestedUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestedUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestedUpdateValidationError{}

// Validate checks the field values on Specimen_Id with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Specimen_Id) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specimen_Id with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Specimen_IdMultiError, or
// nil if none found.
func (m *Specimen_Id) ValidateAll() error {
	return m.validate(true)
}

func (m *Specimen_Id) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for Id

	if len(errors) > 0 {
		return Specimen_IdMultiError(errors)
	}

	return nil
}

// Specimen_IdMultiError is an error wrapping multiple validation errors
// returned by Specimen_Id.ValidateAll() if the designated constraints aren't met.
type Specimen_IdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Specimen_IdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Specimen_IdMultiError) AllErrors() []error { return m }

// Specimen_IdValidationError is the validation error returned by
// Specimen_Id.Validate if the designated constraints aren't met.
type Specimen_IdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Specimen_IdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Specimen_IdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Specimen_IdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Specimen_IdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Specimen_IdValidationError) ErrorName() string { return "Specimen_IdValidationError" }

// Error satisfies the builtin error interface
func (e Specimen_IdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimen_Id.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Specimen_IdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Specimen_IdValidationError{}

// Validate checks the field values on Specimen_History with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Specimen_History) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specimen_History with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Specimen_HistoryMultiError, or nil if none found.
func (m *Specimen_History) ValidateAll() error {
	return m.validate(true)
}

func (m *Specimen_History) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_HistoryValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_HistoryValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_HistoryValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Specimen_HistoryValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Specimen_HistoryValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Specimen_HistoryValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Specimen_HistoryMultiError(errors)
	}

	return nil
}

// Specimen_HistoryMultiError is an error wrapping multiple validation errors
// returned by Specimen_History.ValidateAll() if the designated constraints
// aren't met.
type Specimen_HistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Specimen_HistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Specimen_HistoryMultiError) AllErrors() []error { return m }

// Specimen_HistoryValidationError is the validation error returned by
// Specimen_History.Validate if the designated constraints aren't met.
type Specimen_HistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Specimen_HistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Specimen_HistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Specimen_HistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Specimen_HistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Specimen_HistoryValidationError) ErrorName() string { return "Specimen_HistoryValidationError" }

// Error satisfies the builtin error interface
func (e Specimen_HistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimen_History.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Specimen_HistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Specimen_HistoryValidationError{}

// Validate checks the field values on Specimen_Primary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Specimen_Primary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specimen_Primary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Specimen_PrimaryMultiError, or nil if none found.
func (m *Specimen_Primary) ValidateAll() error {
	return m.validate(true)
}

func (m *Specimen_Primary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CatalogNumber

	// no validation rules for AccessionNumber

	// no validation rules for FieldNumber

	// no validation rules for TissueNumber

	// no validation rules for Cataloger

	// no validation rules for Collector

	// no validation rules for Determiner

	if all {
		switch v := interface{}(m.GetFieldDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_PrimaryValidationError{
					field:  "FieldDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_PrimaryValidationError{
					field:  "FieldDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_PrimaryValidationError{
				field:  "FieldDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCatalogDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_PrimaryValidationError{
					field:  "CatalogDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_PrimaryValidationError{
					field:  "CatalogDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCatalogDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_PrimaryValidationError{
				field:  "CatalogDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeterminedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_PrimaryValidationError{
					field:  "DeterminedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_PrimaryValidationError{
					field:  "DeterminedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeterminedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_PrimaryValidationError{
				field:  "DeterminedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeterminedReason

	if all {
		switch v := interface{}(m.GetLastModified()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_PrimaryValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_PrimaryValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_PrimaryValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Specimen_PrimaryMultiError(errors)
	}

	return nil
}

// Specimen_PrimaryMultiError is an error wrapping multiple validation errors
// returned by Specimen_Primary.ValidateAll() if the designated constraints
// aren't met.
type Specimen_PrimaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Specimen_PrimaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Specimen_PrimaryMultiError) AllErrors() []error { return m }

// Specimen_PrimaryValidationError is the validation error returned by
// Specimen_Primary.Validate if the designated constraints aren't met.
type Specimen_PrimaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Specimen_PrimaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Specimen_PrimaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Specimen_PrimaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Specimen_PrimaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Specimen_PrimaryValidationError) ErrorName() string { return "Specimen_PrimaryValidationError" }

// Error satisfies the builtin error interface
func (e Specimen_PrimaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimen_Primary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Specimen_PrimaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Specimen_PrimaryValidationError{}

// Validate checks the field values on Specimen_Secondary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Specimen_Secondary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specimen_Secondary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Specimen_SecondaryMultiError, or nil if none found.
func (m *Specimen_Secondary) ValidateAll() error {
	return m.validate(true)
}

func (m *Specimen_Secondary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Preparation

	// no validation rules for Condition

	// no validation rules for Notes

	if all {
		switch v := interface{}(m.GetLastModified()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_SecondaryValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_SecondaryValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_SecondaryValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Specimen_SecondaryMultiError(errors)
	}

	return nil
}

// Specimen_SecondaryMultiError is an error wrapping multiple validation errors
// returned by Specimen_Secondary.ValidateAll() if the designated constraints
// aren't met.
type Specimen_SecondaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Specimen_SecondaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Specimen_SecondaryMultiError) AllErrors() []error { return m }

// Specimen_SecondaryValidationError is the validation error returned by
// Specimen_Secondary.Validate if the designated constraints aren't met.
type Specimen_SecondaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Specimen_SecondaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Specimen_SecondaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Specimen_SecondaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Specimen_SecondaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Specimen_SecondaryValidationError) ErrorName() string {
	return "Specimen_SecondaryValidationError"
}

// Error satisfies the builtin error interface
func (e Specimen_SecondaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimen_Secondary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Specimen_SecondaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Specimen_SecondaryValidationError{}

// Validate checks the field values on Specimen_Taxon with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Specimen_Taxon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specimen_Taxon with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Specimen_TaxonMultiError,
// or nil if none found.
func (m *Specimen_Taxon) ValidateAll() error {
	return m.validate(true)
}

func (m *Specimen_Taxon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kingdom

	// no validation rules for Phylum

	// no validation rules for Class

	// no validation rules for Order

	// no validation rules for Family

	// no validation rules for Genus

	// no validation rules for Species

	// no validation rules for Subspecies

	if all {
		switch v := interface{}(m.GetLastModified()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_TaxonValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_TaxonValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_TaxonValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Specimen_TaxonMultiError(errors)
	}

	return nil
}

// Specimen_TaxonMultiError is an error wrapping multiple validation errors
// returned by Specimen_Taxon.ValidateAll() if the designated constraints
// aren't met.
type Specimen_TaxonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Specimen_TaxonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Specimen_TaxonMultiError) AllErrors() []error { return m }

// Specimen_TaxonValidationError is the validation error returned by
// Specimen_Taxon.Validate if the designated constraints aren't met.
type Specimen_TaxonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Specimen_TaxonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Specimen_TaxonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Specimen_TaxonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Specimen_TaxonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Specimen_TaxonValidationError) ErrorName() string { return "Specimen_TaxonValidationError" }

// Error satisfies the builtin error interface
func (e Specimen_TaxonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimen_Taxon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Specimen_TaxonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Specimen_TaxonValidationError{}

// Validate checks the field values on Specimen_Georeference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Specimen_Georeference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specimen_Georeference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Specimen_GeoreferenceMultiError, or nil if none found.
func (m *Specimen_Georeference) ValidateAll() error {
	return m.validate(true)
}

func (m *Specimen_Georeference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Country

	// no validation rules for StateProvince

	// no validation rules for County

	// no validation rules for Locality

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for Habitat

	if all {
		switch v := interface{}(m.GetLastModified()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_GeoreferenceValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_GeoreferenceValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_GeoreferenceValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Specimen_GeoreferenceMultiError(errors)
	}

	return nil
}

// Specimen_GeoreferenceMultiError is an error wrapping multiple validation
// errors returned by Specimen_Georeference.ValidateAll() if the designated
// constraints aren't met.
type Specimen_GeoreferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Specimen_GeoreferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Specimen_GeoreferenceMultiError) AllErrors() []error { return m }

// Specimen_GeoreferenceValidationError is the validation error returned by
// Specimen_Georeference.Validate if the designated constraints aren't met.
type Specimen_GeoreferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Specimen_GeoreferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Specimen_GeoreferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Specimen_GeoreferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Specimen_GeoreferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Specimen_GeoreferenceValidationError) ErrorName() string {
	return "Specimen_GeoreferenceValidationError"
}

// Error satisfies the builtin error interface
func (e Specimen_GeoreferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimen_Georeference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Specimen_GeoreferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Specimen_GeoreferenceValidationError{}

// Validate checks the field values on Specimen_Image with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Specimen_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specimen_Image with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Specimen_ImageMultiError,
// or nil if none found.
func (m *Specimen_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *Specimen_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	// no validation rules for Notes

	// no validation rules for Hash

	if all {
		switch v := interface{}(m.GetLastModified()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_ImageValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_ImageValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_ImageValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Specimen_ImageMultiError(errors)
	}

	return nil
}

// Specimen_ImageMultiError is an error wrapping multiple validation errors
// returned by Specimen_Image.ValidateAll() if the designated constraints
// aren't met.
type Specimen_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Specimen_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Specimen_ImageMultiError) AllErrors() []error { return m }

// Specimen_ImageValidationError is the validation error returned by
// Specimen_Image.Validate if the designated constraints aren't met.
type Specimen_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Specimen_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Specimen_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Specimen_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Specimen_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Specimen_ImageValidationError) ErrorName() string { return "Specimen_ImageValidationError" }

// Error satisfies the builtin error interface
func (e Specimen_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimen_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Specimen_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Specimen_ImageValidationError{}

// Validate checks the field values on Specimen_HiddenTx with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Specimen_HiddenTx) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specimen_HiddenTx with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Specimen_HiddenTxMultiError, or nil if none found.
func (m *Specimen_HiddenTx) ValidateAll() error {
	return m.validate(true)
}

func (m *Specimen_HiddenTx) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxId

	// no validation rules for Notes

	if all {
		switch v := interface{}(m.GetLastModified()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_HiddenTxValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_HiddenTxValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_HiddenTxValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Specimen_HiddenTxMultiError(errors)
	}

	return nil
}

// Specimen_HiddenTxMultiError is an error wrapping multiple validation errors
// returned by Specimen_HiddenTx.ValidateAll() if the designated constraints
// aren't met.
type Specimen_HiddenTxMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Specimen_HiddenTxMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Specimen_HiddenTxMultiError) AllErrors() []error { return m }

// Specimen_HiddenTxValidationError is the validation error returned by
// Specimen_HiddenTx.Validate if the designated constraints aren't met.
type Specimen_HiddenTxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Specimen_HiddenTxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Specimen_HiddenTxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Specimen_HiddenTxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Specimen_HiddenTxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Specimen_HiddenTxValidationError) ErrorName() string {
	return "Specimen_HiddenTxValidationError"
}

// Error satisfies the builtin error interface
func (e Specimen_HiddenTxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimen_HiddenTx.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Specimen_HiddenTxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Specimen_HiddenTxValidationError{}

// Validate checks the field values on Specimen_Loan with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Specimen_Loan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specimen_Loan with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Specimen_LoanMultiError, or
// nil if none found.
func (m *Specimen_Loan) ValidateAll() error {
	return m.validate(true)
}

func (m *Specimen_Loan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for LoanedBy

	// no validation rules for LoanedTo

	if all {
		switch v := interface{}(m.GetLoanedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_LoanValidationError{
					field:  "LoanedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_LoanValidationError{
					field:  "LoanedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoanedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_LoanValidationError{
				field:  "LoanedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastModified()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_LoanValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_LoanValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_LoanValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Specimen_LoanMultiError(errors)
	}

	return nil
}

// Specimen_LoanMultiError is an error wrapping multiple validation errors
// returned by Specimen_Loan.ValidateAll() if the designated constraints
// aren't met.
type Specimen_LoanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Specimen_LoanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Specimen_LoanMultiError) AllErrors() []error { return m }

// Specimen_LoanValidationError is the validation error returned by
// Specimen_Loan.Validate if the designated constraints aren't met.
type Specimen_LoanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Specimen_LoanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Specimen_LoanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Specimen_LoanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Specimen_LoanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Specimen_LoanValidationError) ErrorName() string { return "Specimen_LoanValidationError" }

// Error satisfies the builtin error interface
func (e Specimen_LoanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimen_Loan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Specimen_LoanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Specimen_LoanValidationError{}

// Validate checks the field values on Specimen_Grant with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Specimen_Grant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Specimen_Grant with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Specimen_GrantMultiError,
// or nil if none found.
func (m *Specimen_Grant) ValidateAll() error {
	return m.validate(true)
}

func (m *Specimen_Grant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for GrantedBy

	// no validation rules for GrantedTo

	if all {
		switch v := interface{}(m.GetGrantedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_GrantValidationError{
					field:  "GrantedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_GrantValidationError{
					field:  "GrantedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_GrantValidationError{
				field:  "GrantedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastModified()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Specimen_GrantValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Specimen_GrantValidationError{
					field:  "LastModified",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Specimen_GrantValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Specimen_GrantMultiError(errors)
	}

	return nil
}

// Specimen_GrantMultiError is an error wrapping multiple validation errors
// returned by Specimen_Grant.ValidateAll() if the designated constraints
// aren't met.
type Specimen_GrantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Specimen_GrantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Specimen_GrantMultiError) AllErrors() []error { return m }

// Specimen_GrantValidationError is the validation error returned by
// Specimen_Grant.Validate if the designated constraints aren't met.
type Specimen_GrantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Specimen_GrantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Specimen_GrantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Specimen_GrantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Specimen_GrantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Specimen_GrantValidationError) ErrorName() string { return "Specimen_GrantValidationError" }

// Error satisfies the builtin error interface
func (e Specimen_GrantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecimen_Grant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Specimen_GrantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Specimen_GrantValidationError{}

// Validate checks the field values on SuggestedUpdate_Id with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestedUpdate_Id) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestedUpdate_Id with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestedUpdate_IdMultiError, or nil if none found.
func (m *SuggestedUpdate_Id) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestedUpdate_Id) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpecimenId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestedUpdate_IdValidationError{
					field:  "SpecimenId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestedUpdate_IdValidationError{
					field:  "SpecimenId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecimenId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestedUpdate_IdValidationError{
				field:  "SpecimenId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	if len(errors) > 0 {
		return SuggestedUpdate_IdMultiError(errors)
	}

	return nil
}

// SuggestedUpdate_IdMultiError is an error wrapping multiple validation errors
// returned by SuggestedUpdate_Id.ValidateAll() if the designated constraints
// aren't met.
type SuggestedUpdate_IdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestedUpdate_IdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestedUpdate_IdMultiError) AllErrors() []error { return m }

// SuggestedUpdate_IdValidationError is the validation error returned by
// SuggestedUpdate_Id.Validate if the designated constraints aren't met.
type SuggestedUpdate_IdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestedUpdate_IdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestedUpdate_IdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestedUpdate_IdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestedUpdate_IdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestedUpdate_IdValidationError) ErrorName() string {
	return "SuggestedUpdate_IdValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestedUpdate_IdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestedUpdate_Id.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestedUpdate_IdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestedUpdate_IdValidationError{}
