// Code generated by protoc-gen-go-hlf. DO NOT EDIT.
// versions:
// - protoc-gen-cckey v0.0.1
// source: chaincode/ccbio/schema/v1/service.proto

package schemav1

import (
	fmt "fmt"
	state "github.com/nova38/thesis/lib/go/fabric/state"
	rbac "github.com/nova38/thesis/lib/go/gen/rbac"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Service BiochainSpecimenService
type BiochainSpecimenServiceInterface interface {
	// GetSpecimen
	GetSpecimen(ctx state.LoggedTxCtxInterface, req *GetSpecimenRequest) (res *Specimen, err error)

	// GetSpecimenList
	GetSpecimenList(ctx state.LoggedTxCtxInterface, req *emptypb.Empty) (res *Specimen_List, err error)

	// GetSpecimenByCollection
	GetSpecimenByCollection(ctx state.LoggedTxCtxInterface, req *GetSpecimenByCollectionRequest) (res *Specimen_List, err error)

	// GetSpecimenHistory
	GetSpecimenHistory(ctx state.LoggedTxCtxInterface, req *GetSpecimenHistoryRequest) (res *Specimen_History, err error)

	// SpecimenCreate
	SpecimenCreate(ctx state.LoggedTxCtxInterface, req *SpecimenCreateRequest) (res *SpecimenCreateResponse, err error)

	// SpecimenUpdate
	SpecimenUpdate(ctx state.LoggedTxCtxInterface, req *SpecimenUpdateRequest) (res *Specimen, err error)

	// SpecimenHideTransaction
	SpecimenHideTransaction(ctx state.LoggedTxCtxInterface, req *SpecimenHideTxRequest) (res *Specimen, err error)

	// SpecimenUnHideTransaction
	SpecimenUnHideTransaction(ctx state.LoggedTxCtxInterface, req *SpecimenUnHideTxRequest) (res *Specimen, err error)

	// SpecimenDelete
	SpecimenDelete(ctx state.LoggedTxCtxInterface, req *SpecimenDeleteRequest) (res *emptypb.Empty, err error)

	// GetSuggestedUpdate
	GetSuggestedUpdate(ctx state.LoggedTxCtxInterface, req *GetSuggestedUpdateRequest) (res *SuggestedUpdate, err error)

	// GetSuggestedUpdateBySpecimen
	GetSuggestedUpdateBySpecimen(ctx state.LoggedTxCtxInterface, req *GetSuggestedUpdateBySpecimenRequest) (res *SuggestedStateList, err error)

	// GetSuggestedUpdateByCollection
	GetSuggestedUpdateByCollection(ctx state.LoggedTxCtxInterface, req *GetSuggestedUpdateByCollectionRequest) (res *SuggestedStateList, err error)

	// GetSuggestedUpdateList
	GetSuggestedUpdateList(ctx state.LoggedTxCtxInterface, req *emptypb.Empty) (res *Specimen, err error)

	// SuggestedUpdateCreate
	SuggestedUpdateCreate(ctx state.LoggedTxCtxInterface, req *SuggestedUpdateCreateRequest) (res *SuggestedUpdate, err error)

	// SpecimenUpdateApprove
	SpecimenUpdateApprove(ctx state.LoggedTxCtxInterface, req *SuggestedUpdateApproveRequest) (res *Specimen, err error)

	// SpecimenUpdateReject
	SpecimenUpdateReject(ctx state.LoggedTxCtxInterface, req *SuggestedUpdateRejectRequest) (res *SuggestedUpdate, err error)
}

type BiochainSpecimenServiceBase struct {
}

func (s *BiochainSpecimenServiceBase) GetEvaluateTransactions() []string {
	return []string{}
}

func BiochainSpecimenServiceGetTxOperation(txName string) (op *rbac.ACL_Operation, err error) {
	switch txName {
	case "GetSpecimen":
	// <nil>
	case "GetSpecimenList":
	// <nil>
	case "GetSpecimenByCollection":
	// <nil>
	case "GetSpecimenHistory":
	// <nil>
	case "SpecimenCreate":
	// <nil>
	case "SpecimenUpdate":
	// <nil>
	case "SpecimenHideTransaction":
	// <nil>
	case "SpecimenUnHideTransaction":
	// <nil>
	case "SpecimenDelete":
	// <nil>
	case "GetSuggestedUpdate":
	// <nil>
	case "GetSuggestedUpdateBySpecimen":
	// <nil>
	case "GetSuggestedUpdateByCollection":
	// <nil>
	case "GetSuggestedUpdateList":
	// <nil>
	case "SuggestedUpdateCreate":
	// <nil>
	case "SpecimenUpdateApprove":
	// <nil>
	case "SpecimenUpdateReject":
	// <nil>
	default:
		return nil, fmt.Errorf("No operation defined for " + txName)
	}
	return nil, nil
}

func (s *BiochainSpecimenServiceBase) GetIgnoredFunctions() []string {
	return []string{"GetTxOperation"}
}

// Service BiochainAuthService
type BiochainAuthServiceInterface interface {
	// *
	// GetCurrentUser: Returns the current user.
	//
	// Returns the current user.
	// Requires:
	// - User submitting the transaction is a registered user.
	GetCurrentUser(ctx state.LoggedTxCtxInterface, req *emptypb.Empty) (res *User, err error)

	// *
	// Returns the current user id.
	// Requires:
	// - User submitting the transaction is a registered user.
	GetCurrentUserId(ctx state.LoggedTxCtxInterface, req *emptypb.Empty) (res *User_Id, err error)

	// *
	GetUserList(ctx state.LoggedTxCtxInterface, req *GetUserListRequest) (res *GetUserListResponse, err error)

	// GetUser
	GetUser(ctx state.LoggedTxCtxInterface, req *GetUserRequest) (res *User, err error)

	// UserRegister
	UserRegister(ctx state.LoggedTxCtxInterface, req *UserRegisterRequest) (res *User, err error)

	// UserUpdateMembership
	UserUpdateMembership(ctx state.LoggedTxCtxInterface, req *UpdateMembershipRequest) (res *User, err error)

	// AddTestUsers
	AddTestUsers(ctx state.LoggedTxCtxInterface, req *User_Id) (res *emptypb.Empty, err error)

	// // Collection functions
	GetCollectionList(ctx state.LoggedTxCtxInterface, req *emptypb.Empty) (res *CollectionList, err error)

	// GetCollection
	GetCollection(ctx state.LoggedTxCtxInterface, req *GetCollectionRequest) (res *Collection, err error)

	// rpc collectionGetUsers(CollectionId) returns (UserList);
	CollectionCreate(ctx state.LoggedTxCtxInterface, req *CollectionCreateRequest) (res *Collection, err error)

	// CollectionUpdate
	CollectionUpdate(ctx state.LoggedTxCtxInterface, req *CollectionUpdateRequest) (res *Collection, err error)
}

type BiochainAuthServiceBase struct {
}

func (s *BiochainAuthServiceBase) GetEvaluateTransactions() []string {
	return []string{}
}

func BiochainAuthServiceGetTxOperation(txName string) (op *rbac.ACL_Operation, err error) {
	switch txName {
	case "GetCurrentUser":
	// <nil>
	case "GetCurrentUserId":
	// <nil>
	case "GetUserList":
	// <nil>
	case "GetUser":
	// <nil>
	case "UserRegister":
	// <nil>
	case "UserUpdateMembership":
	// <nil>
	case "AddTestUsers":
	// <nil>
	case "GetCollectionList":
	// <nil>
	case "GetCollection":
	// <nil>
	case "CollectionCreate":
	// <nil>
	case "CollectionUpdate":
	// <nil>
	default:
		return nil, fmt.Errorf("No operation defined for " + txName)
	}
	return nil, nil
}

func (s *BiochainAuthServiceBase) GetIgnoredFunctions() []string {
	return []string{"GetTxOperation"}
}
