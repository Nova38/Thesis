// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: chaincode/ccbio/schema/v1/service.proto

package schemav1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Permission int32

const (
	Permission_PERMISSION_UNSPECIFIED Permission = 0
	Permission_PERMISSION_READ        Permission = 1
	Permission_PERMISSION_WRITE       Permission = 2
	Permission_PERMISSION_ADMIN       Permission = 3
)

// Enum value maps for Permission.
var (
	Permission_name = map[int32]string{
		0: "PERMISSION_UNSPECIFIED",
		1: "PERMISSION_READ",
		2: "PERMISSION_WRITE",
		3: "PERMISSION_ADMIN",
	}
	Permission_value = map[string]int32{
		"PERMISSION_UNSPECIFIED": 0,
		"PERMISSION_READ":        1,
		"PERMISSION_WRITE":       2,
		"PERMISSION_ADMIN":       3,
	}
)

func (x Permission) Enum() *Permission {
	p := new(Permission)
	*p = x
	return p
}

func (x Permission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Permission) Descriptor() protoreflect.EnumDescriptor {
	return file_chaincode_ccbio_schema_v1_service_proto_enumTypes[0].Descriptor()
}

func (Permission) Type() protoreflect.EnumType {
	return &file_chaincode_ccbio_schema_v1_service_proto_enumTypes[0]
}

func (x Permission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Permission.Descriptor instead.
func (Permission) EnumDescriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{0}
}

type Permissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles           bool `protobuf:"varint,1,opt,name=roles,proto3" json:"roles,omitempty"`
	RolePermissions bool `protobuf:"varint,2,opt,name=role_permissions,json=rolePermissions,proto3" json:"role_permissions,omitempty"`
	Users           bool `protobuf:"varint,3,opt,name=users,proto3" json:"users,omitempty"`
	Specimen        bool `protobuf:"varint,4,opt,name=specimen,proto3" json:"specimen,omitempty"`
	Primary         bool `protobuf:"varint,5,opt,name=primary,proto3" json:"primary,omitempty"`
	Secondary       bool `protobuf:"varint,6,opt,name=secondary,proto3" json:"secondary,omitempty"`
	Taxon           bool `protobuf:"varint,7,opt,name=taxon,proto3" json:"taxon,omitempty"`
	Georeference    bool `protobuf:"varint,8,opt,name=georeference,proto3" json:"georeference,omitempty"`
	Images          bool `protobuf:"varint,9,opt,name=images,proto3" json:"images,omitempty"`
	Loans           bool `protobuf:"varint,10,opt,name=loans,proto3" json:"loans,omitempty"`
	Grants          bool `protobuf:"varint,11,opt,name=grants,proto3" json:"grants,omitempty"`
	Hidden          bool `protobuf:"varint,12,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (x *Permissions) Reset() {
	*x = Permissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permissions) ProtoMessage() {}

func (x *Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permissions.ProtoReflect.Descriptor instead.
func (*Permissions) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *Permissions) GetRoles() bool {
	if x != nil {
		return x.Roles
	}
	return false
}

func (x *Permissions) GetRolePermissions() bool {
	if x != nil {
		return x.RolePermissions
	}
	return false
}

func (x *Permissions) GetUsers() bool {
	if x != nil {
		return x.Users
	}
	return false
}

func (x *Permissions) GetSpecimen() bool {
	if x != nil {
		return x.Specimen
	}
	return false
}

func (x *Permissions) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *Permissions) GetSecondary() bool {
	if x != nil {
		return x.Secondary
	}
	return false
}

func (x *Permissions) GetTaxon() bool {
	if x != nil {
		return x.Taxon
	}
	return false
}

func (x *Permissions) GetGeoreference() bool {
	if x != nil {
		return x.Georeference
	}
	return false
}

func (x *Permissions) GetImages() bool {
	if x != nil {
		return x.Images
	}
	return false
}

func (x *Permissions) GetLoans() bool {
	if x != nil {
		return x.Loans
	}
	return false
}

func (x *Permissions) GetGrants() bool {
	if x != nil {
		return x.Grants
	}
	return false
}

func (x *Permissions) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

type GetSuggestedUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *SuggestedUpdate_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSuggestedUpdateRequest) Reset() {
	*x = GetSuggestedUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSuggestedUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSuggestedUpdateRequest) ProtoMessage() {}

func (x *GetSuggestedUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSuggestedUpdateRequest.ProtoReflect.Descriptor instead.
func (*GetSuggestedUpdateRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetSuggestedUpdateRequest) GetId() *SuggestedUpdate_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetSuggestedUpdateBySpecimenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Specimen_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSuggestedUpdateBySpecimenRequest) Reset() {
	*x = GetSuggestedUpdateBySpecimenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSuggestedUpdateBySpecimenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSuggestedUpdateBySpecimenRequest) ProtoMessage() {}

func (x *GetSuggestedUpdateBySpecimenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSuggestedUpdateBySpecimenRequest.ProtoReflect.Descriptor instead.
func (*GetSuggestedUpdateBySpecimenRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetSuggestedUpdateBySpecimenRequest) GetId() *Specimen_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetSuggestedUpdateByCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Collection_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSuggestedUpdateByCollectionRequest) Reset() {
	*x = GetSuggestedUpdateByCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSuggestedUpdateByCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSuggestedUpdateByCollectionRequest) ProtoMessage() {}

func (x *GetSuggestedUpdateByCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSuggestedUpdateByCollectionRequest.ProtoReflect.Descriptor instead.
func (*GetSuggestedUpdateByCollectionRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetSuggestedUpdateByCollectionRequest) GetId() *Collection_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetUserListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserListRequest) Reset() {
	*x = GetUserListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserListRequest) ProtoMessage() {}

func (x *GetUserListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserListRequest.ProtoReflect.Descriptor instead.
func (*GetUserListRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{4}
}

type GetUserListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GetUserListResponse) Reset() {
	*x = GetUserListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserListResponse) ProtoMessage() {}

func (x *GetUserListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserListResponse.ProtoReflect.Descriptor instead.
func (*GetUserListResponse) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserListResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *User_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserRequest) GetId() *User_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Collection_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCollectionRequest) Reset() {
	*x = GetCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionRequest) ProtoMessage() {}

func (x *GetCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetCollectionRequest) GetId() *Collection_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetSpecimenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Specimen_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSpecimenRequest) Reset() {
	*x = GetSpecimenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpecimenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpecimenRequest) ProtoMessage() {}

func (x *GetSpecimenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpecimenRequest.ProtoReflect.Descriptor instead.
func (*GetSpecimenRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetSpecimenRequest) GetId() *Specimen_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetSpecimenHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *Specimen_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IncludeHidden bool         `protobuf:"varint,2,opt,name=include_hidden,json=includeHidden,proto3" json:"include_hidden,omitempty"`
}

func (x *GetSpecimenHistoryRequest) Reset() {
	*x = GetSpecimenHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpecimenHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpecimenHistoryRequest) ProtoMessage() {}

func (x *GetSpecimenHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpecimenHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetSpecimenHistoryRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetSpecimenHistoryRequest) GetId() *Specimen_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetSpecimenHistoryRequest) GetIncludeHidden() bool {
	if x != nil {
		return x.IncludeHidden
	}
	return false
}

type GetSpecimenByCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Collection_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSpecimenByCollectionRequest) Reset() {
	*x = GetSpecimenByCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpecimenByCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpecimenByCollectionRequest) ProtoMessage() {}

func (x *GetSpecimenByCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpecimenByCollectionRequest.ProtoReflect.Descriptor instead.
func (*GetSpecimenByCollectionRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetSpecimenByCollectionRequest) GetId() *Collection_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetUserByCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Collection_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUserByCollectionRequest) Reset() {
	*x = GetUserByCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByCollectionRequest) ProtoMessage() {}

func (x *GetUserByCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByCollectionRequest.ProtoReflect.Descriptor instead.
func (*GetUserByCollectionRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetUserByCollectionRequest) GetId() *Collection_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

type UserRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email       string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Affiliation string `protobuf:"bytes,3,opt,name=affiliation,proto3" json:"affiliation,omitempty"`
}

func (x *UserRegisterRequest) Reset() {
	*x = UserRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterRequest) ProtoMessage() {}

func (x *UserRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterRequest.ProtoReflect.Descriptor instead.
func (*UserRegisterRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *UserRegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserRegisterRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserRegisterRequest) GetAffiliation() string {
	if x != nil {
		return x.Affiliation
	}
	return ""
}

type UpdateMembershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       *User_Id       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CollectionId *Collection_Id `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	NewRole      Role           `protobuf:"varint,3,opt,name=new_role,json=newRole,proto3,enum=ccbio.schema.v1.Role" json:"new_role,omitempty"`
}

func (x *UpdateMembershipRequest) Reset() {
	*x = UpdateMembershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMembershipRequest) ProtoMessage() {}

func (x *UpdateMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMembershipRequest.ProtoReflect.Descriptor instead.
func (*UpdateMembershipRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateMembershipRequest) GetUserId() *User_Id {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UpdateMembershipRequest) GetCollectionId() *Collection_Id {
	if x != nil {
		return x.CollectionId
	}
	return nil
}

func (x *UpdateMembershipRequest) GetNewRole() Role {
	if x != nil {
		return x.NewRole
	}
	return Role_ROLE_PUBLIC_UNSPECIFIED
}

type CollectionCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection *Collection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *CollectionCreateRequest) Reset() {
	*x = CollectionCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCreateRequest) ProtoMessage() {}

func (x *CollectionCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCreateRequest.ProtoReflect.Descriptor instead.
func (*CollectionCreateRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *CollectionCreateRequest) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type CollectionUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection *Collection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *CollectionUpdateRequest) Reset() {
	*x = CollectionUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionUpdateRequest) ProtoMessage() {}

func (x *CollectionUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionUpdateRequest.ProtoReflect.Descriptor instead.
func (*CollectionUpdateRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *CollectionUpdateRequest) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type STest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Georeference *Specimen_Georeference `protobuf:"bytes,5,opt,name=georeference,proto3" json:"georeference,omitempty"`
}

func (x *STest) Reset() {
	*x = STest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STest) ProtoMessage() {}

func (x *STest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STest.ProtoReflect.Descriptor instead.
func (*STest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *STest) GetGeoreference() *Specimen_Georeference {
	if x != nil {
		return x.Georeference
	}
	return nil
}

type SpecimenCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specimen specimen = 1 [(buf.validate.field).required = true];
	Id           *Specimen_Id               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Taxon        *Specimen_Taxon            `protobuf:"bytes,2,opt,name=taxon,proto3" json:"taxon,omitempty"`
	Primary      *Specimen_Primary          `protobuf:"bytes,3,opt,name=primary,proto3" json:"primary,omitempty"`
	Secondary    *Specimen_Secondary        `protobuf:"bytes,4,opt,name=secondary,proto3" json:"secondary,omitempty"`
	Georeference *Specimen_Georeference     `protobuf:"bytes,5,opt,name=georeference,proto3" json:"georeference,omitempty"`
	Images       map[string]*Specimen_Image `protobuf:"bytes,7,rep,name=images,proto3" json:"images,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Loans        string                     `protobuf:"bytes,8,opt,name=loans,proto3" json:"loans,omitempty"`
	Grants       string                     `protobuf:"bytes,9,opt,name=grants,proto3" json:"grants,omitempty"`
}

func (x *SpecimenCreateRequest) Reset() {
	*x = SpecimenCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenCreateRequest) ProtoMessage() {}

func (x *SpecimenCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenCreateRequest.ProtoReflect.Descriptor instead.
func (*SpecimenCreateRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *SpecimenCreateRequest) GetId() *Specimen_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenCreateRequest) GetTaxon() *Specimen_Taxon {
	if x != nil {
		return x.Taxon
	}
	return nil
}

func (x *SpecimenCreateRequest) GetPrimary() *Specimen_Primary {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *SpecimenCreateRequest) GetSecondary() *Specimen_Secondary {
	if x != nil {
		return x.Secondary
	}
	return nil
}

func (x *SpecimenCreateRequest) GetGeoreference() *Specimen_Georeference {
	if x != nil {
		return x.Georeference
	}
	return nil
}

func (x *SpecimenCreateRequest) GetImages() map[string]*Specimen_Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *SpecimenCreateRequest) GetLoans() string {
	if x != nil {
		return x.Loans
	}
	return ""
}

func (x *SpecimenCreateRequest) GetGrants() string {
	if x != nil {
		return x.Grants
	}
	return ""
}

type SpecimenCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Specimen *Specimen `protobuf:"bytes,1,opt,name=specimen,proto3" json:"specimen,omitempty"`
}

func (x *SpecimenCreateResponse) Reset() {
	*x = SpecimenCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenCreateResponse) ProtoMessage() {}

func (x *SpecimenCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenCreateResponse.ProtoReflect.Descriptor instead.
func (*SpecimenCreateResponse) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *SpecimenCreateResponse) GetSpecimen() *Specimen {
	if x != nil {
		return x.Specimen
	}
	return nil
}

type SpecimenUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Specimen *Specimen `protobuf:"bytes,1,opt,name=specimen,proto3" json:"specimen,omitempty"`
}

func (x *SpecimenUpdateRequest) Reset() {
	*x = SpecimenUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenUpdateRequest) ProtoMessage() {}

func (x *SpecimenUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenUpdateRequest.ProtoReflect.Descriptor instead.
func (*SpecimenUpdateRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{19}
}

func (x *SpecimenUpdateRequest) GetSpecimen() *Specimen {
	if x != nil {
		return x.Specimen
	}
	return nil
}

type SpecimenHideTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Specimen_Id       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tx *Specimen_HiddenTx `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *SpecimenHideTxRequest) Reset() {
	*x = SpecimenHideTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenHideTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenHideTxRequest) ProtoMessage() {}

func (x *SpecimenHideTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenHideTxRequest.ProtoReflect.Descriptor instead.
func (*SpecimenHideTxRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{20}
}

func (x *SpecimenHideTxRequest) GetId() *Specimen_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenHideTxRequest) GetTx() *Specimen_HiddenTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

type SpecimenUnHideTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Specimen_Id       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tx *Specimen_HiddenTx `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *SpecimenUnHideTxRequest) Reset() {
	*x = SpecimenUnHideTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenUnHideTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenUnHideTxRequest) ProtoMessage() {}

func (x *SpecimenUnHideTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenUnHideTxRequest.ProtoReflect.Descriptor instead.
func (*SpecimenUnHideTxRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{21}
}

func (x *SpecimenUnHideTxRequest) GetId() *Specimen_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenUnHideTxRequest) GetTx() *Specimen_HiddenTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

type SpecimenDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *Specimen_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SpecimenDeleteRequest) Reset() {
	*x = SpecimenDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenDeleteRequest) ProtoMessage() {}

func (x *SpecimenDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenDeleteRequest.ProtoReflect.Descriptor instead.
func (*SpecimenDeleteRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{22}
}

func (x *SpecimenDeleteRequest) GetId() *Specimen_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

type SuggestedUpdateCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuggestedUpdate *SuggestedUpdate `protobuf:"bytes,1,opt,name=suggested_update,json=suggestedUpdate,proto3" json:"suggested_update,omitempty"`
}

func (x *SuggestedUpdateCreateRequest) Reset() {
	*x = SuggestedUpdateCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedUpdateCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedUpdateCreateRequest) ProtoMessage() {}

func (x *SuggestedUpdateCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedUpdateCreateRequest.ProtoReflect.Descriptor instead.
func (*SuggestedUpdateCreateRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{23}
}

func (x *SuggestedUpdateCreateRequest) GetSuggestedUpdate() *SuggestedUpdate {
	if x != nil {
		return x.SuggestedUpdate
	}
	return nil
}

type SuggestedUpdateApproveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *SuggestedUpdate_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment string              `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *SuggestedUpdateApproveRequest) Reset() {
	*x = SuggestedUpdateApproveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedUpdateApproveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedUpdateApproveRequest) ProtoMessage() {}

func (x *SuggestedUpdateApproveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedUpdateApproveRequest.ProtoReflect.Descriptor instead.
func (*SuggestedUpdateApproveRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{24}
}

func (x *SuggestedUpdateApproveRequest) GetId() *SuggestedUpdate_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SuggestedUpdateApproveRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type SuggestedUpdateRejectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *SuggestedUpdate_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment string              `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *SuggestedUpdateRejectRequest) Reset() {
	*x = SuggestedUpdateRejectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedUpdateRejectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedUpdateRejectRequest) ProtoMessage() {}

func (x *SuggestedUpdateRejectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v1_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedUpdateRejectRequest.ProtoReflect.Descriptor instead.
func (*SuggestedUpdateRejectRequest) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP(), []int{25}
}

func (x *SuggestedUpdateRejectRequest) GetId() *SuggestedUpdate_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SuggestedUpdateRejectRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

var File_chaincode_ccbio_schema_v1_service_proto protoreflect.FileDescriptor

var file_chaincode_ccbio_schema_v1_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x63, 0x62, 0x69,
	0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x63, 0x62, 0x69, 0x6f,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x02, 0x0a, 0x0b,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x6f, 0x6c,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x58,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x63,
	0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x63, 0x62,
	0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x22, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x80, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62,
	0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x22, 0x58, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xdb, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x5e, 0x0a,
	0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a,
	0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a,
	0x05, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x67, 0x65,
	0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc6, 0x04, 0x0a, 0x15, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x64, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x74, 0x61,
	0x78, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x63, 0x62, 0x69,
	0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x63, 0x62,
	0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x49,
	0x0a, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x0c, 0x67, 0x65, 0x6f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x0c, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x61,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x5a, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x16, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x15,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x48, 0x69, 0x64, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62,
	0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x54, 0x78, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x74, 0x78,
	0x22, 0x8b, 0x01, 0x0a, 0x17, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x55, 0x6e, 0x48,
	0x69, 0x64, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3a, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x54, 0x78, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x74, 0x78, 0x22, 0x4d,
	0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x49,
	0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x73, 0x0a,
	0x1c, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a,
	0x10, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x7e, 0x0a, 0x1d, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x7d, 0x0a, 0x1c, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2a, 0x69, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x32, 0xb0, 0x0c, 0x0a,
	0x17, 0x42, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x23, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63,
	0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x63,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x61, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x5c, 0x0a, 0x17, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x48, 0x69, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x48, 0x69, 0x64, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x60, 0x0a, 0x19, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x55, 0x6e, 0x48, 0x69, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x55, 0x6e, 0x48, 0x69, 0x64, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x0e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x62, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x79, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x12, 0x34, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x68, 0x0a, 0x15, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x63,
	0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x63,
	0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x67, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2d,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x32,
	0xfa, 0x06, 0x0a, 0x13, 0x42, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x15, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x12, 0x58,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x63, 0x63,
	0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x28, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x63, 0x62,
	0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x18, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1f, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x63, 0x62, 0x69,
	0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x63, 0x62,
	0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x59, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xc9, 0x01, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6e, 0x6f, 0x76, 0x61, 0x33, 0x38, 0x2f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2f, 0x6c,
	0x69, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x76, 0x31, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43,
	0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x63, 0x62, 0x69, 0x6f, 0x5c, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x63, 0x62, 0x69, 0x6f, 0x5c, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x63, 0x62, 0x69, 0x6f, 0x3a, 0x3a, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chaincode_ccbio_schema_v1_service_proto_rawDescOnce sync.Once
	file_chaincode_ccbio_schema_v1_service_proto_rawDescData = file_chaincode_ccbio_schema_v1_service_proto_rawDesc
)

func file_chaincode_ccbio_schema_v1_service_proto_rawDescGZIP() []byte {
	file_chaincode_ccbio_schema_v1_service_proto_rawDescOnce.Do(func() {
		file_chaincode_ccbio_schema_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chaincode_ccbio_schema_v1_service_proto_rawDescData)
	})
	return file_chaincode_ccbio_schema_v1_service_proto_rawDescData
}

var file_chaincode_ccbio_schema_v1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chaincode_ccbio_schema_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_chaincode_ccbio_schema_v1_service_proto_goTypes = []interface{}{
	(Permission)(0),                               // 0: ccbio.schema.v1.Permission
	(*Permissions)(nil),                           // 1: ccbio.schema.v1.Permissions
	(*GetSuggestedUpdateRequest)(nil),             // 2: ccbio.schema.v1.GetSuggestedUpdateRequest
	(*GetSuggestedUpdateBySpecimenRequest)(nil),   // 3: ccbio.schema.v1.GetSuggestedUpdateBySpecimenRequest
	(*GetSuggestedUpdateByCollectionRequest)(nil), // 4: ccbio.schema.v1.GetSuggestedUpdateByCollectionRequest
	(*GetUserListRequest)(nil),                    // 5: ccbio.schema.v1.GetUserListRequest
	(*GetUserListResponse)(nil),                   // 6: ccbio.schema.v1.GetUserListResponse
	(*GetUserRequest)(nil),                        // 7: ccbio.schema.v1.GetUserRequest
	(*GetCollectionRequest)(nil),                  // 8: ccbio.schema.v1.GetCollectionRequest
	(*GetSpecimenRequest)(nil),                    // 9: ccbio.schema.v1.GetSpecimenRequest
	(*GetSpecimenHistoryRequest)(nil),             // 10: ccbio.schema.v1.GetSpecimenHistoryRequest
	(*GetSpecimenByCollectionRequest)(nil),        // 11: ccbio.schema.v1.GetSpecimenByCollectionRequest
	(*GetUserByCollectionRequest)(nil),            // 12: ccbio.schema.v1.GetUserByCollectionRequest
	(*UserRegisterRequest)(nil),                   // 13: ccbio.schema.v1.UserRegisterRequest
	(*UpdateMembershipRequest)(nil),               // 14: ccbio.schema.v1.UpdateMembershipRequest
	(*CollectionCreateRequest)(nil),               // 15: ccbio.schema.v1.CollectionCreateRequest
	(*CollectionUpdateRequest)(nil),               // 16: ccbio.schema.v1.CollectionUpdateRequest
	(*STest)(nil),                                 // 17: ccbio.schema.v1.sTest
	(*SpecimenCreateRequest)(nil),                 // 18: ccbio.schema.v1.SpecimenCreateRequest
	(*SpecimenCreateResponse)(nil),                // 19: ccbio.schema.v1.SpecimenCreateResponse
	(*SpecimenUpdateRequest)(nil),                 // 20: ccbio.schema.v1.SpecimenUpdateRequest
	(*SpecimenHideTxRequest)(nil),                 // 21: ccbio.schema.v1.SpecimenHideTxRequest
	(*SpecimenUnHideTxRequest)(nil),               // 22: ccbio.schema.v1.SpecimenUnHideTxRequest
	(*SpecimenDeleteRequest)(nil),                 // 23: ccbio.schema.v1.SpecimenDeleteRequest
	(*SuggestedUpdateCreateRequest)(nil),          // 24: ccbio.schema.v1.SuggestedUpdateCreateRequest
	(*SuggestedUpdateApproveRequest)(nil),         // 25: ccbio.schema.v1.SuggestedUpdateApproveRequest
	(*SuggestedUpdateRejectRequest)(nil),          // 26: ccbio.schema.v1.SuggestedUpdateRejectRequest
	nil,                                           // 27: ccbio.schema.v1.SpecimenCreateRequest.ImagesEntry
	(*SuggestedUpdate_Id)(nil),                    // 28: ccbio.schema.v1.SuggestedUpdate.Id
	(*Specimen_Id)(nil),                           // 29: ccbio.schema.v1.Specimen.Id
	(*Collection_Id)(nil),                         // 30: ccbio.schema.v1.Collection.Id
	(*User)(nil),                                  // 31: ccbio.schema.v1.User
	(*User_Id)(nil),                               // 32: ccbio.schema.v1.User.Id
	(Role)(0),                                     // 33: ccbio.schema.v1.Role
	(*Collection)(nil),                            // 34: ccbio.schema.v1.Collection
	(*Specimen_Georeference)(nil),                 // 35: ccbio.schema.v1.Specimen.Georeference
	(*Specimen_Taxon)(nil),                        // 36: ccbio.schema.v1.Specimen.Taxon
	(*Specimen_Primary)(nil),                      // 37: ccbio.schema.v1.Specimen.Primary
	(*Specimen_Secondary)(nil),                    // 38: ccbio.schema.v1.Specimen.Secondary
	(*Specimen)(nil),                              // 39: ccbio.schema.v1.Specimen
	(*Specimen_HiddenTx)(nil),                     // 40: ccbio.schema.v1.Specimen.HiddenTx
	(*SuggestedUpdate)(nil),                       // 41: ccbio.schema.v1.SuggestedUpdate
	(*Specimen_Image)(nil),                        // 42: ccbio.schema.v1.Specimen.Image
	(*emptypb.Empty)(nil),                         // 43: google.protobuf.Empty
	(*Specimen_List)(nil),                         // 44: ccbio.schema.v1.Specimen.List
	(*Specimen_History)(nil),                      // 45: ccbio.schema.v1.Specimen.History
	(*SuggestedStateList)(nil),                    // 46: ccbio.schema.v1.SuggestedStateList
	(*CollectionList)(nil),                        // 47: ccbio.schema.v1.CollectionList
}
var file_chaincode_ccbio_schema_v1_service_proto_depIdxs = []int32{
	28, // 0: ccbio.schema.v1.GetSuggestedUpdateRequest.id:type_name -> ccbio.schema.v1.SuggestedUpdate.Id
	29, // 1: ccbio.schema.v1.GetSuggestedUpdateBySpecimenRequest.id:type_name -> ccbio.schema.v1.Specimen.Id
	30, // 2: ccbio.schema.v1.GetSuggestedUpdateByCollectionRequest.id:type_name -> ccbio.schema.v1.Collection.Id
	31, // 3: ccbio.schema.v1.GetUserListResponse.users:type_name -> ccbio.schema.v1.User
	32, // 4: ccbio.schema.v1.GetUserRequest.id:type_name -> ccbio.schema.v1.User.Id
	30, // 5: ccbio.schema.v1.GetCollectionRequest.id:type_name -> ccbio.schema.v1.Collection.Id
	29, // 6: ccbio.schema.v1.GetSpecimenRequest.id:type_name -> ccbio.schema.v1.Specimen.Id
	29, // 7: ccbio.schema.v1.GetSpecimenHistoryRequest.id:type_name -> ccbio.schema.v1.Specimen.Id
	30, // 8: ccbio.schema.v1.GetSpecimenByCollectionRequest.id:type_name -> ccbio.schema.v1.Collection.Id
	30, // 9: ccbio.schema.v1.GetUserByCollectionRequest.id:type_name -> ccbio.schema.v1.Collection.Id
	32, // 10: ccbio.schema.v1.UpdateMembershipRequest.user_id:type_name -> ccbio.schema.v1.User.Id
	30, // 11: ccbio.schema.v1.UpdateMembershipRequest.collection_id:type_name -> ccbio.schema.v1.Collection.Id
	33, // 12: ccbio.schema.v1.UpdateMembershipRequest.new_role:type_name -> ccbio.schema.v1.Role
	34, // 13: ccbio.schema.v1.CollectionCreateRequest.collection:type_name -> ccbio.schema.v1.Collection
	34, // 14: ccbio.schema.v1.CollectionUpdateRequest.collection:type_name -> ccbio.schema.v1.Collection
	35, // 15: ccbio.schema.v1.sTest.georeference:type_name -> ccbio.schema.v1.Specimen.Georeference
	29, // 16: ccbio.schema.v1.SpecimenCreateRequest.id:type_name -> ccbio.schema.v1.Specimen.Id
	36, // 17: ccbio.schema.v1.SpecimenCreateRequest.taxon:type_name -> ccbio.schema.v1.Specimen.Taxon
	37, // 18: ccbio.schema.v1.SpecimenCreateRequest.primary:type_name -> ccbio.schema.v1.Specimen.Primary
	38, // 19: ccbio.schema.v1.SpecimenCreateRequest.secondary:type_name -> ccbio.schema.v1.Specimen.Secondary
	35, // 20: ccbio.schema.v1.SpecimenCreateRequest.georeference:type_name -> ccbio.schema.v1.Specimen.Georeference
	27, // 21: ccbio.schema.v1.SpecimenCreateRequest.images:type_name -> ccbio.schema.v1.SpecimenCreateRequest.ImagesEntry
	39, // 22: ccbio.schema.v1.SpecimenCreateResponse.specimen:type_name -> ccbio.schema.v1.Specimen
	39, // 23: ccbio.schema.v1.SpecimenUpdateRequest.specimen:type_name -> ccbio.schema.v1.Specimen
	29, // 24: ccbio.schema.v1.SpecimenHideTxRequest.id:type_name -> ccbio.schema.v1.Specimen.Id
	40, // 25: ccbio.schema.v1.SpecimenHideTxRequest.tx:type_name -> ccbio.schema.v1.Specimen.HiddenTx
	29, // 26: ccbio.schema.v1.SpecimenUnHideTxRequest.id:type_name -> ccbio.schema.v1.Specimen.Id
	40, // 27: ccbio.schema.v1.SpecimenUnHideTxRequest.tx:type_name -> ccbio.schema.v1.Specimen.HiddenTx
	29, // 28: ccbio.schema.v1.SpecimenDeleteRequest.id:type_name -> ccbio.schema.v1.Specimen.Id
	41, // 29: ccbio.schema.v1.SuggestedUpdateCreateRequest.suggested_update:type_name -> ccbio.schema.v1.SuggestedUpdate
	28, // 30: ccbio.schema.v1.SuggestedUpdateApproveRequest.id:type_name -> ccbio.schema.v1.SuggestedUpdate.Id
	28, // 31: ccbio.schema.v1.SuggestedUpdateRejectRequest.id:type_name -> ccbio.schema.v1.SuggestedUpdate.Id
	42, // 32: ccbio.schema.v1.SpecimenCreateRequest.ImagesEntry.value:type_name -> ccbio.schema.v1.Specimen.Image
	9,  // 33: ccbio.schema.v1.BiochainSpecimenService.GetSpecimen:input_type -> ccbio.schema.v1.GetSpecimenRequest
	43, // 34: ccbio.schema.v1.BiochainSpecimenService.GetSpecimenList:input_type -> google.protobuf.Empty
	11, // 35: ccbio.schema.v1.BiochainSpecimenService.GetSpecimenByCollection:input_type -> ccbio.schema.v1.GetSpecimenByCollectionRequest
	10, // 36: ccbio.schema.v1.BiochainSpecimenService.GetSpecimenHistory:input_type -> ccbio.schema.v1.GetSpecimenHistoryRequest
	18, // 37: ccbio.schema.v1.BiochainSpecimenService.SpecimenCreate:input_type -> ccbio.schema.v1.SpecimenCreateRequest
	20, // 38: ccbio.schema.v1.BiochainSpecimenService.SpecimenUpdate:input_type -> ccbio.schema.v1.SpecimenUpdateRequest
	21, // 39: ccbio.schema.v1.BiochainSpecimenService.SpecimenHideTransaction:input_type -> ccbio.schema.v1.SpecimenHideTxRequest
	22, // 40: ccbio.schema.v1.BiochainSpecimenService.SpecimenUnHideTransaction:input_type -> ccbio.schema.v1.SpecimenUnHideTxRequest
	23, // 41: ccbio.schema.v1.BiochainSpecimenService.SpecimenDelete:input_type -> ccbio.schema.v1.SpecimenDeleteRequest
	2,  // 42: ccbio.schema.v1.BiochainSpecimenService.GetSuggestedUpdate:input_type -> ccbio.schema.v1.GetSuggestedUpdateRequest
	3,  // 43: ccbio.schema.v1.BiochainSpecimenService.GetSuggestedUpdateBySpecimen:input_type -> ccbio.schema.v1.GetSuggestedUpdateBySpecimenRequest
	4,  // 44: ccbio.schema.v1.BiochainSpecimenService.GetSuggestedUpdateByCollection:input_type -> ccbio.schema.v1.GetSuggestedUpdateByCollectionRequest
	43, // 45: ccbio.schema.v1.BiochainSpecimenService.GetSuggestedUpdateList:input_type -> google.protobuf.Empty
	24, // 46: ccbio.schema.v1.BiochainSpecimenService.SuggestedUpdateCreate:input_type -> ccbio.schema.v1.SuggestedUpdateCreateRequest
	25, // 47: ccbio.schema.v1.BiochainSpecimenService.SpecimenUpdateApprove:input_type -> ccbio.schema.v1.SuggestedUpdateApproveRequest
	26, // 48: ccbio.schema.v1.BiochainSpecimenService.SpecimenUpdateReject:input_type -> ccbio.schema.v1.SuggestedUpdateRejectRequest
	43, // 49: ccbio.schema.v1.BiochainAuthService.GetCurrentUser:input_type -> google.protobuf.Empty
	43, // 50: ccbio.schema.v1.BiochainAuthService.GetCurrentUserId:input_type -> google.protobuf.Empty
	5,  // 51: ccbio.schema.v1.BiochainAuthService.GetUserList:input_type -> ccbio.schema.v1.GetUserListRequest
	7,  // 52: ccbio.schema.v1.BiochainAuthService.GetUser:input_type -> ccbio.schema.v1.GetUserRequest
	13, // 53: ccbio.schema.v1.BiochainAuthService.UserRegister:input_type -> ccbio.schema.v1.UserRegisterRequest
	14, // 54: ccbio.schema.v1.BiochainAuthService.UserUpdateMembership:input_type -> ccbio.schema.v1.UpdateMembershipRequest
	32, // 55: ccbio.schema.v1.BiochainAuthService.AddTestUsers:input_type -> ccbio.schema.v1.User.Id
	43, // 56: ccbio.schema.v1.BiochainAuthService.GetCollectionList:input_type -> google.protobuf.Empty
	8,  // 57: ccbio.schema.v1.BiochainAuthService.GetCollection:input_type -> ccbio.schema.v1.GetCollectionRequest
	15, // 58: ccbio.schema.v1.BiochainAuthService.CollectionCreate:input_type -> ccbio.schema.v1.CollectionCreateRequest
	16, // 59: ccbio.schema.v1.BiochainAuthService.CollectionUpdate:input_type -> ccbio.schema.v1.CollectionUpdateRequest
	39, // 60: ccbio.schema.v1.BiochainSpecimenService.GetSpecimen:output_type -> ccbio.schema.v1.Specimen
	44, // 61: ccbio.schema.v1.BiochainSpecimenService.GetSpecimenList:output_type -> ccbio.schema.v1.Specimen.List
	44, // 62: ccbio.schema.v1.BiochainSpecimenService.GetSpecimenByCollection:output_type -> ccbio.schema.v1.Specimen.List
	45, // 63: ccbio.schema.v1.BiochainSpecimenService.GetSpecimenHistory:output_type -> ccbio.schema.v1.Specimen.History
	19, // 64: ccbio.schema.v1.BiochainSpecimenService.SpecimenCreate:output_type -> ccbio.schema.v1.SpecimenCreateResponse
	39, // 65: ccbio.schema.v1.BiochainSpecimenService.SpecimenUpdate:output_type -> ccbio.schema.v1.Specimen
	39, // 66: ccbio.schema.v1.BiochainSpecimenService.SpecimenHideTransaction:output_type -> ccbio.schema.v1.Specimen
	39, // 67: ccbio.schema.v1.BiochainSpecimenService.SpecimenUnHideTransaction:output_type -> ccbio.schema.v1.Specimen
	43, // 68: ccbio.schema.v1.BiochainSpecimenService.SpecimenDelete:output_type -> google.protobuf.Empty
	41, // 69: ccbio.schema.v1.BiochainSpecimenService.GetSuggestedUpdate:output_type -> ccbio.schema.v1.SuggestedUpdate
	46, // 70: ccbio.schema.v1.BiochainSpecimenService.GetSuggestedUpdateBySpecimen:output_type -> ccbio.schema.v1.SuggestedStateList
	46, // 71: ccbio.schema.v1.BiochainSpecimenService.GetSuggestedUpdateByCollection:output_type -> ccbio.schema.v1.SuggestedStateList
	39, // 72: ccbio.schema.v1.BiochainSpecimenService.GetSuggestedUpdateList:output_type -> ccbio.schema.v1.Specimen
	41, // 73: ccbio.schema.v1.BiochainSpecimenService.SuggestedUpdateCreate:output_type -> ccbio.schema.v1.SuggestedUpdate
	39, // 74: ccbio.schema.v1.BiochainSpecimenService.SpecimenUpdateApprove:output_type -> ccbio.schema.v1.Specimen
	41, // 75: ccbio.schema.v1.BiochainSpecimenService.SpecimenUpdateReject:output_type -> ccbio.schema.v1.SuggestedUpdate
	31, // 76: ccbio.schema.v1.BiochainAuthService.GetCurrentUser:output_type -> ccbio.schema.v1.User
	32, // 77: ccbio.schema.v1.BiochainAuthService.GetCurrentUserId:output_type -> ccbio.schema.v1.User.Id
	6,  // 78: ccbio.schema.v1.BiochainAuthService.GetUserList:output_type -> ccbio.schema.v1.GetUserListResponse
	31, // 79: ccbio.schema.v1.BiochainAuthService.GetUser:output_type -> ccbio.schema.v1.User
	31, // 80: ccbio.schema.v1.BiochainAuthService.UserRegister:output_type -> ccbio.schema.v1.User
	31, // 81: ccbio.schema.v1.BiochainAuthService.UserUpdateMembership:output_type -> ccbio.schema.v1.User
	43, // 82: ccbio.schema.v1.BiochainAuthService.AddTestUsers:output_type -> google.protobuf.Empty
	47, // 83: ccbio.schema.v1.BiochainAuthService.GetCollectionList:output_type -> ccbio.schema.v1.CollectionList
	34, // 84: ccbio.schema.v1.BiochainAuthService.GetCollection:output_type -> ccbio.schema.v1.Collection
	34, // 85: ccbio.schema.v1.BiochainAuthService.CollectionCreate:output_type -> ccbio.schema.v1.Collection
	34, // 86: ccbio.schema.v1.BiochainAuthService.CollectionUpdate:output_type -> ccbio.schema.v1.Collection
	60, // [60:87] is the sub-list for method output_type
	33, // [33:60] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_chaincode_ccbio_schema_v1_service_proto_init() }
func file_chaincode_ccbio_schema_v1_service_proto_init() {
	if File_chaincode_ccbio_schema_v1_service_proto != nil {
		return
	}
	file_chaincode_ccbio_schema_v1_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSuggestedUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSuggestedUpdateBySpecimenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSuggestedUpdateByCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpecimenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpecimenHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpecimenByCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMembershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenHideTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenUnHideTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedUpdateCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedUpdateApproveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v1_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedUpdateRejectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chaincode_ccbio_schema_v1_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_chaincode_ccbio_schema_v1_service_proto_goTypes,
		DependencyIndexes: file_chaincode_ccbio_schema_v1_service_proto_depIdxs,
		EnumInfos:         file_chaincode_ccbio_schema_v1_service_proto_enumTypes,
		MessageInfos:      file_chaincode_ccbio_schema_v1_service_proto_msgTypes,
	}.Build()
	File_chaincode_ccbio_schema_v1_service_proto = out.File
	file_chaincode_ccbio_schema_v1_service_proto_rawDesc = nil
	file_chaincode_ccbio_schema_v1_service_proto_goTypes = nil
	file_chaincode_ccbio_schema_v1_service_proto_depIdxs = nil
}
