// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: chaincode/ccbio/schema/v0/state.proto

package v0

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/nova38/thesis/lib/go/gen/auth/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Specimen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string                     `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	SpecimenId   string                     `protobuf:"bytes,2,opt,name=specimen_id,json=specimenId,proto3" json:"specimen_id,omitempty"`
	Primary      *Specimen_Primary          `protobuf:"bytes,3,opt,name=primary,proto3" json:"primary,omitempty"`
	Secondary    *Specimen_Secondary        `protobuf:"bytes,4,opt,name=secondary,proto3" json:"secondary,omitempty"`
	Taxon        *Specimen_Taxon            `protobuf:"bytes,5,opt,name=taxon,proto3" json:"taxon,omitempty"`
	Georeference *Specimen_Georeference     `protobuf:"bytes,6,opt,name=georeference,proto3" json:"georeference,omitempty"`
	Images       map[string]*Specimen_Image `protobuf:"bytes,7,rep,name=images,proto3" json:"images,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Loans        map[string]*Specimen_Loan  `protobuf:"bytes,10,rep,name=loans,proto3" json:"loans,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Grants       map[string]*Specimen_Grant `protobuf:"bytes,11,rep,name=grants,proto3" json:"grants,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Specimen) Reset() {
	*x = Specimen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen) ProtoMessage() {}

func (x *Specimen) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen.ProtoReflect.Descriptor instead.
func (*Specimen) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v0_state_proto_rawDescGZIP(), []int{0}
}

func (x *Specimen) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Specimen) GetSpecimenId() string {
	if x != nil {
		return x.SpecimenId
	}
	return ""
}

func (x *Specimen) GetPrimary() *Specimen_Primary {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *Specimen) GetSecondary() *Specimen_Secondary {
	if x != nil {
		return x.Secondary
	}
	return nil
}

func (x *Specimen) GetTaxon() *Specimen_Taxon {
	if x != nil {
		return x.Taxon
	}
	return nil
}

func (x *Specimen) GetGeoreference() *Specimen_Georeference {
	if x != nil {
		return x.Georeference
	}
	return nil
}

func (x *Specimen) GetImages() map[string]*Specimen_Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Specimen) GetLoans() map[string]*Specimen_Loan {
	if x != nil {
		return x.Loans
	}
	return nil
}

func (x *Specimen) GetGrants() map[string]*Specimen_Grant {
	if x != nil {
		return x.Grants
	}
	return nil
}

type Specimen_Primary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogNumber    string                 `protobuf:"bytes,1,opt,name=catalog_number,json=catalogNumber,proto3" json:"catalog_number,omitempty"`
	AccessionNumber  string                 `protobuf:"bytes,2,opt,name=accession_number,json=accessionNumber,proto3" json:"accession_number,omitempty"`
	FieldNumber      string                 `protobuf:"bytes,3,opt,name=field_number,json=fieldNumber,proto3" json:"field_number,omitempty"`
	TissueNumber     string                 `protobuf:"bytes,4,opt,name=tissue_number,json=tissueNumber,proto3" json:"tissue_number,omitempty"`
	Cataloger        string                 `protobuf:"bytes,5,opt,name=cataloger,proto3" json:"cataloger,omitempty"`
	Collector        string                 `protobuf:"bytes,6,opt,name=collector,proto3" json:"collector,omitempty"`
	Determiner       string                 `protobuf:"bytes,7,opt,name=determiner,proto3" json:"determiner,omitempty"`
	FieldDate        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=field_date,json=fieldDate,proto3" json:"field_date,omitempty"`
	CatalogDate      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=catalog_date,json=catalogDate,proto3" json:"catalog_date,omitempty"`
	DeterminedDate   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=determined_date,json=determinedDate,proto3" json:"determined_date,omitempty"`
	DeterminedReason string                 `protobuf:"bytes,11,opt,name=determined_reason,json=determinedReason,proto3" json:"determined_reason,omitempty"`
	LastModified     *v1.StateActivity      `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Primary) Reset() {
	*x = Specimen_Primary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Primary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Primary) ProtoMessage() {}

func (x *Specimen_Primary) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Primary.ProtoReflect.Descriptor instead.
func (*Specimen_Primary) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v0_state_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Specimen_Primary) GetCatalogNumber() string {
	if x != nil {
		return x.CatalogNumber
	}
	return ""
}

func (x *Specimen_Primary) GetAccessionNumber() string {
	if x != nil {
		return x.AccessionNumber
	}
	return ""
}

func (x *Specimen_Primary) GetFieldNumber() string {
	if x != nil {
		return x.FieldNumber
	}
	return ""
}

func (x *Specimen_Primary) GetTissueNumber() string {
	if x != nil {
		return x.TissueNumber
	}
	return ""
}

func (x *Specimen_Primary) GetCataloger() string {
	if x != nil {
		return x.Cataloger
	}
	return ""
}

func (x *Specimen_Primary) GetCollector() string {
	if x != nil {
		return x.Collector
	}
	return ""
}

func (x *Specimen_Primary) GetDeterminer() string {
	if x != nil {
		return x.Determiner
	}
	return ""
}

func (x *Specimen_Primary) GetFieldDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FieldDate
	}
	return nil
}

func (x *Specimen_Primary) GetCatalogDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CatalogDate
	}
	return nil
}

func (x *Specimen_Primary) GetDeterminedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeterminedDate
	}
	return nil
}

func (x *Specimen_Primary) GetDeterminedReason() string {
	if x != nil {
		return x.DeterminedReason
	}
	return ""
}

func (x *Specimen_Primary) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Secondary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preparation  string            `protobuf:"bytes,3,opt,name=preparation,proto3" json:"preparation,omitempty"`
	Condition    string            `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	Notes        string            `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	LastModified *v1.StateActivity `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Secondary) Reset() {
	*x = Specimen_Secondary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Secondary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Secondary) ProtoMessage() {}

func (x *Specimen_Secondary) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Secondary.ProtoReflect.Descriptor instead.
func (*Specimen_Secondary) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v0_state_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Specimen_Secondary) GetPreparation() string {
	if x != nil {
		return x.Preparation
	}
	return ""
}

func (x *Specimen_Secondary) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Specimen_Secondary) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Specimen_Secondary) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Taxon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kingdom      string            `protobuf:"bytes,1,opt,name=kingdom,proto3" json:"kingdom,omitempty"`
	Phylum       string            `protobuf:"bytes,2,opt,name=phylum,proto3" json:"phylum,omitempty"`
	Class        string            `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
	Order        string            `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	Family       string            `protobuf:"bytes,5,opt,name=family,proto3" json:"family,omitempty"`
	Genus        string            `protobuf:"bytes,6,opt,name=genus,proto3" json:"genus,omitempty"`
	Species      string            `protobuf:"bytes,7,opt,name=species,proto3" json:"species,omitempty"`
	Subspecies   string            `protobuf:"bytes,8,opt,name=subspecies,proto3" json:"subspecies,omitempty"`
	LastModified *v1.StateActivity `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Taxon) Reset() {
	*x = Specimen_Taxon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Taxon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Taxon) ProtoMessage() {}

func (x *Specimen_Taxon) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Taxon.ProtoReflect.Descriptor instead.
func (*Specimen_Taxon) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v0_state_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Specimen_Taxon) GetKingdom() string {
	if x != nil {
		return x.Kingdom
	}
	return ""
}

func (x *Specimen_Taxon) GetPhylum() string {
	if x != nil {
		return x.Phylum
	}
	return ""
}

func (x *Specimen_Taxon) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Specimen_Taxon) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *Specimen_Taxon) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *Specimen_Taxon) GetGenus() string {
	if x != nil {
		return x.Genus
	}
	return ""
}

func (x *Specimen_Taxon) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *Specimen_Taxon) GetSubspecies() string {
	if x != nil {
		return x.Subspecies
	}
	return ""
}

func (x *Specimen_Taxon) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Georeference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country       string            `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	StateProvince string            `protobuf:"bytes,2,opt,name=state_province,json=stateProvince,proto3" json:"state_province,omitempty"`
	County        string            `protobuf:"bytes,3,opt,name=county,proto3" json:"county,omitempty"`
	Locality      string            `protobuf:"bytes,4,opt,name=locality,proto3" json:"locality,omitempty"`
	Latitude      string            `protobuf:"bytes,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     string            `protobuf:"bytes,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Habitat       string            `protobuf:"bytes,7,opt,name=habitat,proto3" json:"habitat,omitempty"`
	Notes         []string          `protobuf:"bytes,8,rep,name=notes,proto3" json:"notes,omitempty"`
	LastModified  *v1.StateActivity `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Georeference) Reset() {
	*x = Specimen_Georeference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Georeference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Georeference) ProtoMessage() {}

func (x *Specimen_Georeference) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Georeference.ProtoReflect.Descriptor instead.
func (*Specimen_Georeference) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v0_state_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Specimen_Georeference) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Specimen_Georeference) GetStateProvince() string {
	if x != nil {
		return x.StateProvince
	}
	return ""
}

func (x *Specimen_Georeference) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *Specimen_Georeference) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *Specimen_Georeference) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *Specimen_Georeference) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *Specimen_Georeference) GetHabitat() string {
	if x != nil {
		return x.Habitat
	}
	return ""
}

func (x *Specimen_Georeference) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Specimen_Georeference) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

// Mapped Types
type Specimen_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url          string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Notes        string            `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	Hash         string            `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	LastModified *v1.StateActivity `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Image) Reset() {
	*x = Specimen_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Image) ProtoMessage() {}

func (x *Specimen_Image) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Image.ProtoReflect.Descriptor instead.
func (*Specimen_Image) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v0_state_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Specimen_Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Specimen_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Specimen_Image) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Specimen_Image) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Specimen_Image) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Loan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description  string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LoanedBy     string                 `protobuf:"bytes,3,opt,name=loaned_by,json=loanedBy,proto3" json:"loaned_by,omitempty"`
	LoanedTo     string                 `protobuf:"bytes,4,opt,name=loaned_to,json=loanedTo,proto3" json:"loaned_to,omitempty"`
	LoanedDate   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=loaned_date,json=loanedDate,proto3" json:"loaned_date,omitempty"`
	LastModified *v1.StateActivity      `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Loan) Reset() {
	*x = Specimen_Loan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Loan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Loan) ProtoMessage() {}

func (x *Specimen_Loan) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Loan.ProtoReflect.Descriptor instead.
func (*Specimen_Loan) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v0_state_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Specimen_Loan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Specimen_Loan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Specimen_Loan) GetLoanedBy() string {
	if x != nil {
		return x.LoanedBy
	}
	return ""
}

func (x *Specimen_Loan) GetLoanedTo() string {
	if x != nil {
		return x.LoanedTo
	}
	return ""
}

func (x *Specimen_Loan) GetLoanedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LoanedDate
	}
	return nil
}

func (x *Specimen_Loan) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Grant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description  string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	GrantedBy    string                 `protobuf:"bytes,3,opt,name=granted_by,json=grantedBy,proto3" json:"granted_by,omitempty"`
	GrantedTo    string                 `protobuf:"bytes,4,opt,name=granted_to,json=grantedTo,proto3" json:"granted_to,omitempty"`
	GrantedDate  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=granted_date,json=grantedDate,proto3" json:"granted_date,omitempty"`
	LastModified *v1.StateActivity      `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Grant) Reset() {
	*x = Specimen_Grant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Grant) ProtoMessage() {}

func (x *Specimen_Grant) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_ccbio_schema_v0_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Grant.ProtoReflect.Descriptor instead.
func (*Specimen_Grant) Descriptor() ([]byte, []int) {
	return file_chaincode_ccbio_schema_v0_state_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Specimen_Grant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Specimen_Grant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Specimen_Grant) GetGrantedBy() string {
	if x != nil {
		return x.GrantedBy
	}
	return ""
}

func (x *Specimen_Grant) GetGrantedTo() string {
	if x != nil {
		return x.GrantedTo
	}
	return ""
}

func (x *Specimen_Grant) GetGrantedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.GrantedDate
	}
	return nil
}

func (x *Specimen_Grant) GetLastModified() *v1.StateActivity {
	if x != nil {
		return x.LastModified
	}
	return nil
}

var File_chaincode_ccbio_schema_v0_state_proto protoreflect.FileDescriptor

var file_chaincode_ccbio_schema_v0_state_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x63, 0x62, 0x69,
	0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x30, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x15, 0x0a,
	0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x63, 0x62,
	0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x78,
	0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x74, 0x61, 0x78, 0x6f,
	0x6e, 0x12, 0x52, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x4c,
	0x6f, 0x61, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x12, 0x3d, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x30, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x1a,
	0xa5, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x87, 0x02, 0x0a, 0x05, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x79,
	0x6c, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x79, 0x6c, 0x75,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a,
	0xa7, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x8d, 0x01, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x38, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0xe9, 0x01, 0x0a, 0x04, 0x4c, 0x6f,
	0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x3b,
	0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6c, 0x6f, 0x61, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0xf0, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x12,
	0x3d, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x5a, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x4c,
	0x6f, 0x61, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a,
	0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x30,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x1f, 0xba, 0xd4, 0x1a, 0x1b,
	0x12, 0x19, 0x0a, 0x10, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x0a, 0x05, 0x69, 0x64, 0x2e, 0x69, 0x64, 0x42, 0xbe, 0x01, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x30, 0x42, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f,
	0x76, 0x61, 0x33, 0x38, 0x2f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2f, 0x6c, 0x69, 0x62, 0x2f,
	0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x2f, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x30,
	0xa2, 0x02, 0x03, 0x43, 0x53, 0x56, 0xaa, 0x02, 0x0f, 0x43, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x30, 0xca, 0x02, 0x0f, 0x43, 0x63, 0x62, 0x69, 0x6f,
	0x5c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5c, 0x56, 0x30, 0xe2, 0x02, 0x1b, 0x43, 0x63, 0x62,
	0x69, 0x6f, 0x5c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5c, 0x56, 0x30, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x63, 0x62, 0x69, 0x6f,
	0x3a, 0x3a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x3a, 0x3a, 0x56, 0x30, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chaincode_ccbio_schema_v0_state_proto_rawDescOnce sync.Once
	file_chaincode_ccbio_schema_v0_state_proto_rawDescData = file_chaincode_ccbio_schema_v0_state_proto_rawDesc
)

func file_chaincode_ccbio_schema_v0_state_proto_rawDescGZIP() []byte {
	file_chaincode_ccbio_schema_v0_state_proto_rawDescOnce.Do(func() {
		file_chaincode_ccbio_schema_v0_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_chaincode_ccbio_schema_v0_state_proto_rawDescData)
	})
	return file_chaincode_ccbio_schema_v0_state_proto_rawDescData
}

var file_chaincode_ccbio_schema_v0_state_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_chaincode_ccbio_schema_v0_state_proto_goTypes = []interface{}{
	(*Specimen)(nil),              // 0: ccbio.schema.v0.Specimen
	(*Specimen_Primary)(nil),      // 1: ccbio.schema.v0.Specimen.Primary
	(*Specimen_Secondary)(nil),    // 2: ccbio.schema.v0.Specimen.Secondary
	(*Specimen_Taxon)(nil),        // 3: ccbio.schema.v0.Specimen.Taxon
	(*Specimen_Georeference)(nil), // 4: ccbio.schema.v0.Specimen.Georeference
	(*Specimen_Image)(nil),        // 5: ccbio.schema.v0.Specimen.Image
	(*Specimen_Loan)(nil),         // 6: ccbio.schema.v0.Specimen.Loan
	(*Specimen_Grant)(nil),        // 7: ccbio.schema.v0.Specimen.Grant
	nil,                           // 8: ccbio.schema.v0.Specimen.ImagesEntry
	nil,                           // 9: ccbio.schema.v0.Specimen.LoansEntry
	nil,                           // 10: ccbio.schema.v0.Specimen.GrantsEntry
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
	(*v1.StateActivity)(nil),      // 12: auth.StateActivity
}
var file_chaincode_ccbio_schema_v0_state_proto_depIdxs = []int32{
	1,  // 0: ccbio.schema.v0.Specimen.primary:type_name -> ccbio.schema.v0.Specimen.Primary
	2,  // 1: ccbio.schema.v0.Specimen.secondary:type_name -> ccbio.schema.v0.Specimen.Secondary
	3,  // 2: ccbio.schema.v0.Specimen.taxon:type_name -> ccbio.schema.v0.Specimen.Taxon
	4,  // 3: ccbio.schema.v0.Specimen.georeference:type_name -> ccbio.schema.v0.Specimen.Georeference
	8,  // 4: ccbio.schema.v0.Specimen.images:type_name -> ccbio.schema.v0.Specimen.ImagesEntry
	9,  // 5: ccbio.schema.v0.Specimen.loans:type_name -> ccbio.schema.v0.Specimen.LoansEntry
	10, // 6: ccbio.schema.v0.Specimen.grants:type_name -> ccbio.schema.v0.Specimen.GrantsEntry
	11, // 7: ccbio.schema.v0.Specimen.Primary.field_date:type_name -> google.protobuf.Timestamp
	11, // 8: ccbio.schema.v0.Specimen.Primary.catalog_date:type_name -> google.protobuf.Timestamp
	11, // 9: ccbio.schema.v0.Specimen.Primary.determined_date:type_name -> google.protobuf.Timestamp
	12, // 10: ccbio.schema.v0.Specimen.Primary.last_modified:type_name -> auth.StateActivity
	12, // 11: ccbio.schema.v0.Specimen.Secondary.last_modified:type_name -> auth.StateActivity
	12, // 12: ccbio.schema.v0.Specimen.Taxon.last_modified:type_name -> auth.StateActivity
	12, // 13: ccbio.schema.v0.Specimen.Georeference.last_modified:type_name -> auth.StateActivity
	12, // 14: ccbio.schema.v0.Specimen.Image.last_modified:type_name -> auth.StateActivity
	11, // 15: ccbio.schema.v0.Specimen.Loan.loaned_date:type_name -> google.protobuf.Timestamp
	12, // 16: ccbio.schema.v0.Specimen.Loan.last_modified:type_name -> auth.StateActivity
	11, // 17: ccbio.schema.v0.Specimen.Grant.granted_date:type_name -> google.protobuf.Timestamp
	12, // 18: ccbio.schema.v0.Specimen.Grant.last_modified:type_name -> auth.StateActivity
	5,  // 19: ccbio.schema.v0.Specimen.ImagesEntry.value:type_name -> ccbio.schema.v0.Specimen.Image
	6,  // 20: ccbio.schema.v0.Specimen.LoansEntry.value:type_name -> ccbio.schema.v0.Specimen.Loan
	7,  // 21: ccbio.schema.v0.Specimen.GrantsEntry.value:type_name -> ccbio.schema.v0.Specimen.Grant
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_chaincode_ccbio_schema_v0_state_proto_init() }
func file_chaincode_ccbio_schema_v0_state_proto_init() {
	if File_chaincode_ccbio_schema_v0_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chaincode_ccbio_schema_v0_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v0_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Primary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v0_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Secondary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v0_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Taxon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v0_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Georeference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v0_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v0_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Loan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_ccbio_schema_v0_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Grant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chaincode_ccbio_schema_v0_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chaincode_ccbio_schema_v0_state_proto_goTypes,
		DependencyIndexes: file_chaincode_ccbio_schema_v0_state_proto_depIdxs,
		MessageInfos:      file_chaincode_ccbio_schema_v0_state_proto_msgTypes,
	}.Build()
	File_chaincode_ccbio_schema_v0_state_proto = out.File
	file_chaincode_ccbio_schema_v0_state_proto_rawDesc = nil
	file_chaincode_ccbio_schema_v0_state_proto_goTypes = nil
	file_chaincode_ccbio_schema_v0_state_proto_depIdxs = nil
}
