// Code generated by proto-gen-go-auth_pb. DO NOT EDIT.
// versions:
// - protoc-gen-cckey v0.0.1
// source: chaincode/ccbio/schema/v0/service.proto

package v0

import (
	json "encoding/json"
	client "github.com/hyperledger/fabric-gateway/pkg/client"
)

// SpecimenServiceHandler is used to interact with the service with the gateway
type SpecimenServiceHandler struct {
	ChaincodeName string
	contract      *client.Contract
}

func (s *SpecimenServiceHandler) SpecimenGet(in *SpecimenGetRequest) (out *SpecimenGetResponse) {
	inBytes, err := json.Marshal(in)
	if err != nil {
		return nil
	}
	evaluateResult, err := s.contract.EvaluateTransaction(s.ChaincodeName+":SpecimenGet", string(inBytes))
	if err != nil {
		return nil
	}
	err = json.Unmarshal(evaluateResult, &out)
	if err != nil {
		return nil
	}
	return out
}
func (s *SpecimenServiceHandler) SpecimenGetList(in *SpecimenGetListRequest) (out *SpecimenGetListResponse) {
	inBytes, err := json.Marshal(in)
	if err != nil {
		return nil
	}
	evaluateResult, err := s.contract.EvaluateTransaction(s.ChaincodeName+":SpecimenGetList", string(inBytes))
	if err != nil {
		return nil
	}
	err = json.Unmarshal(evaluateResult, &out)
	if err != nil {
		return nil
	}
	return out
}
func (s *SpecimenServiceHandler) SpecimenGetByCollection(in *SpecimenGetByCollectionRequest) (out *SpecimenGetByCollectionResponse) {
	inBytes, err := json.Marshal(in)
	if err != nil {
		return nil
	}
	evaluateResult, err := s.contract.EvaluateTransaction(s.ChaincodeName+":SpecimenGetByCollection", string(inBytes))
	if err != nil {
		return nil
	}
	err = json.Unmarshal(evaluateResult, &out)
	if err != nil {
		return nil
	}
	return out
}
func (s *SpecimenServiceHandler) SpecimenGetHistory(in *SpecimenGetHistoryRequest) (out *SpecimenGetHistoryResponse) {
	inBytes, err := json.Marshal(in)
	if err != nil {
		return nil
	}
	evaluateResult, err := s.contract.EvaluateTransaction(s.ChaincodeName+":SpecimenGetHistory", string(inBytes))
	if err != nil {
		return nil
	}
	err = json.Unmarshal(evaluateResult, &out)
	if err != nil {
		return nil
	}
	return out
}
func (s *SpecimenServiceHandler) SpecimenCreate(in *SpecimenCreateRequest) (out *SpecimenCreateResponse) {
	inBytes, err := json.Marshal(in)
	if err != nil {
		return nil
	}
	evaluateResult, err := s.contract.SubmitTransaction(s.ChaincodeName+":SpecimenCreate", string(inBytes))
	if err != nil {
		return nil
	}
	err = json.Unmarshal(evaluateResult, &out)
	if err != nil {
		return nil
	}
	return out
}
func (s *SpecimenServiceHandler) SpecimenUpdate(in *SpecimenUpdateRequest) (out *SpecimenUpdateResponse) {
	inBytes, err := json.Marshal(in)
	if err != nil {
		return nil
	}
	evaluateResult, err := s.contract.SubmitTransaction(s.ChaincodeName+":SpecimenUpdate", string(inBytes))
	if err != nil {
		return nil
	}
	err = json.Unmarshal(evaluateResult, &out)
	if err != nil {
		return nil
	}
	return out
}
func (s *SpecimenServiceHandler) SpecimenDelete(in *SpecimenDeleteRequest) (out *SpecimenDeleteResponse) {
	inBytes, err := json.Marshal(in)
	if err != nil {
		return nil
	}
	evaluateResult, err := s.contract.SubmitTransaction(s.ChaincodeName+":SpecimenDelete", string(inBytes))
	if err != nil {
		return nil
	}
	err = json.Unmarshal(evaluateResult, &out)
	if err != nil {
		return nil
	}
	return out
}
func (s *SpecimenServiceHandler) SpecimenHideTx(in *SpecimenHideTxRequest) (out *SpecimenHideTxResponse) {
	inBytes, err := json.Marshal(in)
	if err != nil {
		return nil
	}
	evaluateResult, err := s.contract.SubmitTransaction(s.ChaincodeName+":SpecimenHideTx", string(inBytes))
	if err != nil {
		return nil
	}
	err = json.Unmarshal(evaluateResult, &out)
	if err != nil {
		return nil
	}
	return out
}
func (s *SpecimenServiceHandler) SpecimenUnHideTx(in *SpecimenUnHideTxRequest) (out *SpecimenUnHideTxResponse) {
	inBytes, err := json.Marshal(in)
	if err != nil {
		return nil
	}
	evaluateResult, err := s.contract.SubmitTransaction(s.ChaincodeName+":SpecimenUnHideTx", string(inBytes))
	if err != nil {
		return nil
	}
	err = json.Unmarshal(evaluateResult, &out)
	if err != nil {
		return nil
	}
	return out
}
