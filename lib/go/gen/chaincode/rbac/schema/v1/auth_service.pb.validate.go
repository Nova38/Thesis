// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaincode/rbac/schema/v1/auth_service.proto

package schemav1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserGetCurrentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetCurrentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetCurrentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetCurrentResponseMultiError, or nil if none found.
func (m *UserGetCurrentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetCurrentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetCurrentResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetCurrentResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetCurrentResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetCurrentResponseMultiError(errors)
	}

	return nil
}

// UserGetCurrentResponseMultiError is an error wrapping multiple validation
// errors returned by UserGetCurrentResponse.ValidateAll() if the designated
// constraints aren't met.
type UserGetCurrentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetCurrentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetCurrentResponseMultiError) AllErrors() []error { return m }

// UserGetCurrentResponseValidationError is the validation error returned by
// UserGetCurrentResponse.Validate if the designated constraints aren't met.
type UserGetCurrentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetCurrentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetCurrentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetCurrentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetCurrentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetCurrentResponseValidationError) ErrorName() string {
	return "UserGetCurrentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetCurrentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetCurrentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetCurrentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetCurrentResponseValidationError{}

// Validate checks the field values on UserGetCurrentIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetCurrentIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetCurrentIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetCurrentIdResponseMultiError, or nil if none found.
func (m *UserGetCurrentIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetCurrentIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetCurrentIdResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetCurrentIdResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetCurrentIdResponseValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetCurrentIdResponseMultiError(errors)
	}

	return nil
}

// UserGetCurrentIdResponseMultiError is an error wrapping multiple validation
// errors returned by UserGetCurrentIdResponse.ValidateAll() if the designated
// constraints aren't met.
type UserGetCurrentIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetCurrentIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetCurrentIdResponseMultiError) AllErrors() []error { return m }

// UserGetCurrentIdResponseValidationError is the validation error returned by
// UserGetCurrentIdResponse.Validate if the designated constraints aren't met.
type UserGetCurrentIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetCurrentIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetCurrentIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetCurrentIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetCurrentIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetCurrentIdResponseValidationError) ErrorName() string {
	return "UserGetCurrentIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetCurrentIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetCurrentIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetCurrentIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetCurrentIdResponseValidationError{}

// Validate checks the field values on UserGetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetListResponseMultiError, or nil if none found.
func (m *UserGetListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserGetListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserGetListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserGetListResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserGetListResponseMultiError(errors)
	}

	return nil
}

// UserGetListResponseMultiError is an error wrapping multiple validation
// errors returned by UserGetListResponse.ValidateAll() if the designated
// constraints aren't met.
type UserGetListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetListResponseMultiError) AllErrors() []error { return m }

// UserGetListResponseValidationError is the validation error returned by
// UserGetListResponse.Validate if the designated constraints aren't met.
type UserGetListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetListResponseValidationError) ErrorName() string {
	return "UserGetListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetListResponseValidationError{}

// Validate checks the field values on UserGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGetRequestMultiError,
// or nil if none found.
func (m *UserGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetRequestMultiError(errors)
	}

	return nil
}

// UserGetRequestMultiError is an error wrapping multiple validation errors
// returned by UserGetRequest.ValidateAll() if the designated constraints
// aren't met.
type UserGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetRequestMultiError) AllErrors() []error { return m }

// UserGetRequestValidationError is the validation error returned by
// UserGetRequest.Validate if the designated constraints aren't met.
type UserGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetRequestValidationError) ErrorName() string { return "UserGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetRequestValidationError{}

// Validate checks the field values on UserGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetResponseMultiError, or nil if none found.
func (m *UserGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetResponseMultiError(errors)
	}

	return nil
}

// UserGetResponseMultiError is an error wrapping multiple validation errors
// returned by UserGetResponse.ValidateAll() if the designated constraints
// aren't met.
type UserGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetResponseMultiError) AllErrors() []error { return m }

// UserGetResponseValidationError is the validation error returned by
// UserGetResponse.Validate if the designated constraints aren't met.
type UserGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetResponseValidationError) ErrorName() string { return "UserGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetResponseValidationError{}

// Validate checks the field values on UserGetHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetHistoryRequestMultiError, or nil if none found.
func (m *UserGetHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetHistoryRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetHistoryRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetHistoryRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetHistoryRequestMultiError(errors)
	}

	return nil
}

// UserGetHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by UserGetHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UserGetHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetHistoryRequestMultiError) AllErrors() []error { return m }

// UserGetHistoryRequestValidationError is the validation error returned by
// UserGetHistoryRequest.Validate if the designated constraints aren't met.
type UserGetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetHistoryRequestValidationError) ErrorName() string {
	return "UserGetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetHistoryRequestValidationError{}

// Validate checks the field values on UserGetHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetHistoryResponseMultiError, or nil if none found.
func (m *UserGetHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetHistoryResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetHistoryResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetHistoryResponseValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetHistoryResponseValidationError{
				field:  "History",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetHistoryResponseMultiError(errors)
	}

	return nil
}

// UserGetHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by UserGetHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UserGetHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetHistoryResponseMultiError) AllErrors() []error { return m }

// UserGetHistoryResponseValidationError is the validation error returned by
// UserGetHistoryResponse.Validate if the designated constraints aren't met.
type UserGetHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetHistoryResponseValidationError) ErrorName() string {
	return "UserGetHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetHistoryResponseValidationError{}

// Validate checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterRequestMultiError, or nil if none found.
func (m *UserRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return UserRegisterRequestMultiError(errors)
	}

	return nil
}

// UserRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by UserRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterRequestMultiError) AllErrors() []error { return m }

// UserRegisterRequestValidationError is the validation error returned by
// UserRegisterRequest.Validate if the designated constraints aren't met.
type UserRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterRequestValidationError) ErrorName() string {
	return "UserRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterRequestValidationError{}

// Validate checks the field values on UserRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterResponseMultiError, or nil if none found.
func (m *UserRegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserRegisterResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserRegisterResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserRegisterResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserRegisterResponseMultiError(errors)
	}

	return nil
}

// UserRegisterResponseMultiError is an error wrapping multiple validation
// errors returned by UserRegisterResponse.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterResponseMultiError) AllErrors() []error { return m }

// UserRegisterResponseValidationError is the validation error returned by
// UserRegisterResponse.Validate if the designated constraints aren't met.
type UserRegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterResponseValidationError) ErrorName() string {
	return "UserRegisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterResponseValidationError{}

// Validate checks the field values on UserUpdateMembershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateMembershipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateMembershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateMembershipRequestMultiError, or nil if none found.
func (m *UserUpdateMembershipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateMembershipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdateMembershipRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdateMembershipRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateMembershipRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCollectionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdateMembershipRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdateMembershipRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollectionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateMembershipRequestValidationError{
				field:  "CollectionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Role

	if len(errors) > 0 {
		return UserUpdateMembershipRequestMultiError(errors)
	}

	return nil
}

// UserUpdateMembershipRequestMultiError is an error wrapping multiple
// validation errors returned by UserUpdateMembershipRequest.ValidateAll() if
// the designated constraints aren't met.
type UserUpdateMembershipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateMembershipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateMembershipRequestMultiError) AllErrors() []error { return m }

// UserUpdateMembershipRequestValidationError is the validation error returned
// by UserUpdateMembershipRequest.Validate if the designated constraints
// aren't met.
type UserUpdateMembershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateMembershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateMembershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateMembershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateMembershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateMembershipRequestValidationError) ErrorName() string {
	return "UserUpdateMembershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateMembershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateMembershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateMembershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateMembershipRequestValidationError{}

// Validate checks the field values on UserUpdateMembershipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateMembershipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateMembershipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateMembershipResponseMultiError, or nil if none found.
func (m *UserUpdateMembershipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateMembershipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdateMembershipResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdateMembershipResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateMembershipResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserUpdateMembershipResponseMultiError(errors)
	}

	return nil
}

// UserUpdateMembershipResponseMultiError is an error wrapping multiple
// validation errors returned by UserUpdateMembershipResponse.ValidateAll() if
// the designated constraints aren't met.
type UserUpdateMembershipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateMembershipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateMembershipResponseMultiError) AllErrors() []error { return m }

// UserUpdateMembershipResponseValidationError is the validation error returned
// by UserUpdateMembershipResponse.Validate if the designated constraints
// aren't met.
type UserUpdateMembershipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateMembershipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateMembershipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateMembershipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateMembershipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateMembershipResponseValidationError) ErrorName() string {
	return "UserUpdateMembershipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateMembershipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateMembershipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateMembershipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateMembershipResponseValidationError{}

// Validate checks the field values on UserUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateRequestMultiError, or nil if none found.
func (m *UserUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdateRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdateRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserUpdateRequestMultiError(errors)
	}

	return nil
}

// UserUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UserUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateRequestMultiError) AllErrors() []error { return m }

// UserUpdateRequestValidationError is the validation error returned by
// UserUpdateRequest.Validate if the designated constraints aren't met.
type UserUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateRequestValidationError) ErrorName() string {
	return "UserUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateRequestValidationError{}

// Validate checks the field values on UserUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateResponseMultiError, or nil if none found.
func (m *UserUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdateResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdateResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserUpdateResponseMultiError(errors)
	}

	return nil
}

// UserUpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UserUpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateResponseMultiError) AllErrors() []error { return m }

// UserUpdateResponseValidationError is the validation error returned by
// UserUpdateResponse.Validate if the designated constraints aren't met.
type UserUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateResponseValidationError) ErrorName() string {
	return "UserUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateResponseValidationError{}

// Validate checks the field values on CollectionGetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGetListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGetListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGetListResponseMultiError, or nil if none found.
func (m *CollectionGetListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGetListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectionGetListResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectionGetListResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectionGetListResponseValidationError{
					field:  fmt.Sprintf("Collections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CollectionGetListResponseMultiError(errors)
	}

	return nil
}

// CollectionGetListResponseMultiError is an error wrapping multiple validation
// errors returned by CollectionGetListResponse.ValidateAll() if the
// designated constraints aren't met.
type CollectionGetListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGetListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGetListResponseMultiError) AllErrors() []error { return m }

// CollectionGetListResponseValidationError is the validation error returned by
// CollectionGetListResponse.Validate if the designated constraints aren't met.
type CollectionGetListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGetListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGetListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGetListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGetListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGetListResponseValidationError) ErrorName() string {
	return "CollectionGetListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGetListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGetListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGetListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGetListResponseValidationError{}

// Validate checks the field values on CollectionGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGetRequestMultiError, or nil if none found.
func (m *CollectionGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollectionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionGetRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionGetRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollectionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionGetRequestValidationError{
				field:  "CollectionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionGetRequestMultiError(errors)
	}

	return nil
}

// CollectionGetRequestMultiError is an error wrapping multiple validation
// errors returned by CollectionGetRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectionGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGetRequestMultiError) AllErrors() []error { return m }

// CollectionGetRequestValidationError is the validation error returned by
// CollectionGetRequest.Validate if the designated constraints aren't met.
type CollectionGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGetRequestValidationError) ErrorName() string {
	return "CollectionGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGetRequestValidationError{}

// Validate checks the field values on CollectionGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGetResponseMultiError, or nil if none found.
func (m *CollectionGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionGetResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionGetResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionGetResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionGetResponseMultiError(errors)
	}

	return nil
}

// CollectionGetResponseMultiError is an error wrapping multiple validation
// errors returned by CollectionGetResponse.ValidateAll() if the designated
// constraints aren't met.
type CollectionGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGetResponseMultiError) AllErrors() []error { return m }

// CollectionGetResponseValidationError is the validation error returned by
// CollectionGetResponse.Validate if the designated constraints aren't met.
type CollectionGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGetResponseValidationError) ErrorName() string {
	return "CollectionGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGetResponseValidationError{}

// Validate checks the field values on CollectionGetHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGetHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGetHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGetHistoryRequestMultiError, or nil if none found.
func (m *CollectionGetHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGetHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollectionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionGetHistoryRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionGetHistoryRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollectionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionGetHistoryRequestValidationError{
				field:  "CollectionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionGetHistoryRequestMultiError(errors)
	}

	return nil
}

// CollectionGetHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by CollectionGetHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type CollectionGetHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGetHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGetHistoryRequestMultiError) AllErrors() []error { return m }

// CollectionGetHistoryRequestValidationError is the validation error returned
// by CollectionGetHistoryRequest.Validate if the designated constraints
// aren't met.
type CollectionGetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGetHistoryRequestValidationError) ErrorName() string {
	return "CollectionGetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGetHistoryRequestValidationError{}

// Validate checks the field values on CollectionGetHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGetHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGetHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGetHistoryResponseMultiError, or nil if none found.
func (m *CollectionGetHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGetHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectionGetHistoryResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectionGetHistoryResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectionGetHistoryResponseValidationError{
					field:  fmt.Sprintf("Collections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CollectionGetHistoryResponseMultiError(errors)
	}

	return nil
}

// CollectionGetHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by CollectionGetHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type CollectionGetHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGetHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGetHistoryResponseMultiError) AllErrors() []error { return m }

// CollectionGetHistoryResponseValidationError is the validation error returned
// by CollectionGetHistoryResponse.Validate if the designated constraints
// aren't met.
type CollectionGetHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGetHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGetHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGetHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGetHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGetHistoryResponseValidationError) ErrorName() string {
	return "CollectionGetHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGetHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGetHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGetHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGetHistoryResponseValidationError{}

// Validate checks the field values on CollectionCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionCreateRequestMultiError, or nil if none found.
func (m *CollectionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionCreateRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionCreateRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionCreateRequestValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionCreateRequestMultiError(errors)
	}

	return nil
}

// CollectionCreateRequestMultiError is an error wrapping multiple validation
// errors returned by CollectionCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionCreateRequestMultiError) AllErrors() []error { return m }

// CollectionCreateRequestValidationError is the validation error returned by
// CollectionCreateRequest.Validate if the designated constraints aren't met.
type CollectionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionCreateRequestValidationError) ErrorName() string {
	return "CollectionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionCreateRequestValidationError{}

// Validate checks the field values on CollectionCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionCreateResponseMultiError, or nil if none found.
func (m *CollectionCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionCreateResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionCreateResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionCreateResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionCreateResponseMultiError(errors)
	}

	return nil
}

// CollectionCreateResponseMultiError is an error wrapping multiple validation
// errors returned by CollectionCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type CollectionCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionCreateResponseMultiError) AllErrors() []error { return m }

// CollectionCreateResponseValidationError is the validation error returned by
// CollectionCreateResponse.Validate if the designated constraints aren't met.
type CollectionCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionCreateResponseValidationError) ErrorName() string {
	return "CollectionCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionCreateResponseValidationError{}

// Validate checks the field values on CollectionUpdateRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionUpdateRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionUpdateRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionUpdateRolesRequestMultiError, or nil if none found.
func (m *CollectionUpdateRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionUpdateRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollectionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionUpdateRolesRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionUpdateRolesRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollectionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionUpdateRolesRequestValidationError{
				field:  "CollectionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Roles

	if len(errors) > 0 {
		return CollectionUpdateRolesRequestMultiError(errors)
	}

	return nil
}

// CollectionUpdateRolesRequestMultiError is an error wrapping multiple
// validation errors returned by CollectionUpdateRolesRequest.ValidateAll() if
// the designated constraints aren't met.
type CollectionUpdateRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionUpdateRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionUpdateRolesRequestMultiError) AllErrors() []error { return m }

// CollectionUpdateRolesRequestValidationError is the validation error returned
// by CollectionUpdateRolesRequest.Validate if the designated constraints
// aren't met.
type CollectionUpdateRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionUpdateRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionUpdateRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionUpdateRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionUpdateRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionUpdateRolesRequestValidationError) ErrorName() string {
	return "CollectionUpdateRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionUpdateRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionUpdateRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionUpdateRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionUpdateRolesRequestValidationError{}

// Validate checks the field values on CollectionUpdateRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionUpdateRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionUpdateRolesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CollectionUpdateRolesResponseMultiError, or nil if none found.
func (m *CollectionUpdateRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionUpdateRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionUpdateRolesResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionUpdateRolesResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionUpdateRolesResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionUpdateRolesResponseMultiError(errors)
	}

	return nil
}

// CollectionUpdateRolesResponseMultiError is an error wrapping multiple
// validation errors returned by CollectionUpdateRolesResponse.ValidateAll()
// if the designated constraints aren't met.
type CollectionUpdateRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionUpdateRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionUpdateRolesResponseMultiError) AllErrors() []error { return m }

// CollectionUpdateRolesResponseValidationError is the validation error
// returned by CollectionUpdateRolesResponse.Validate if the designated
// constraints aren't met.
type CollectionUpdateRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionUpdateRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionUpdateRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionUpdateRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionUpdateRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionUpdateRolesResponseValidationError) ErrorName() string {
	return "CollectionUpdateRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionUpdateRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionUpdateRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionUpdateRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionUpdateRolesResponseValidationError{}

// Validate checks the field values on CollectionUpdatePermissionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CollectionUpdatePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionUpdatePermissionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CollectionUpdatePermissionRequestMultiError, or nil if none found.
func (m *CollectionUpdatePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionUpdatePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollectionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionUpdatePermissionRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionUpdatePermissionRequestValidationError{
					field:  "CollectionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollectionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionUpdatePermissionRequestValidationError{
				field:  "CollectionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]int32, len(m.GetAcl()))
		i := 0
		for key := range m.GetAcl() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAcl()[key]
			_ = val

			// no validation rules for Acl[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CollectionUpdatePermissionRequestValidationError{
							field:  fmt.Sprintf("Acl[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CollectionUpdatePermissionRequestValidationError{
							field:  fmt.Sprintf("Acl[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CollectionUpdatePermissionRequestValidationError{
						field:  fmt.Sprintf("Acl[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CollectionUpdatePermissionRequestMultiError(errors)
	}

	return nil
}

// CollectionUpdatePermissionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CollectionUpdatePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectionUpdatePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionUpdatePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionUpdatePermissionRequestMultiError) AllErrors() []error { return m }

// CollectionUpdatePermissionRequestValidationError is the validation error
// returned by CollectionUpdatePermissionRequest.Validate if the designated
// constraints aren't met.
type CollectionUpdatePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionUpdatePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionUpdatePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionUpdatePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionUpdatePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionUpdatePermissionRequestValidationError) ErrorName() string {
	return "CollectionUpdatePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionUpdatePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionUpdatePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionUpdatePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionUpdatePermissionRequestValidationError{}

// Validate checks the field values on CollectionUpdatePermissionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CollectionUpdatePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionUpdatePermissionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CollectionUpdatePermissionResponseMultiError, or nil if none found.
func (m *CollectionUpdatePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionUpdatePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionUpdatePermissionResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionUpdatePermissionResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionUpdatePermissionResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionUpdatePermissionResponseMultiError(errors)
	}

	return nil
}

// CollectionUpdatePermissionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CollectionUpdatePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type CollectionUpdatePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionUpdatePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionUpdatePermissionResponseMultiError) AllErrors() []error { return m }

// CollectionUpdatePermissionResponseValidationError is the validation error
// returned by CollectionUpdatePermissionResponse.Validate if the designated
// constraints aren't met.
type CollectionUpdatePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionUpdatePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionUpdatePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionUpdatePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionUpdatePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionUpdatePermissionResponseValidationError) ErrorName() string {
	return "CollectionUpdatePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionUpdatePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionUpdatePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionUpdatePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionUpdatePermissionResponseValidationError{}
