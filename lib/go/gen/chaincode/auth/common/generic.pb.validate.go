// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaincode/auth/common/generic.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetResponseMultiError, or
// nil if none found.
func (m *GetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResponseMultiError(errors)
	}

	return nil
}

// GetResponseMultiError is an error wrapping multiple validation errors
// returned by GetResponse.ValidateAll() if the designated constraints aren't met.
type GetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponseMultiError) AllErrors() []error { return m }

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	// no validation rules for Limit

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListResponseMultiError, or
// nil if none found.
func (m *ListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListResponseMultiError(errors)
	}

	return nil
}

// ListResponseMultiError is an error wrapping multiple validation errors
// returned by ListResponse.ValidateAll() if the designated constraints aren't met.
type ListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResponseMultiError) AllErrors() []error { return m }

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on ListByCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListByCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListByCollectionRequestMultiError, or nil if none found.
func (m *ListByCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	// no validation rules for Limit

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListByCollectionRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListByCollectionRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListByCollectionRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListByCollectionRequestMultiError(errors)
	}

	return nil
}

// ListByCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by ListByCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type ListByCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByCollectionRequestMultiError) AllErrors() []error { return m }

// ListByCollectionRequestValidationError is the validation error returned by
// ListByCollectionRequest.Validate if the designated constraints aren't met.
type ListByCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByCollectionRequestValidationError) ErrorName() string {
	return "ListByCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListByCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByCollectionRequestValidationError{}

// Validate checks the field values on ListByCollectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListByCollectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByCollectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListByCollectionResponseMultiError, or nil if none found.
func (m *ListByCollectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByCollectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListByCollectionResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListByCollectionResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListByCollectionResponseValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListByCollectionResponseMultiError(errors)
	}

	return nil
}

// ListByCollectionResponseMultiError is an error wrapping multiple validation
// errors returned by ListByCollectionResponse.ValidateAll() if the designated
// constraints aren't met.
type ListByCollectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByCollectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByCollectionResponseMultiError) AllErrors() []error { return m }

// ListByCollectionResponseValidationError is the validation error returned by
// ListByCollectionResponse.Validate if the designated constraints aren't met.
type ListByCollectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByCollectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByCollectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByCollectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByCollectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByCollectionResponseValidationError) ErrorName() string {
	return "ListByCollectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListByCollectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByCollectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByCollectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByCollectionResponseValidationError{}

// Validate checks the field values on ListByAttrsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListByAttrsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByAttrsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListByAttrsRequestMultiError, or nil if none found.
func (m *ListByAttrsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByAttrsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	// no validation rules for Limit

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListByAttrsRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListByAttrsRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListByAttrsRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NumAttrs

	if len(errors) > 0 {
		return ListByAttrsRequestMultiError(errors)
	}

	return nil
}

// ListByAttrsRequestMultiError is an error wrapping multiple validation errors
// returned by ListByAttrsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListByAttrsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByAttrsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByAttrsRequestMultiError) AllErrors() []error { return m }

// ListByAttrsRequestValidationError is the validation error returned by
// ListByAttrsRequest.Validate if the designated constraints aren't met.
type ListByAttrsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByAttrsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByAttrsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByAttrsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByAttrsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByAttrsRequestValidationError) ErrorName() string {
	return "ListByAttrsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListByAttrsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByAttrsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByAttrsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByAttrsRequestValidationError{}

// Validate checks the field values on ListByAttrsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListByAttrsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByAttrsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListByAttrsResponseMultiError, or nil if none found.
func (m *ListByAttrsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByAttrsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListByAttrsResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListByAttrsResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListByAttrsResponseValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListByAttrsResponseMultiError(errors)
	}

	return nil
}

// ListByAttrsResponseMultiError is an error wrapping multiple validation
// errors returned by ListByAttrsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListByAttrsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByAttrsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByAttrsResponseMultiError) AllErrors() []error { return m }

// ListByAttrsResponseValidationError is the validation error returned by
// ListByAttrsResponse.Validate if the designated constraints aren't met.
type ListByAttrsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByAttrsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByAttrsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByAttrsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByAttrsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByAttrsResponseValidationError) ErrorName() string {
	return "ListByAttrsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListByAttrsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByAttrsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByAttrsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByAttrsResponseValidationError{}

// Validate checks the field values on HistoryRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistoryRequestMultiError,
// or nil if none found.
func (m *HistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistoryRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistoryRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistoryRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HistoryRequestMultiError(errors)
	}

	return nil
}

// HistoryRequestMultiError is an error wrapping multiple validation errors
// returned by HistoryRequest.ValidateAll() if the designated constraints
// aren't met.
type HistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryRequestMultiError) AllErrors() []error { return m }

// HistoryRequestValidationError is the validation error returned by
// HistoryRequest.Validate if the designated constraints aren't met.
type HistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryRequestValidationError) ErrorName() string { return "HistoryRequestValidationError" }

// Error satisfies the builtin error interface
func (e HistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryRequestValidationError{}

// Validate checks the field values on HistoryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HistoryResponseMultiError, or nil if none found.
func (m *HistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistoryResponseValidationError{
				field:  "History",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HistoryResponseMultiError(errors)
	}

	return nil
}

// HistoryResponseMultiError is an error wrapping multiple validation errors
// returned by HistoryResponse.ValidateAll() if the designated constraints
// aren't met.
type HistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryResponseMultiError) AllErrors() []error { return m }

// HistoryResponseValidationError is the validation error returned by
// HistoryResponse.Validate if the designated constraints aren't met.
type HistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryResponseValidationError) ErrorName() string { return "HistoryResponseValidationError" }

// Error satisfies the builtin error interface
func (e HistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryResponseValidationError{}

// Validate checks the field values on HiddenTxRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HiddenTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HiddenTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HiddenTxRequestMultiError, or nil if none found.
func (m *HiddenTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HiddenTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HiddenTxRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HiddenTxRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HiddenTxRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HiddenTxRequestMultiError(errors)
	}

	return nil
}

// HiddenTxRequestMultiError is an error wrapping multiple validation errors
// returned by HiddenTxRequest.ValidateAll() if the designated constraints
// aren't met.
type HiddenTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HiddenTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HiddenTxRequestMultiError) AllErrors() []error { return m }

// HiddenTxRequestValidationError is the validation error returned by
// HiddenTxRequest.Validate if the designated constraints aren't met.
type HiddenTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HiddenTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HiddenTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HiddenTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HiddenTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HiddenTxRequestValidationError) ErrorName() string { return "HiddenTxRequestValidationError" }

// Error satisfies the builtin error interface
func (e HiddenTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHiddenTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HiddenTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HiddenTxRequestValidationError{}

// Validate checks the field values on HiddenTxResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HiddenTxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HiddenTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HiddenTxResponseMultiError, or nil if none found.
func (m *HiddenTxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HiddenTxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	for idx, item := range m.GetHiddenTxs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HiddenTxResponseValidationError{
						field:  fmt.Sprintf("HiddenTxs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HiddenTxResponseValidationError{
						field:  fmt.Sprintf("HiddenTxs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HiddenTxResponseValidationError{
					field:  fmt.Sprintf("HiddenTxs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HiddenTxResponseMultiError(errors)
	}

	return nil
}

// HiddenTxResponseMultiError is an error wrapping multiple validation errors
// returned by HiddenTxResponse.ValidateAll() if the designated constraints
// aren't met.
type HiddenTxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HiddenTxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HiddenTxResponseMultiError) AllErrors() []error { return m }

// HiddenTxResponseValidationError is the validation error returned by
// HiddenTxResponse.Validate if the designated constraints aren't met.
type HiddenTxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HiddenTxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HiddenTxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HiddenTxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HiddenTxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HiddenTxResponseValidationError) ErrorName() string { return "HiddenTxResponseValidationError" }

// Error satisfies the builtin error interface
func (e HiddenTxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHiddenTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HiddenTxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HiddenTxResponseValidationError{}

// Validate checks the field values on CreateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRequestMultiError, or
// nil if none found.
func (m *CreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRequestMultiError(errors)
	}

	return nil
}

// CreateRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestMultiError) AllErrors() []error { return m }

// CreateRequestValidationError is the validation error returned by
// CreateRequest.Validate if the designated constraints aren't met.
type CreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestValidationError) ErrorName() string { return "CreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestValidationError{}

// Validate checks the field values on CreateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateResponseMultiError,
// or nil if none found.
func (m *CreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateResponseMultiError(errors)
	}

	return nil
}

// CreateResponseMultiError is an error wrapping multiple validation errors
// returned by CreateResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResponseMultiError) AllErrors() []error { return m }

// CreateResponseValidationError is the validation error returned by
// CreateResponse.Validate if the designated constraints aren't met.
type CreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResponseValidationError) ErrorName() string { return "CreateResponseValidationError" }

// Error satisfies the builtin error interface
func (e CreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResponseValidationError{}

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRequestMultiError, or
// nil if none found.
func (m *UpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRequestMultiError(errors)
	}

	return nil
}

// UpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestMultiError) AllErrors() []error { return m }

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}

// Validate checks the field values on UpdateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateResponseMultiError,
// or nil if none found.
func (m *UpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateResponseMultiError(errors)
	}

	return nil
}

// UpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResponseMultiError) AllErrors() []error { return m }

// UpdateResponseValidationError is the validation error returned by
// UpdateResponse.Validate if the designated constraints aren't met.
type UpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResponseValidationError) ErrorName() string { return "UpdateResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reason

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on HideTxRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HideTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HideTxRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HideTxRequestMultiError, or
// nil if none found.
func (m *HideTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HideTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HideTxRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HideTxRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HideTxRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHiddenTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HideTxRequestValidationError{
					field:  "HiddenTx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HideTxRequestValidationError{
					field:  "HiddenTx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHiddenTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HideTxRequestValidationError{
				field:  "HiddenTx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HideTxRequestMultiError(errors)
	}

	return nil
}

// HideTxRequestMultiError is an error wrapping multiple validation errors
// returned by HideTxRequest.ValidateAll() if the designated constraints
// aren't met.
type HideTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HideTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HideTxRequestMultiError) AllErrors() []error { return m }

// HideTxRequestValidationError is the validation error returned by
// HideTxRequest.Validate if the designated constraints aren't met.
type HideTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HideTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HideTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HideTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HideTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HideTxRequestValidationError) ErrorName() string { return "HideTxRequestValidationError" }

// Error satisfies the builtin error interface
func (e HideTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHideTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HideTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HideTxRequestValidationError{}

// Validate checks the field values on HideTxResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HideTxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HideTxResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HideTxResponseMultiError,
// or nil if none found.
func (m *HideTxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HideTxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HideTxResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HideTxResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HideTxResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHiddenTxs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HideTxResponseValidationError{
					field:  "HiddenTxs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HideTxResponseValidationError{
					field:  "HiddenTxs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHiddenTxs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HideTxResponseValidationError{
				field:  "HiddenTxs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HideTxResponseMultiError(errors)
	}

	return nil
}

// HideTxResponseMultiError is an error wrapping multiple validation errors
// returned by HideTxResponse.ValidateAll() if the designated constraints
// aren't met.
type HideTxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HideTxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HideTxResponseMultiError) AllErrors() []error { return m }

// HideTxResponseValidationError is the validation error returned by
// HideTxResponse.Validate if the designated constraints aren't met.
type HideTxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HideTxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HideTxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HideTxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HideTxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HideTxResponseValidationError) ErrorName() string { return "HideTxResponseValidationError" }

// Error satisfies the builtin error interface
func (e HideTxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHideTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HideTxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HideTxResponseValidationError{}

// Validate checks the field values on UnHideTxRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnHideTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnHideTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnHideTxRequestMultiError, or nil if none found.
func (m *UnHideTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnHideTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnHideTxRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnHideTxRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnHideTxRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TxId

	if len(errors) > 0 {
		return UnHideTxRequestMultiError(errors)
	}

	return nil
}

// UnHideTxRequestMultiError is an error wrapping multiple validation errors
// returned by UnHideTxRequest.ValidateAll() if the designated constraints
// aren't met.
type UnHideTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnHideTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnHideTxRequestMultiError) AllErrors() []error { return m }

// UnHideTxRequestValidationError is the validation error returned by
// UnHideTxRequest.Validate if the designated constraints aren't met.
type UnHideTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnHideTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnHideTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnHideTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnHideTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnHideTxRequestValidationError) ErrorName() string { return "UnHideTxRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnHideTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnHideTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnHideTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnHideTxRequestValidationError{}

// Validate checks the field values on UnHideTxResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnHideTxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnHideTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnHideTxResponseMultiError, or nil if none found.
func (m *UnHideTxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnHideTxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnHideTxResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnHideTxResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnHideTxResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHiddenTxs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnHideTxResponseValidationError{
					field:  "HiddenTxs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnHideTxResponseValidationError{
					field:  "HiddenTxs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHiddenTxs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnHideTxResponseValidationError{
				field:  "HiddenTxs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnHideTxResponseMultiError(errors)
	}

	return nil
}

// UnHideTxResponseMultiError is an error wrapping multiple validation errors
// returned by UnHideTxResponse.ValidateAll() if the designated constraints
// aren't met.
type UnHideTxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnHideTxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnHideTxResponseMultiError) AllErrors() []error { return m }

// UnHideTxResponseValidationError is the validation error returned by
// UnHideTxResponse.Validate if the designated constraints aren't met.
type UnHideTxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnHideTxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnHideTxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnHideTxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnHideTxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnHideTxResponseValidationError) ErrorName() string { return "UnHideTxResponseValidationError" }

// Error satisfies the builtin error interface
func (e UnHideTxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnHideTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnHideTxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnHideTxResponseValidationError{}

// Validate checks the field values on SuggestionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SuggestionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestionRequestMultiError, or nil if none found.
func (m *SuggestionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionRequestValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionRequestValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionRequestValidationError{
				field:  "Suggestion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestionRequestMultiError(errors)
	}

	return nil
}

// SuggestionRequestMultiError is an error wrapping multiple validation errors
// returned by SuggestionRequest.ValidateAll() if the designated constraints
// aren't met.
type SuggestionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionRequestMultiError) AllErrors() []error { return m }

// SuggestionRequestValidationError is the validation error returned by
// SuggestionRequest.Validate if the designated constraints aren't met.
type SuggestionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionRequestValidationError) ErrorName() string {
	return "SuggestionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionRequestValidationError{}

// Validate checks the field values on SuggestionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestionResponseMultiError, or nil if none found.
func (m *SuggestionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionResponseValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionResponseValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionResponseValidationError{
				field:  "Suggestion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestionResponseMultiError(errors)
	}

	return nil
}

// SuggestionResponseMultiError is an error wrapping multiple validation errors
// returned by SuggestionResponse.ValidateAll() if the designated constraints
// aren't met.
type SuggestionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionResponseMultiError) AllErrors() []error { return m }

// SuggestionResponseValidationError is the validation error returned by
// SuggestionResponse.Validate if the designated constraints aren't met.
type SuggestionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionResponseValidationError) ErrorName() string {
	return "SuggestionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionResponseValidationError{}

// Validate checks the field values on SuggestionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestionListRequestMultiError, or nil if none found.
func (m *SuggestionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	// no validation rules for Limit

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionListRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionListRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionListRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestionListRequestMultiError(errors)
	}

	return nil
}

// SuggestionListRequestMultiError is an error wrapping multiple validation
// errors returned by SuggestionListRequest.ValidateAll() if the designated
// constraints aren't met.
type SuggestionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionListRequestMultiError) AllErrors() []error { return m }

// SuggestionListRequestValidationError is the validation error returned by
// SuggestionListRequest.Validate if the designated constraints aren't met.
type SuggestionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionListRequestValidationError) ErrorName() string {
	return "SuggestionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionListRequestValidationError{}

// Validate checks the field values on SuggestionListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestionListResponseMultiError, or nil if none found.
func (m *SuggestionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	for idx, item := range m.GetSuggestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuggestionListResponseValidationError{
						field:  fmt.Sprintf("Suggestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuggestionListResponseValidationError{
						field:  fmt.Sprintf("Suggestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuggestionListResponseValidationError{
					field:  fmt.Sprintf("Suggestions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SuggestionListResponseMultiError(errors)
	}

	return nil
}

// SuggestionListResponseMultiError is an error wrapping multiple validation
// errors returned by SuggestionListResponse.ValidateAll() if the designated
// constraints aren't met.
type SuggestionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionListResponseMultiError) AllErrors() []error { return m }

// SuggestionListResponseValidationError is the validation error returned by
// SuggestionListResponse.Validate if the designated constraints aren't met.
type SuggestionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionListResponseValidationError) ErrorName() string {
	return "SuggestionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionListResponseValidationError{}

// Validate checks the field values on SuggestionListByCollectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SuggestionListByCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionListByCollectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SuggestionListByCollectionRequestMultiError, or nil if none found.
func (m *SuggestionListByCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionListByCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	// no validation rules for Limit

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionListByCollectionRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionListByCollectionRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionListByCollectionRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestionListByCollectionRequestMultiError(errors)
	}

	return nil
}

// SuggestionListByCollectionRequestMultiError is an error wrapping multiple
// validation errors returned by
// SuggestionListByCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type SuggestionListByCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionListByCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionListByCollectionRequestMultiError) AllErrors() []error { return m }

// SuggestionListByCollectionRequestValidationError is the validation error
// returned by SuggestionListByCollectionRequest.Validate if the designated
// constraints aren't met.
type SuggestionListByCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionListByCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionListByCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionListByCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionListByCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionListByCollectionRequestValidationError) ErrorName() string {
	return "SuggestionListByCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionListByCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionListByCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionListByCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionListByCollectionRequestValidationError{}

// Validate checks the field values on SuggestionListByCollectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SuggestionListByCollectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionListByCollectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SuggestionListByCollectionResponseMultiError, or nil if none found.
func (m *SuggestionListByCollectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionListByCollectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	for idx, item := range m.GetSuggestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuggestionListByCollectionResponseValidationError{
						field:  fmt.Sprintf("Suggestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuggestionListByCollectionResponseValidationError{
						field:  fmt.Sprintf("Suggestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuggestionListByCollectionResponseValidationError{
					field:  fmt.Sprintf("Suggestions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SuggestionListByCollectionResponseMultiError(errors)
	}

	return nil
}

// SuggestionListByCollectionResponseMultiError is an error wrapping multiple
// validation errors returned by
// SuggestionListByCollectionResponse.ValidateAll() if the designated
// constraints aren't met.
type SuggestionListByCollectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionListByCollectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionListByCollectionResponseMultiError) AllErrors() []error { return m }

// SuggestionListByCollectionResponseValidationError is the validation error
// returned by SuggestionListByCollectionResponse.Validate if the designated
// constraints aren't met.
type SuggestionListByCollectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionListByCollectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionListByCollectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionListByCollectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionListByCollectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionListByCollectionResponseValidationError) ErrorName() string {
	return "SuggestionListByCollectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionListByCollectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionListByCollectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionListByCollectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionListByCollectionResponseValidationError{}

// Validate checks the field values on SuggestionListByObjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionListByObjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionListByObjectRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SuggestionListByObjectRequestMultiError, or nil if none found.
func (m *SuggestionListByObjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionListByObjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionListByObjectRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionListByObjectRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionListByObjectRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestionListByObjectRequestMultiError(errors)
	}

	return nil
}

// SuggestionListByObjectRequestMultiError is an error wrapping multiple
// validation errors returned by SuggestionListByObjectRequest.ValidateAll()
// if the designated constraints aren't met.
type SuggestionListByObjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionListByObjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionListByObjectRequestMultiError) AllErrors() []error { return m }

// SuggestionListByObjectRequestValidationError is the validation error
// returned by SuggestionListByObjectRequest.Validate if the designated
// constraints aren't met.
type SuggestionListByObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionListByObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionListByObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionListByObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionListByObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionListByObjectRequestValidationError) ErrorName() string {
	return "SuggestionListByObjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionListByObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionListByObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionListByObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionListByObjectRequestValidationError{}

// Validate checks the field values on SuggestionListByObjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionListByObjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionListByObjectResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SuggestionListByObjectResponseMultiError, or nil if none found.
func (m *SuggestionListByObjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionListByObjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSuggestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuggestionListByObjectResponseValidationError{
						field:  fmt.Sprintf("Suggestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuggestionListByObjectResponseValidationError{
						field:  fmt.Sprintf("Suggestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuggestionListByObjectResponseValidationError{
					field:  fmt.Sprintf("Suggestions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SuggestionListByObjectResponseMultiError(errors)
	}

	return nil
}

// SuggestionListByObjectResponseMultiError is an error wrapping multiple
// validation errors returned by SuggestionListByObjectResponse.ValidateAll()
// if the designated constraints aren't met.
type SuggestionListByObjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionListByObjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionListByObjectResponseMultiError) AllErrors() []error { return m }

// SuggestionListByObjectResponseValidationError is the validation error
// returned by SuggestionListByObjectResponse.Validate if the designated
// constraints aren't met.
type SuggestionListByObjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionListByObjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionListByObjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionListByObjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionListByObjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionListByObjectResponseValidationError) ErrorName() string {
	return "SuggestionListByObjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionListByObjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionListByObjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionListByObjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionListByObjectResponseValidationError{}

// Validate checks the field values on SuggestionByPartialKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionByPartialKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionByPartialKeyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SuggestionByPartialKeyRequestMultiError, or nil if none found.
func (m *SuggestionByPartialKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionByPartialKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	// no validation rules for Limit

	// no validation rules for CollectionId

	// no validation rules for ObjectType

	// no validation rules for NumAttrs

	if len(errors) > 0 {
		return SuggestionByPartialKeyRequestMultiError(errors)
	}

	return nil
}

// SuggestionByPartialKeyRequestMultiError is an error wrapping multiple
// validation errors returned by SuggestionByPartialKeyRequest.ValidateAll()
// if the designated constraints aren't met.
type SuggestionByPartialKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionByPartialKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionByPartialKeyRequestMultiError) AllErrors() []error { return m }

// SuggestionByPartialKeyRequestValidationError is the validation error
// returned by SuggestionByPartialKeyRequest.Validate if the designated
// constraints aren't met.
type SuggestionByPartialKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionByPartialKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionByPartialKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionByPartialKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionByPartialKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionByPartialKeyRequestValidationError) ErrorName() string {
	return "SuggestionByPartialKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionByPartialKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionByPartialKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionByPartialKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionByPartialKeyRequestValidationError{}

// Validate checks the field values on SuggestionByPartialKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionByPartialKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionByPartialKeyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SuggestionByPartialKeyResponseMultiError, or nil if none found.
func (m *SuggestionByPartialKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionByPartialKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	for idx, item := range m.GetSuggestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SuggestionByPartialKeyResponseValidationError{
						field:  fmt.Sprintf("Suggestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SuggestionByPartialKeyResponseValidationError{
						field:  fmt.Sprintf("Suggestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuggestionByPartialKeyResponseValidationError{
					field:  fmt.Sprintf("Suggestions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SuggestionByPartialKeyResponseMultiError(errors)
	}

	return nil
}

// SuggestionByPartialKeyResponseMultiError is an error wrapping multiple
// validation errors returned by SuggestionByPartialKeyResponse.ValidateAll()
// if the designated constraints aren't met.
type SuggestionByPartialKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionByPartialKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionByPartialKeyResponseMultiError) AllErrors() []error { return m }

// SuggestionByPartialKeyResponseValidationError is the validation error
// returned by SuggestionByPartialKeyResponse.Validate if the designated
// constraints aren't met.
type SuggestionByPartialKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionByPartialKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionByPartialKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionByPartialKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionByPartialKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionByPartialKeyResponseValidationError) ErrorName() string {
	return "SuggestionByPartialKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionByPartialKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionByPartialKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionByPartialKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionByPartialKeyResponseValidationError{}

// Validate checks the field values on GetSuggestionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSuggestionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuggestionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSuggestionsRequestMultiError, or nil if none found.
func (m *GetSuggestionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSuggestionsRequestValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSuggestionsRequestValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSuggestionsRequestValidationError{
				field:  "Suggestion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSuggestionsRequestMultiError(errors)
	}

	return nil
}

// GetSuggestionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetSuggestionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSuggestionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestionsRequestMultiError) AllErrors() []error { return m }

// GetSuggestionsRequestValidationError is the validation error returned by
// GetSuggestionsRequest.Validate if the designated constraints aren't met.
type GetSuggestionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestionsRequestValidationError) ErrorName() string {
	return "GetSuggestionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestionsRequestValidationError{}

// Validate checks the field values on GetSuggestionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSuggestionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuggestionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSuggestionsResponseMultiError, or nil if none found.
func (m *GetSuggestionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuggestionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSuggestionsResponseValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSuggestionsResponseValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSuggestionsResponseValidationError{
				field:  "Suggestion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSuggestionsResponseMultiError(errors)
	}

	return nil
}

// GetSuggestionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSuggestionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSuggestionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuggestionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuggestionsResponseMultiError) AllErrors() []error { return m }

// GetSuggestionsResponseValidationError is the validation error returned by
// GetSuggestionsResponse.Validate if the designated constraints aren't met.
type GetSuggestionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuggestionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuggestionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuggestionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuggestionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuggestionsResponseValidationError) ErrorName() string {
	return "GetSuggestionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuggestionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuggestionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuggestionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuggestionsResponseValidationError{}

// Validate checks the field values on SuggestionCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestionCreateRequestMultiError, or nil if none found.
func (m *SuggestionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionCreateRequestValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionCreateRequestValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionCreateRequestValidationError{
				field:  "Suggestion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestionCreateRequestMultiError(errors)
	}

	return nil
}

// SuggestionCreateRequestMultiError is an error wrapping multiple validation
// errors returned by SuggestionCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type SuggestionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionCreateRequestMultiError) AllErrors() []error { return m }

// SuggestionCreateRequestValidationError is the validation error returned by
// SuggestionCreateRequest.Validate if the designated constraints aren't met.
type SuggestionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionCreateRequestValidationError) ErrorName() string {
	return "SuggestionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionCreateRequestValidationError{}

// Validate checks the field values on SuggestionCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestionCreateResponseMultiError, or nil if none found.
func (m *SuggestionCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionCreateResponseValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionCreateResponseValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionCreateResponseValidationError{
				field:  "Suggestion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestionCreateResponseMultiError(errors)
	}

	return nil
}

// SuggestionCreateResponseMultiError is an error wrapping multiple validation
// errors returned by SuggestionCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type SuggestionCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionCreateResponseMultiError) AllErrors() []error { return m }

// SuggestionCreateResponseValidationError is the validation error returned by
// SuggestionCreateResponse.Validate if the designated constraints aren't met.
type SuggestionCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionCreateResponseValidationError) ErrorName() string {
	return "SuggestionCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionCreateResponseValidationError{}

// Validate checks the field values on SuggestionDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestionDeleteRequestMultiError, or nil if none found.
func (m *SuggestionDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionDeleteRequestValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionDeleteRequestValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionDeleteRequestValidationError{
				field:  "Suggestion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reason

	if len(errors) > 0 {
		return SuggestionDeleteRequestMultiError(errors)
	}

	return nil
}

// SuggestionDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by SuggestionDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type SuggestionDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionDeleteRequestMultiError) AllErrors() []error { return m }

// SuggestionDeleteRequestValidationError is the validation error returned by
// SuggestionDeleteRequest.Validate if the designated constraints aren't met.
type SuggestionDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionDeleteRequestValidationError) ErrorName() string {
	return "SuggestionDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionDeleteRequestValidationError{}

// Validate checks the field values on SuggestionDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestionDeleteResponseMultiError, or nil if none found.
func (m *SuggestionDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionDeleteResponseValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionDeleteResponseValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionDeleteResponseValidationError{
				field:  "Suggestion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestionDeleteResponseMultiError(errors)
	}

	return nil
}

// SuggestionDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by SuggestionDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type SuggestionDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionDeleteResponseMultiError) AllErrors() []error { return m }

// SuggestionDeleteResponseValidationError is the validation error returned by
// SuggestionDeleteResponse.Validate if the designated constraints aren't met.
type SuggestionDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionDeleteResponseValidationError) ErrorName() string {
	return "SuggestionDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionDeleteResponseValidationError{}

// Validate checks the field values on SuggestionApproveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionApproveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionApproveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestionApproveRequestMultiError, or nil if none found.
func (m *SuggestionApproveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionApproveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionApproveRequestValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionApproveRequestValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionApproveRequestValidationError{
				field:  "Suggestion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestionApproveRequestMultiError(errors)
	}

	return nil
}

// SuggestionApproveRequestMultiError is an error wrapping multiple validation
// errors returned by SuggestionApproveRequest.ValidateAll() if the designated
// constraints aren't met.
type SuggestionApproveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionApproveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionApproveRequestMultiError) AllErrors() []error { return m }

// SuggestionApproveRequestValidationError is the validation error returned by
// SuggestionApproveRequest.Validate if the designated constraints aren't met.
type SuggestionApproveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionApproveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionApproveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionApproveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionApproveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionApproveRequestValidationError) ErrorName() string {
	return "SuggestionApproveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionApproveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionApproveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionApproveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionApproveRequestValidationError{}

// Validate checks the field values on SuggestionApproveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestionApproveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestionApproveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestionApproveResponseMultiError, or nil if none found.
func (m *SuggestionApproveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestionApproveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuggestion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionApproveResponseValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionApproveResponseValidationError{
					field:  "Suggestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionApproveResponseValidationError{
				field:  "Suggestion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SuggestionApproveResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SuggestionApproveResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionApproveResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SuggestionApproveResponseMultiError(errors)
	}

	return nil
}

// SuggestionApproveResponseMultiError is an error wrapping multiple validation
// errors returned by SuggestionApproveResponse.ValidateAll() if the
// designated constraints aren't met.
type SuggestionApproveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestionApproveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestionApproveResponseMultiError) AllErrors() []error { return m }

// SuggestionApproveResponseValidationError is the validation error returned by
// SuggestionApproveResponse.Validate if the designated constraints aren't met.
type SuggestionApproveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionApproveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionApproveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionApproveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionApproveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionApproveResponseValidationError) ErrorName() string {
	return "SuggestionApproveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionApproveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionApproveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionApproveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionApproveResponseValidationError{}
