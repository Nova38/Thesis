// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaincode/auth/common/collections.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CollectionGetListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGetListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGetListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGetListRequestMultiError, or nil if none found.
func (m *CollectionGetListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGetListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	// no validation rules for Limit

	if len(errors) > 0 {
		return CollectionGetListRequestMultiError(errors)
	}

	return nil
}

// CollectionGetListRequestMultiError is an error wrapping multiple validation
// errors returned by CollectionGetListRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectionGetListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGetListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGetListRequestMultiError) AllErrors() []error { return m }

// CollectionGetListRequestValidationError is the validation error returned by
// CollectionGetListRequest.Validate if the designated constraints aren't met.
type CollectionGetListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGetListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGetListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGetListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGetListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGetListRequestValidationError) ErrorName() string {
	return "CollectionGetListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGetListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGetListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGetListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGetListRequestValidationError{}

// Validate checks the field values on CollectionGetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGetListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGetListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGetListResponseMultiError, or nil if none found.
func (m *CollectionGetListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGetListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectionGetListResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectionGetListResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectionGetListResponseValidationError{
					field:  fmt.Sprintf("Collections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Bookmark

	if len(errors) > 0 {
		return CollectionGetListResponseMultiError(errors)
	}

	return nil
}

// CollectionGetListResponseMultiError is an error wrapping multiple validation
// errors returned by CollectionGetListResponse.ValidateAll() if the
// designated constraints aren't met.
type CollectionGetListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGetListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGetListResponseMultiError) AllErrors() []error { return m }

// CollectionGetListResponseValidationError is the validation error returned by
// CollectionGetListResponse.Validate if the designated constraints aren't met.
type CollectionGetListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGetListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGetListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGetListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGetListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGetListResponseValidationError) ErrorName() string {
	return "CollectionGetListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGetListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGetListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGetListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGetListResponseValidationError{}

// Validate checks the field values on CollectionGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGetRequestMultiError, or nil if none found.
func (m *CollectionGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	if len(errors) > 0 {
		return CollectionGetRequestMultiError(errors)
	}

	return nil
}

// CollectionGetRequestMultiError is an error wrapping multiple validation
// errors returned by CollectionGetRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectionGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGetRequestMultiError) AllErrors() []error { return m }

// CollectionGetRequestValidationError is the validation error returned by
// CollectionGetRequest.Validate if the designated constraints aren't met.
type CollectionGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGetRequestValidationError) ErrorName() string {
	return "CollectionGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGetRequestValidationError{}

// Validate checks the field values on CollectionGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGetResponseMultiError, or nil if none found.
func (m *CollectionGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionGetResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionGetResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionGetResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionGetResponseMultiError(errors)
	}

	return nil
}

// CollectionGetResponseMultiError is an error wrapping multiple validation
// errors returned by CollectionGetResponse.ValidateAll() if the designated
// constraints aren't met.
type CollectionGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGetResponseMultiError) AllErrors() []error { return m }

// CollectionGetResponseValidationError is the validation error returned by
// CollectionGetResponse.Validate if the designated constraints aren't met.
type CollectionGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGetResponseValidationError) ErrorName() string {
	return "CollectionGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGetResponseValidationError{}

// Validate checks the field values on CollectionGetHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGetHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGetHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGetHistoryRequestMultiError, or nil if none found.
func (m *CollectionGetHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGetHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for ShowHidden

	if len(errors) > 0 {
		return CollectionGetHistoryRequestMultiError(errors)
	}

	return nil
}

// CollectionGetHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by CollectionGetHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type CollectionGetHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGetHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGetHistoryRequestMultiError) AllErrors() []error { return m }

// CollectionGetHistoryRequestValidationError is the validation error returned
// by CollectionGetHistoryRequest.Validate if the designated constraints
// aren't met.
type CollectionGetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGetHistoryRequestValidationError) ErrorName() string {
	return "CollectionGetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGetHistoryRequestValidationError{}

// Validate checks the field values on CollectionGetHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGetHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGetHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGetHistoryResponseMultiError, or nil if none found.
func (m *CollectionGetHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGetHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionGetHistoryResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionGetHistoryResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionGetHistoryResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionGetHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionGetHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionGetHistoryResponseValidationError{
				field:  "History",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionGetHistoryResponseMultiError(errors)
	}

	return nil
}

// CollectionGetHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by CollectionGetHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type CollectionGetHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGetHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGetHistoryResponseMultiError) AllErrors() []error { return m }

// CollectionGetHistoryResponseValidationError is the validation error returned
// by CollectionGetHistoryResponse.Validate if the designated constraints
// aren't met.
type CollectionGetHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGetHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGetHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGetHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGetHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGetHistoryResponseValidationError) ErrorName() string {
	return "CollectionGetHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGetHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGetHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGetHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGetHistoryResponseValidationError{}

// Validate checks the field values on CollectionCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionCreateRequestMultiError, or nil if none found.
func (m *CollectionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionCreateRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionCreateRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionCreateRequestValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionCreateRequestMultiError(errors)
	}

	return nil
}

// CollectionCreateRequestMultiError is an error wrapping multiple validation
// errors returned by CollectionCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionCreateRequestMultiError) AllErrors() []error { return m }

// CollectionCreateRequestValidationError is the validation error returned by
// CollectionCreateRequest.Validate if the designated constraints aren't met.
type CollectionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionCreateRequestValidationError) ErrorName() string {
	return "CollectionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionCreateRequestValidationError{}

// Validate checks the field values on CollectionCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionCreateResponseMultiError, or nil if none found.
func (m *CollectionCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionCreateResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionCreateResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionCreateResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionCreateResponseMultiError(errors)
	}

	return nil
}

// CollectionCreateResponseMultiError is an error wrapping multiple validation
// errors returned by CollectionCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type CollectionCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionCreateResponseMultiError) AllErrors() []error { return m }

// CollectionCreateResponseValidationError is the validation error returned by
// CollectionCreateResponse.Validate if the designated constraints aren't met.
type CollectionCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionCreateResponseValidationError) ErrorName() string {
	return "CollectionCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionCreateResponseValidationError{}

// Validate checks the field values on CollectionUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionUpdateRequestMultiError, or nil if none found.
func (m *CollectionUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionUpdateRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionUpdateRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionUpdateRequestValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionUpdateRequestMultiError(errors)
	}

	return nil
}

// CollectionUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CollectionUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectionUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionUpdateRequestMultiError) AllErrors() []error { return m }

// CollectionUpdateRequestValidationError is the validation error returned by
// CollectionUpdateRequest.Validate if the designated constraints aren't met.
type CollectionUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionUpdateRequestValidationError) ErrorName() string {
	return "CollectionUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionUpdateRequestValidationError{}

// Validate checks the field values on CollectionUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionUpdateResponseMultiError, or nil if none found.
func (m *CollectionUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionUpdateResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionUpdateResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionUpdateResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionUpdateResponseMultiError(errors)
	}

	return nil
}

// CollectionUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by CollectionUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type CollectionUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionUpdateResponseMultiError) AllErrors() []error { return m }

// CollectionUpdateResponseValidationError is the validation error returned by
// CollectionUpdateResponse.Validate if the designated constraints aren't met.
type CollectionUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionUpdateResponseValidationError) ErrorName() string {
	return "CollectionUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionUpdateResponseValidationError{}

// Validate checks the field values on CollectionHideTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionHideTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionHideTxRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionHideTxRequestMultiError, or nil if none found.
func (m *CollectionHideTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionHideTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	if all {
		switch v := interface{}(m.GetHiddenTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionHideTxRequestValidationError{
					field:  "HiddenTx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionHideTxRequestValidationError{
					field:  "HiddenTx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHiddenTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionHideTxRequestValidationError{
				field:  "HiddenTx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionHideTxRequestMultiError(errors)
	}

	return nil
}

// CollectionHideTxRequestMultiError is an error wrapping multiple validation
// errors returned by CollectionHideTxRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectionHideTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionHideTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionHideTxRequestMultiError) AllErrors() []error { return m }

// CollectionHideTxRequestValidationError is the validation error returned by
// CollectionHideTxRequest.Validate if the designated constraints aren't met.
type CollectionHideTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionHideTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionHideTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionHideTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionHideTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionHideTxRequestValidationError) ErrorName() string {
	return "CollectionHideTxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionHideTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionHideTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionHideTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionHideTxRequestValidationError{}

// Validate checks the field values on CollectionHideTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionHideTxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionHideTxResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionHideTxResponseMultiError, or nil if none found.
func (m *CollectionHideTxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionHideTxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	if len(errors) > 0 {
		return CollectionHideTxResponseMultiError(errors)
	}

	return nil
}

// CollectionHideTxResponseMultiError is an error wrapping multiple validation
// errors returned by CollectionHideTxResponse.ValidateAll() if the designated
// constraints aren't met.
type CollectionHideTxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionHideTxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionHideTxResponseMultiError) AllErrors() []error { return m }

// CollectionHideTxResponseValidationError is the validation error returned by
// CollectionHideTxResponse.Validate if the designated constraints aren't met.
type CollectionHideTxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionHideTxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionHideTxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionHideTxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionHideTxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionHideTxResponseValidationError) ErrorName() string {
	return "CollectionHideTxResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionHideTxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionHideTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionHideTxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionHideTxResponseValidationError{}
