// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaincode/auth/common/users.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserGetCurrentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetCurrentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetCurrentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetCurrentResponseMultiError, or nil if none found.
func (m *UserGetCurrentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetCurrentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetCurrentResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetCurrentResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetCurrentResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetCurrentResponseMultiError(errors)
	}

	return nil
}

// UserGetCurrentResponseMultiError is an error wrapping multiple validation
// errors returned by UserGetCurrentResponse.ValidateAll() if the designated
// constraints aren't met.
type UserGetCurrentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetCurrentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetCurrentResponseMultiError) AllErrors() []error { return m }

// UserGetCurrentResponseValidationError is the validation error returned by
// UserGetCurrentResponse.Validate if the designated constraints aren't met.
type UserGetCurrentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetCurrentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetCurrentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetCurrentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetCurrentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetCurrentResponseValidationError) ErrorName() string {
	return "UserGetCurrentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetCurrentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetCurrentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetCurrentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetCurrentResponseValidationError{}

// Validate checks the field values on UserGetCurrentIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetCurrentIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetCurrentIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetCurrentIdResponseMultiError, or nil if none found.
func (m *UserGetCurrentIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetCurrentIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	if len(errors) > 0 {
		return UserGetCurrentIdResponseMultiError(errors)
	}

	return nil
}

// UserGetCurrentIdResponseMultiError is an error wrapping multiple validation
// errors returned by UserGetCurrentIdResponse.ValidateAll() if the designated
// constraints aren't met.
type UserGetCurrentIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetCurrentIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetCurrentIdResponseMultiError) AllErrors() []error { return m }

// UserGetCurrentIdResponseValidationError is the validation error returned by
// UserGetCurrentIdResponse.Validate if the designated constraints aren't met.
type UserGetCurrentIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetCurrentIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetCurrentIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetCurrentIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetCurrentIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetCurrentIdResponseValidationError) ErrorName() string {
	return "UserGetCurrentIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetCurrentIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetCurrentIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetCurrentIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetCurrentIdResponseValidationError{}

// Validate checks the field values on UserGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGetRequestMultiError,
// or nil if none found.
func (m *UserGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	if len(errors) > 0 {
		return UserGetRequestMultiError(errors)
	}

	return nil
}

// UserGetRequestMultiError is an error wrapping multiple validation errors
// returned by UserGetRequest.ValidateAll() if the designated constraints
// aren't met.
type UserGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetRequestMultiError) AllErrors() []error { return m }

// UserGetRequestValidationError is the validation error returned by
// UserGetRequest.Validate if the designated constraints aren't met.
type UserGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetRequestValidationError) ErrorName() string { return "UserGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetRequestValidationError{}

// Validate checks the field values on UserGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetResponseMultiError, or nil if none found.
func (m *UserGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetResponseMultiError(errors)
	}

	return nil
}

// UserGetResponseMultiError is an error wrapping multiple validation errors
// returned by UserGetResponse.ValidateAll() if the designated constraints
// aren't met.
type UserGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetResponseMultiError) AllErrors() []error { return m }

// UserGetResponseValidationError is the validation error returned by
// UserGetResponse.Validate if the designated constraints aren't met.
type UserGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetResponseValidationError) ErrorName() string { return "UserGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetResponseValidationError{}

// Validate checks the field values on UserGetListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetListRequestMultiError, or nil if none found.
func (m *UserGetListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	// no validation rules for Limit

	if len(errors) > 0 {
		return UserGetListRequestMultiError(errors)
	}

	return nil
}

// UserGetListRequestMultiError is an error wrapping multiple validation errors
// returned by UserGetListRequest.ValidateAll() if the designated constraints
// aren't met.
type UserGetListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetListRequestMultiError) AllErrors() []error { return m }

// UserGetListRequestValidationError is the validation error returned by
// UserGetListRequest.Validate if the designated constraints aren't met.
type UserGetListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetListRequestValidationError) ErrorName() string {
	return "UserGetListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetListRequestValidationError{}

// Validate checks the field values on UserGetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetListResponseMultiError, or nil if none found.
func (m *UserGetListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserGetListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserGetListResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserGetListResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Bookmark

	if len(errors) > 0 {
		return UserGetListResponseMultiError(errors)
	}

	return nil
}

// UserGetListResponseMultiError is an error wrapping multiple validation
// errors returned by UserGetListResponse.ValidateAll() if the designated
// constraints aren't met.
type UserGetListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetListResponseMultiError) AllErrors() []error { return m }

// UserGetListResponseValidationError is the validation error returned by
// UserGetListResponse.Validate if the designated constraints aren't met.
type UserGetListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetListResponseValidationError) ErrorName() string {
	return "UserGetListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetListResponseValidationError{}

// Validate checks the field values on UserGetHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetHistoryRequestMultiError, or nil if none found.
func (m *UserGetHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	// no validation rules for ShowHidden

	if len(errors) > 0 {
		return UserGetHistoryRequestMultiError(errors)
	}

	return nil
}

// UserGetHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by UserGetHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UserGetHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetHistoryRequestMultiError) AllErrors() []error { return m }

// UserGetHistoryRequestValidationError is the validation error returned by
// UserGetHistoryRequest.Validate if the designated constraints aren't met.
type UserGetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetHistoryRequestValidationError) ErrorName() string {
	return "UserGetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetHistoryRequestValidationError{}

// Validate checks the field values on UserGetHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetHistoryResponseMultiError, or nil if none found.
func (m *UserGetHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetHistoryResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetHistoryResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetHistoryResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetHistoryResponseValidationError{
				field:  "History",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetHistoryResponseMultiError(errors)
	}

	return nil
}

// UserGetHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by UserGetHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UserGetHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetHistoryResponseMultiError) AllErrors() []error { return m }

// UserGetHistoryResponseValidationError is the validation error returned by
// UserGetHistoryResponse.Validate if the designated constraints aren't met.
type UserGetHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetHistoryResponseValidationError) ErrorName() string {
	return "UserGetHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetHistoryResponseValidationError{}

// Validate checks the field values on UserGetHiddenTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetHiddenTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetHiddenTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetHiddenTxRequestMultiError, or nil if none found.
func (m *UserGetHiddenTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetHiddenTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	if len(errors) > 0 {
		return UserGetHiddenTxRequestMultiError(errors)
	}

	return nil
}

// UserGetHiddenTxRequestMultiError is an error wrapping multiple validation
// errors returned by UserGetHiddenTxRequest.ValidateAll() if the designated
// constraints aren't met.
type UserGetHiddenTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetHiddenTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetHiddenTxRequestMultiError) AllErrors() []error { return m }

// UserGetHiddenTxRequestValidationError is the validation error returned by
// UserGetHiddenTxRequest.Validate if the designated constraints aren't met.
type UserGetHiddenTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetHiddenTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetHiddenTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetHiddenTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetHiddenTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetHiddenTxRequestValidationError) ErrorName() string {
	return "UserGetHiddenTxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetHiddenTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetHiddenTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetHiddenTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetHiddenTxRequestValidationError{}

// Validate checks the field values on UserGetHiddenTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetHiddenTxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetHiddenTxResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetHiddenTxResponseMultiError, or nil if none found.
func (m *UserGetHiddenTxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetHiddenTxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetHiddenTxs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetHiddenTxResponseValidationError{
					field:  "HiddenTxs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetHiddenTxResponseValidationError{
					field:  "HiddenTxs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHiddenTxs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetHiddenTxResponseValidationError{
				field:  "HiddenTxs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetHiddenTxResponseMultiError(errors)
	}

	return nil
}

// UserGetHiddenTxResponseMultiError is an error wrapping multiple validation
// errors returned by UserGetHiddenTxResponse.ValidateAll() if the designated
// constraints aren't met.
type UserGetHiddenTxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetHiddenTxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetHiddenTxResponseMultiError) AllErrors() []error { return m }

// UserGetHiddenTxResponseValidationError is the validation error returned by
// UserGetHiddenTxResponse.Validate if the designated constraints aren't met.
type UserGetHiddenTxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetHiddenTxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetHiddenTxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetHiddenTxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetHiddenTxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetHiddenTxResponseValidationError) ErrorName() string {
	return "UserGetHiddenTxResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetHiddenTxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetHiddenTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetHiddenTxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetHiddenTxResponseValidationError{}

// Validate checks the field values on UserCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreateRequestMultiError, or nil if none found.
func (m *UserCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return UserCreateRequestMultiError(errors)
	}

	return nil
}

// UserCreateRequestMultiError is an error wrapping multiple validation errors
// returned by UserCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type UserCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateRequestMultiError) AllErrors() []error { return m }

// UserCreateRequestValidationError is the validation error returned by
// UserCreateRequest.Validate if the designated constraints aren't met.
type UserCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateRequestValidationError) ErrorName() string {
	return "UserCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateRequestValidationError{}

// Validate checks the field values on UserCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreateResponseMultiError, or nil if none found.
func (m *UserCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserCreateResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserCreateResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserCreateResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserCreateResponseMultiError(errors)
	}

	return nil
}

// UserCreateResponseMultiError is an error wrapping multiple validation errors
// returned by UserCreateResponse.ValidateAll() if the designated constraints
// aren't met.
type UserCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateResponseMultiError) AllErrors() []error { return m }

// UserCreateResponseValidationError is the validation error returned by
// UserCreateResponse.Validate if the designated constraints aren't met.
type UserCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateResponseValidationError) ErrorName() string {
	return "UserCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateResponseValidationError{}

// Validate checks the field values on UserDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDeleteRequestMultiError, or nil if none found.
func (m *UserDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	// no validation rules for Reason

	if len(errors) > 0 {
		return UserDeleteRequestMultiError(errors)
	}

	return nil
}

// UserDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by UserDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type UserDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeleteRequestMultiError) AllErrors() []error { return m }

// UserDeleteRequestValidationError is the validation error returned by
// UserDeleteRequest.Validate if the designated constraints aren't met.
type UserDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeleteRequestValidationError) ErrorName() string {
	return "UserDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeleteRequestValidationError{}

// Validate checks the field values on UserDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDeleteResponseMultiError, or nil if none found.
func (m *UserDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserDeleteResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserDeleteResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserDeleteResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserDeleteResponseMultiError(errors)
	}

	return nil
}

// UserDeleteResponseMultiError is an error wrapping multiple validation errors
// returned by UserDeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type UserDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeleteResponseMultiError) AllErrors() []error { return m }

// UserDeleteResponseValidationError is the validation error returned by
// UserDeleteResponse.Validate if the designated constraints aren't met.
type UserDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeleteResponseValidationError) ErrorName() string {
	return "UserDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeleteResponseValidationError{}

// Validate checks the field values on UserUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateRequestMultiError, or nil if none found.
func (m *UserUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	// no validation rules for Name

	if len(errors) > 0 {
		return UserUpdateRequestMultiError(errors)
	}

	return nil
}

// UserUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UserUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateRequestMultiError) AllErrors() []error { return m }

// UserUpdateRequestValidationError is the validation error returned by
// UserUpdateRequest.Validate if the designated constraints aren't met.
type UserUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateRequestValidationError) ErrorName() string {
	return "UserUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateRequestValidationError{}

// Validate checks the field values on UserUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateResponseMultiError, or nil if none found.
func (m *UserUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdateResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdateResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserUpdateResponseMultiError(errors)
	}

	return nil
}

// UserUpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UserUpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateResponseMultiError) AllErrors() []error { return m }

// UserUpdateResponseValidationError is the validation error returned by
// UserUpdateResponse.Validate if the designated constraints aren't met.
type UserUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateResponseValidationError) ErrorName() string {
	return "UserUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateResponseValidationError{}

// Validate checks the field values on UserHideTxRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserHideTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserHideTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserHideTxRequestMultiError, or nil if none found.
func (m *UserHideTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserHideTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetHiddenTx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserHideTxRequestValidationError{
					field:  "HiddenTx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserHideTxRequestValidationError{
					field:  "HiddenTx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHiddenTx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserHideTxRequestValidationError{
				field:  "HiddenTx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserHideTxRequestMultiError(errors)
	}

	return nil
}

// UserHideTxRequestMultiError is an error wrapping multiple validation errors
// returned by UserHideTxRequest.ValidateAll() if the designated constraints
// aren't met.
type UserHideTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserHideTxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserHideTxRequestMultiError) AllErrors() []error { return m }

// UserHideTxRequestValidationError is the validation error returned by
// UserHideTxRequest.Validate if the designated constraints aren't met.
type UserHideTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserHideTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserHideTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserHideTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserHideTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserHideTxRequestValidationError) ErrorName() string {
	return "UserHideTxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserHideTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserHideTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserHideTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserHideTxRequestValidationError{}

// Validate checks the field values on UserHideTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserHideTxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserHideTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserHideTxResponseMultiError, or nil if none found.
func (m *UserHideTxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserHideTxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserHideTxResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserHideTxResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserHideTxResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserHideTxResponseMultiError(errors)
	}

	return nil
}

// UserHideTxResponseMultiError is an error wrapping multiple validation errors
// returned by UserHideTxResponse.ValidateAll() if the designated constraints
// aren't met.
type UserHideTxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserHideTxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserHideTxResponseMultiError) AllErrors() []error { return m }

// UserHideTxResponseValidationError is the validation error returned by
// UserHideTxResponse.Validate if the designated constraints aren't met.
type UserHideTxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserHideTxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserHideTxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserHideTxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserHideTxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserHideTxResponseValidationError) ErrorName() string {
	return "UserHideTxResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserHideTxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserHideTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserHideTxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserHideTxResponseValidationError{}
