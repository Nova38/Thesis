// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaincode/auth/rbac/schema/v1/rbac.proto

package schemav1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for RoleId

	if all {
		switch v := interface{}(m.GetAc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleValidationError{
					field:  "Ac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleValidationError{
					field:  "Ac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleValidationError{
				field:  "Ac",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on RoleGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleGetRequestMultiError,
// or nil if none found.
func (m *RoleGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleGetRequestMultiError(errors)
	}

	return nil
}

// RoleGetRequestMultiError is an error wrapping multiple validation errors
// returned by RoleGetRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetRequestMultiError) AllErrors() []error { return m }

// RoleGetRequestValidationError is the validation error returned by
// RoleGetRequest.Validate if the designated constraints aren't met.
type RoleGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetRequestValidationError) ErrorName() string { return "RoleGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e RoleGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetRequestValidationError{}

// Validate checks the field values on RoleGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleGetResponseMultiError, or nil if none found.
func (m *RoleGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleGetResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleGetResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleGetResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleGetResponseMultiError(errors)
	}

	return nil
}

// RoleGetResponseMultiError is an error wrapping multiple validation errors
// returned by RoleGetResponse.ValidateAll() if the designated constraints
// aren't met.
type RoleGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetResponseMultiError) AllErrors() []error { return m }

// RoleGetResponseValidationError is the validation error returned by
// RoleGetResponse.Validate if the designated constraints aren't met.
type RoleGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetResponseValidationError) ErrorName() string { return "RoleGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e RoleGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetResponseValidationError{}

// Validate checks the field values on RoleGetListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleGetListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleGetListRequestMultiError, or nil if none found.
func (m *RoleGetListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	// no validation rules for PageSize

	if len(errors) > 0 {
		return RoleGetListRequestMultiError(errors)
	}

	return nil
}

// RoleGetListRequestMultiError is an error wrapping multiple validation errors
// returned by RoleGetListRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleGetListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetListRequestMultiError) AllErrors() []error { return m }

// RoleGetListRequestValidationError is the validation error returned by
// RoleGetListRequest.Validate if the designated constraints aren't met.
type RoleGetListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetListRequestValidationError) ErrorName() string {
	return "RoleGetListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleGetListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetListRequestValidationError{}

// Validate checks the field values on RoleGetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleGetListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleGetListResponseMultiError, or nil if none found.
func (m *RoleGetListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleGetListResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleGetListResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleGetListResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Bookmark

	if len(errors) > 0 {
		return RoleGetListResponseMultiError(errors)
	}

	return nil
}

// RoleGetListResponseMultiError is an error wrapping multiple validation
// errors returned by RoleGetListResponse.ValidateAll() if the designated
// constraints aren't met.
type RoleGetListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetListResponseMultiError) AllErrors() []error { return m }

// RoleGetListResponseValidationError is the validation error returned by
// RoleGetListResponse.Validate if the designated constraints aren't met.
type RoleGetListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetListResponseValidationError) ErrorName() string {
	return "RoleGetListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoleGetListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetListResponseValidationError{}

// Validate checks the field values on RoleGetByCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleGetByCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetByCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleGetByCollectionRequestMultiError, or nil if none found.
func (m *RoleGetByCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetByCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for Bookmark

	// no validation rules for PageSize

	if len(errors) > 0 {
		return RoleGetByCollectionRequestMultiError(errors)
	}

	return nil
}

// RoleGetByCollectionRequestMultiError is an error wrapping multiple
// validation errors returned by RoleGetByCollectionRequest.ValidateAll() if
// the designated constraints aren't met.
type RoleGetByCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetByCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetByCollectionRequestMultiError) AllErrors() []error { return m }

// RoleGetByCollectionRequestValidationError is the validation error returned
// by RoleGetByCollectionRequest.Validate if the designated constraints aren't met.
type RoleGetByCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetByCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetByCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetByCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetByCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetByCollectionRequestValidationError) ErrorName() string {
	return "RoleGetByCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleGetByCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetByCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetByCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetByCollectionRequestValidationError{}

// Validate checks the field values on RoleGetByCollectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleGetByCollectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetByCollectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleGetByCollectionResponseMultiError, or nil if none found.
func (m *RoleGetByCollectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetByCollectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleGetByCollectionResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleGetByCollectionResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleGetByCollectionResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleGetByCollectionResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleGetByCollectionResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleGetByCollectionResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Bookmark

	if len(errors) > 0 {
		return RoleGetByCollectionResponseMultiError(errors)
	}

	return nil
}

// RoleGetByCollectionResponseMultiError is an error wrapping multiple
// validation errors returned by RoleGetByCollectionResponse.ValidateAll() if
// the designated constraints aren't met.
type RoleGetByCollectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetByCollectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetByCollectionResponseMultiError) AllErrors() []error { return m }

// RoleGetByCollectionResponseValidationError is the validation error returned
// by RoleGetByCollectionResponse.Validate if the designated constraints
// aren't met.
type RoleGetByCollectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetByCollectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetByCollectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetByCollectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetByCollectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetByCollectionResponseValidationError) ErrorName() string {
	return "RoleGetByCollectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoleGetByCollectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetByCollectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetByCollectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetByCollectionResponseValidationError{}

// Validate checks the field values on RoleGetHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleGetHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleGetHistoryRequestMultiError, or nil if none found.
func (m *RoleGetHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for RoleId

	// no validation rules for ShowHidden

	if len(errors) > 0 {
		return RoleGetHistoryRequestMultiError(errors)
	}

	return nil
}

// RoleGetHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by RoleGetHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type RoleGetHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetHistoryRequestMultiError) AllErrors() []error { return m }

// RoleGetHistoryRequestValidationError is the validation error returned by
// RoleGetHistoryRequest.Validate if the designated constraints aren't met.
type RoleGetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetHistoryRequestValidationError) ErrorName() string {
	return "RoleGetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleGetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetHistoryRequestValidationError{}

// Validate checks the field values on RoleGetHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleGetHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleGetHistoryResponseMultiError, or nil if none found.
func (m *RoleGetHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleGetHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleGetHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleGetHistoryResponseValidationError{
				field:  "History",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleGetHistoryResponseMultiError(errors)
	}

	return nil
}

// RoleGetHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by RoleGetHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type RoleGetHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetHistoryResponseMultiError) AllErrors() []error { return m }

// RoleGetHistoryResponseValidationError is the validation error returned by
// RoleGetHistoryResponse.Validate if the designated constraints aren't met.
type RoleGetHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetHistoryResponseValidationError) ErrorName() string {
	return "RoleGetHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoleGetHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetHistoryResponseValidationError{}

// Validate checks the field values on RoleCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleCreateRequestMultiError, or nil if none found.
func (m *RoleCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	// no validation rules for CollectionId

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleCreateRequestMultiError(errors)
	}

	return nil
}

// RoleCreateRequestMultiError is an error wrapping multiple validation errors
// returned by RoleCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleCreateRequestMultiError) AllErrors() []error { return m }

// RoleCreateRequestValidationError is the validation error returned by
// RoleCreateRequest.Validate if the designated constraints aren't met.
type RoleCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleCreateRequestValidationError) ErrorName() string {
	return "RoleCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleCreateRequestValidationError{}

// Validate checks the field values on RoleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleCreateResponseMultiError, or nil if none found.
func (m *RoleCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleCreateResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleCreateResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleCreateResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleCreateResponseMultiError(errors)
	}

	return nil
}

// RoleCreateResponseMultiError is an error wrapping multiple validation errors
// returned by RoleCreateResponse.ValidateAll() if the designated constraints
// aren't met.
type RoleCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleCreateResponseMultiError) AllErrors() []error { return m }

// RoleCreateResponseValidationError is the validation error returned by
// RoleCreateResponse.Validate if the designated constraints aren't met.
type RoleCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleCreateResponseValidationError) ErrorName() string {
	return "RoleCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoleCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleCreateResponseValidationError{}

// Validate checks the field values on RoleUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleUpdateRequestMultiError, or nil if none found.
func (m *RoleUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for RoleId

	if all {
		switch v := interface{}(m.GetUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleUpdateRequestValidationError{
					field:  "Update",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleUpdateRequestValidationError{
					field:  "Update",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleUpdateRequestValidationError{
				field:  "Update",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleUpdateRequestValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleUpdateRequestValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleUpdateRequestValidationError{
				field:  "Mask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleUpdateRequestMultiError(errors)
	}

	return nil
}

// RoleUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by RoleUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleUpdateRequestMultiError) AllErrors() []error { return m }

// RoleUpdateRequestValidationError is the validation error returned by
// RoleUpdateRequest.Validate if the designated constraints aren't met.
type RoleUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleUpdateRequestValidationError) ErrorName() string {
	return "RoleUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleUpdateRequestValidationError{}

// Validate checks the field values on RoleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleUpdateResponseMultiError, or nil if none found.
func (m *RoleUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleUpdateResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleUpdateResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleUpdateResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleUpdateResponseMultiError(errors)
	}

	return nil
}

// RoleUpdateResponseMultiError is an error wrapping multiple validation errors
// returned by RoleUpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type RoleUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleUpdateResponseMultiError) AllErrors() []error { return m }

// RoleUpdateResponseValidationError is the validation error returned by
// RoleUpdateResponse.Validate if the designated constraints aren't met.
type RoleUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleUpdateResponseValidationError) ErrorName() string {
	return "RoleUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoleUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleUpdateResponseValidationError{}

// Validate checks the field values on RoleDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleDeleteRequestMultiError, or nil if none found.
func (m *RoleDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleDeleteRequestMultiError(errors)
	}

	return nil
}

// RoleDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by RoleDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDeleteRequestMultiError) AllErrors() []error { return m }

// RoleDeleteRequestValidationError is the validation error returned by
// RoleDeleteRequest.Validate if the designated constraints aren't met.
type RoleDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDeleteRequestValidationError) ErrorName() string {
	return "RoleDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDeleteRequestValidationError{}

// Validate checks the field values on RoleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleDeleteResponseMultiError, or nil if none found.
func (m *RoleDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleDeleteResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleDeleteResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleDeleteResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleDeleteResponseMultiError(errors)
	}

	return nil
}

// RoleDeleteResponseMultiError is an error wrapping multiple validation errors
// returned by RoleDeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type RoleDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDeleteResponseMultiError) AllErrors() []error { return m }

// RoleDeleteResponseValidationError is the validation error returned by
// RoleDeleteResponse.Validate if the designated constraints aren't met.
type RoleDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDeleteResponseValidationError) ErrorName() string {
	return "RoleDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoleDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDeleteResponseValidationError{}

// Validate checks the field values on Membership with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Membership) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Membership with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MembershipMultiError, or
// nil if none found.
func (m *Membership) ValidateAll() error {
	return m.validate(true)
}

func (m *Membership) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for MspId

	// no validation rules for UserId

	// no validation rules for RoleId

	if len(errors) > 0 {
		return MembershipMultiError(errors)
	}

	return nil
}

// MembershipMultiError is an error wrapping multiple validation errors
// returned by Membership.ValidateAll() if the designated constraints aren't met.
type MembershipMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipMultiError) AllErrors() []error { return m }

// MembershipValidationError is the validation error returned by
// Membership.Validate if the designated constraints aren't met.
type MembershipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipValidationError) ErrorName() string { return "MembershipValidationError" }

// Error satisfies the builtin error interface
func (e MembershipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembership.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipValidationError{}

// Validate checks the field values on MembershipGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipGetRequestMultiError, or nil if none found.
func (m *MembershipGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	// no validation rules for CollectionId

	// no validation rules for RoleId

	if len(errors) > 0 {
		return MembershipGetRequestMultiError(errors)
	}

	return nil
}

// MembershipGetRequestMultiError is an error wrapping multiple validation
// errors returned by MembershipGetRequest.ValidateAll() if the designated
// constraints aren't met.
type MembershipGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipGetRequestMultiError) AllErrors() []error { return m }

// MembershipGetRequestValidationError is the validation error returned by
// MembershipGetRequest.Validate if the designated constraints aren't met.
type MembershipGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipGetRequestValidationError) ErrorName() string {
	return "MembershipGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipGetRequestValidationError{}

// Validate checks the field values on MembershipGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipGetResponseMultiError, or nil if none found.
func (m *MembershipGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMembership()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MembershipGetResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MembershipGetResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembership()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MembershipGetResponseValidationError{
				field:  "Membership",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MembershipGetResponseMultiError(errors)
	}

	return nil
}

// MembershipGetResponseMultiError is an error wrapping multiple validation
// errors returned by MembershipGetResponse.ValidateAll() if the designated
// constraints aren't met.
type MembershipGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipGetResponseMultiError) AllErrors() []error { return m }

// MembershipGetResponseValidationError is the validation error returned by
// MembershipGetResponse.Validate if the designated constraints aren't met.
type MembershipGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipGetResponseValidationError) ErrorName() string {
	return "MembershipGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipGetResponseValidationError{}

// Validate checks the field values on MembershipGetListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipGetListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipGetListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipGetListRequestMultiError, or nil if none found.
func (m *MembershipGetListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipGetListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bookmark

	// no validation rules for PageSize

	if len(errors) > 0 {
		return MembershipGetListRequestMultiError(errors)
	}

	return nil
}

// MembershipGetListRequestMultiError is an error wrapping multiple validation
// errors returned by MembershipGetListRequest.ValidateAll() if the designated
// constraints aren't met.
type MembershipGetListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipGetListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipGetListRequestMultiError) AllErrors() []error { return m }

// MembershipGetListRequestValidationError is the validation error returned by
// MembershipGetListRequest.Validate if the designated constraints aren't met.
type MembershipGetListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipGetListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipGetListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipGetListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipGetListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipGetListRequestValidationError) ErrorName() string {
	return "MembershipGetListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipGetListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipGetListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipGetListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipGetListRequestValidationError{}

// Validate checks the field values on MembershipGetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipGetListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipGetListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipGetListResponseMultiError, or nil if none found.
func (m *MembershipGetListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipGetListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMemberships() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MembershipGetListResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MembershipGetListResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MembershipGetListResponseValidationError{
					field:  fmt.Sprintf("Memberships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Bookmark

	if len(errors) > 0 {
		return MembershipGetListResponseMultiError(errors)
	}

	return nil
}

// MembershipGetListResponseMultiError is an error wrapping multiple validation
// errors returned by MembershipGetListResponse.ValidateAll() if the
// designated constraints aren't met.
type MembershipGetListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipGetListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipGetListResponseMultiError) AllErrors() []error { return m }

// MembershipGetListResponseValidationError is the validation error returned by
// MembershipGetListResponse.Validate if the designated constraints aren't met.
type MembershipGetListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipGetListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipGetListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipGetListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipGetListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipGetListResponseValidationError) ErrorName() string {
	return "MembershipGetListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipGetListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipGetListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipGetListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipGetListResponseValidationError{}

// Validate checks the field values on MembershipGetByCollectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MembershipGetByCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipGetByCollectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MembershipGetByCollectionRequestMultiError, or nil if none found.
func (m *MembershipGetByCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipGetByCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for Bookmark

	// no validation rules for PageSize

	if len(errors) > 0 {
		return MembershipGetByCollectionRequestMultiError(errors)
	}

	return nil
}

// MembershipGetByCollectionRequestMultiError is an error wrapping multiple
// validation errors returned by
// MembershipGetByCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type MembershipGetByCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipGetByCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipGetByCollectionRequestMultiError) AllErrors() []error { return m }

// MembershipGetByCollectionRequestValidationError is the validation error
// returned by MembershipGetByCollectionRequest.Validate if the designated
// constraints aren't met.
type MembershipGetByCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipGetByCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipGetByCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipGetByCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipGetByCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipGetByCollectionRequestValidationError) ErrorName() string {
	return "MembershipGetByCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipGetByCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipGetByCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipGetByCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipGetByCollectionRequestValidationError{}

// Validate checks the field values on MembershipGetByCollectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MembershipGetByCollectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipGetByCollectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MembershipGetByCollectionResponseMultiError, or nil if none found.
func (m *MembershipGetByCollectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipGetByCollectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MembershipGetByCollectionResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MembershipGetByCollectionResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MembershipGetByCollectionResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMemberships() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MembershipGetByCollectionResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MembershipGetByCollectionResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MembershipGetByCollectionResponseValidationError{
					field:  fmt.Sprintf("Memberships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Bookmark

	if len(errors) > 0 {
		return MembershipGetByCollectionResponseMultiError(errors)
	}

	return nil
}

// MembershipGetByCollectionResponseMultiError is an error wrapping multiple
// validation errors returned by
// MembershipGetByCollectionResponse.ValidateAll() if the designated
// constraints aren't met.
type MembershipGetByCollectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipGetByCollectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipGetByCollectionResponseMultiError) AllErrors() []error { return m }

// MembershipGetByCollectionResponseValidationError is the validation error
// returned by MembershipGetByCollectionResponse.Validate if the designated
// constraints aren't met.
type MembershipGetByCollectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipGetByCollectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipGetByCollectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipGetByCollectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipGetByCollectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipGetByCollectionResponseValidationError) ErrorName() string {
	return "MembershipGetByCollectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipGetByCollectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipGetByCollectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipGetByCollectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipGetByCollectionResponseValidationError{}

// Validate checks the field values on MembershipGetByUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipGetByUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipGetByUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipGetByUserRequestMultiError, or nil if none found.
func (m *MembershipGetByUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipGetByUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for MspId

	// no validation rules for UserId

	// no validation rules for Bookmark

	// no validation rules for PageSize

	if len(errors) > 0 {
		return MembershipGetByUserRequestMultiError(errors)
	}

	return nil
}

// MembershipGetByUserRequestMultiError is an error wrapping multiple
// validation errors returned by MembershipGetByUserRequest.ValidateAll() if
// the designated constraints aren't met.
type MembershipGetByUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipGetByUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipGetByUserRequestMultiError) AllErrors() []error { return m }

// MembershipGetByUserRequestValidationError is the validation error returned
// by MembershipGetByUserRequest.Validate if the designated constraints aren't met.
type MembershipGetByUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipGetByUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipGetByUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipGetByUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipGetByUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipGetByUserRequestValidationError) ErrorName() string {
	return "MembershipGetByUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipGetByUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipGetByUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipGetByUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipGetByUserRequestValidationError{}

// Validate checks the field values on MembershipGetByUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipGetByUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipGetByUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipGetByUserResponseMultiError, or nil if none found.
func (m *MembershipGetByUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipGetByUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MembershipGetByUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MembershipGetByUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MembershipGetByUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMemberships() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MembershipGetByUserResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MembershipGetByUserResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MembershipGetByUserResponseValidationError{
					field:  fmt.Sprintf("Memberships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Bookmark

	if len(errors) > 0 {
		return MembershipGetByUserResponseMultiError(errors)
	}

	return nil
}

// MembershipGetByUserResponseMultiError is an error wrapping multiple
// validation errors returned by MembershipGetByUserResponse.ValidateAll() if
// the designated constraints aren't met.
type MembershipGetByUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipGetByUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipGetByUserResponseMultiError) AllErrors() []error { return m }

// MembershipGetByUserResponseValidationError is the validation error returned
// by MembershipGetByUserResponse.Validate if the designated constraints
// aren't met.
type MembershipGetByUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipGetByUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipGetByUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipGetByUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipGetByUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipGetByUserResponseValidationError) ErrorName() string {
	return "MembershipGetByUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipGetByUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipGetByUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipGetByUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipGetByUserResponseValidationError{}

// Validate checks the field values on MembershipGetHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipGetHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipGetHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipGetHistoryRequestMultiError, or nil if none found.
func (m *MembershipGetHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipGetHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for MspId

	// no validation rules for UserId

	// no validation rules for RoleId

	if len(errors) > 0 {
		return MembershipGetHistoryRequestMultiError(errors)
	}

	return nil
}

// MembershipGetHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by MembershipGetHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type MembershipGetHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipGetHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipGetHistoryRequestMultiError) AllErrors() []error { return m }

// MembershipGetHistoryRequestValidationError is the validation error returned
// by MembershipGetHistoryRequest.Validate if the designated constraints
// aren't met.
type MembershipGetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipGetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipGetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipGetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipGetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipGetHistoryRequestValidationError) ErrorName() string {
	return "MembershipGetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipGetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipGetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipGetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipGetHistoryRequestValidationError{}

// Validate checks the field values on MembershipGetHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipGetHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipGetHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipGetHistoryResponseMultiError, or nil if none found.
func (m *MembershipGetHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipGetHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MembershipGetHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MembershipGetHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MembershipGetHistoryResponseValidationError{
				field:  "History",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MembershipGetHistoryResponseMultiError(errors)
	}

	return nil
}

// MembershipGetHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by MembershipGetHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type MembershipGetHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipGetHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipGetHistoryResponseMultiError) AllErrors() []error { return m }

// MembershipGetHistoryResponseValidationError is the validation error returned
// by MembershipGetHistoryResponse.Validate if the designated constraints
// aren't met.
type MembershipGetHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipGetHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipGetHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipGetHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipGetHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipGetHistoryResponseValidationError) ErrorName() string {
	return "MembershipGetHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipGetHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipGetHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipGetHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipGetHistoryResponseValidationError{}

// Validate checks the field values on MembershipCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipCreateRequestMultiError, or nil if none found.
func (m *MembershipCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	// no validation rules for CollectionId

	// no validation rules for RoleId

	if len(errors) > 0 {
		return MembershipCreateRequestMultiError(errors)
	}

	return nil
}

// MembershipCreateRequestMultiError is an error wrapping multiple validation
// errors returned by MembershipCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type MembershipCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipCreateRequestMultiError) AllErrors() []error { return m }

// MembershipCreateRequestValidationError is the validation error returned by
// MembershipCreateRequest.Validate if the designated constraints aren't met.
type MembershipCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipCreateRequestValidationError) ErrorName() string {
	return "MembershipCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipCreateRequestValidationError{}

// Validate checks the field values on MembershipCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipCreateResponseMultiError, or nil if none found.
func (m *MembershipCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMembership()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MembershipCreateResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MembershipCreateResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembership()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MembershipCreateResponseValidationError{
				field:  "Membership",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MembershipCreateResponseMultiError(errors)
	}

	return nil
}

// MembershipCreateResponseMultiError is an error wrapping multiple validation
// errors returned by MembershipCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type MembershipCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipCreateResponseMultiError) AllErrors() []error { return m }

// MembershipCreateResponseValidationError is the validation error returned by
// MembershipCreateResponse.Validate if the designated constraints aren't met.
type MembershipCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipCreateResponseValidationError) ErrorName() string {
	return "MembershipCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipCreateResponseValidationError{}

// Validate checks the field values on MembershipDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipDeleteRequestMultiError, or nil if none found.
func (m *MembershipDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for UserId

	// no validation rules for CollectionId

	// no validation rules for RoleId

	if len(errors) > 0 {
		return MembershipDeleteRequestMultiError(errors)
	}

	return nil
}

// MembershipDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by MembershipDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type MembershipDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipDeleteRequestMultiError) AllErrors() []error { return m }

// MembershipDeleteRequestValidationError is the validation error returned by
// MembershipDeleteRequest.Validate if the designated constraints aren't met.
type MembershipDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipDeleteRequestValidationError) ErrorName() string {
	return "MembershipDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipDeleteRequestValidationError{}

// Validate checks the field values on MembershipDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MembershipDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MembershipDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MembershipDeleteResponseMultiError, or nil if none found.
func (m *MembershipDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MembershipDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMembership()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MembershipDeleteResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MembershipDeleteResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembership()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MembershipDeleteResponseValidationError{
				field:  "Membership",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MembershipDeleteResponseMultiError(errors)
	}

	return nil
}

// MembershipDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by MembershipDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type MembershipDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MembershipDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MembershipDeleteResponseMultiError) AllErrors() []error { return m }

// MembershipDeleteResponseValidationError is the validation error returned by
// MembershipDeleteResponse.Validate if the designated constraints aren't met.
type MembershipDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MembershipDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MembershipDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MembershipDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MembershipDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MembershipDeleteResponseValidationError) ErrorName() string {
	return "MembershipDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MembershipDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMembershipDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MembershipDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MembershipDeleteResponseValidationError{}
