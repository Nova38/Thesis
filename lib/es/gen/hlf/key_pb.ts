// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file hlf/key.proto (package hlf, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message hlf.KeySchema
 */
export class KeySchema extends Message<KeySchema> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: google.protobuf.FieldMask key_paths = 2;
   */
  keyPaths?: FieldMask;

  constructor(data?: PartialMessage<KeySchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hlf.KeySchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_paths", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeySchema {
    return new KeySchema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeySchema {
    return new KeySchema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeySchema {
    return new KeySchema().fromJsonString(jsonString, options);
  }

  static equals(a: KeySchema | PlainMessage<KeySchema> | undefined, b: KeySchema | PlainMessage<KeySchema> | undefined): boolean {
    return proto3.util.equals(KeySchema, a, b);
  }
}

/**
 * @generated from message hlf.ObjectDiff
 */
export class ObjectDiff extends Message<ObjectDiff> {
  /**
   * @generated from field: string object_name = 1;
   */
  objectName = "";

  /**
   * @generated from field: bool all_fields = 2;
   */
  allFields = false;

  /**
   * @generated from field: repeated string updated_fields = 3;
   */
  updatedFields: string[] = [];

  /**
   * @generated from field: repeated string deleted_fields = 4;
   */
  deletedFields: string[] = [];

  /**
   * @generated from field: repeated string added_fields = 5;
   */
  addedFields: string[] = [];

  constructor(data?: PartialMessage<ObjectDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hlf.ObjectDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "all_fields", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "updated_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "deleted_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "added_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectDiff {
    return new ObjectDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectDiff {
    return new ObjectDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectDiff {
    return new ObjectDiff().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectDiff | PlainMessage<ObjectDiff> | undefined, b: ObjectDiff | PlainMessage<ObjectDiff> | undefined): boolean {
    return proto3.util.equals(ObjectDiff, a, b);
  }
}

/**
 * @generated from message hlf.DataField
 */
export class DataField extends Message<DataField> {
  /**
   * @generated from field: bool is_data = 1;
   */
  isData = false;

  /**
   * @generated from field: google.protobuf.FieldMask updated_log = 2;
   */
  updatedLog?: FieldMask;

  constructor(data?: PartialMessage<DataField>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hlf.DataField";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_data", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "updated_log", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataField {
    return new DataField().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataField {
    return new DataField().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataField {
    return new DataField().fromJsonString(jsonString, options);
  }

  static equals(a: DataField | PlainMessage<DataField> | undefined, b: DataField | PlainMessage<DataField> | undefined): boolean {
    return proto3.util.equals(DataField, a, b);
  }
}

