// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file auth/v1/acl.proto (package auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message auth.Operation
 */
export class Operation extends Message<Operation> {
  /**
   * @generated from field: auth.Operation.Domain domain = 1;
   */
  domain = Operation_Domain.UNSPECIFIED;

  /**
   * @generated from field: auth.Operation.Action action = 2;
   */
  action = Operation_Action.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.FieldMask paths = 3;
   */
  paths?: FieldMask;

  constructor(data?: PartialMessage<Operation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Operation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "enum", T: proto3.getEnumType(Operation_Domain) },
    { no: 2, name: "action", kind: "enum", T: proto3.getEnumType(Operation_Action) },
    { no: 3, name: "paths", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation {
    return new Operation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJsonString(jsonString, options);
  }

  static equals(a: Operation | PlainMessage<Operation> | undefined, b: Operation | PlainMessage<Operation> | undefined): boolean {
    return proto3.util.equals(Operation, a, b);
  }
}

/**
 * @generated from enum auth.Operation.Domain
 */
export enum Operation_Domain {
  /**
   * @generated from enum value: DOMAIN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Meta create
   *
   * @generated from enum value: DOMAIN_COLLECTION = 1;
   */
  COLLECTION = 1,

  /**
   * @generated from enum value: DOMAIN_COLLECTION_MEMBERSHIP = 2;
   */
  COLLECTION_MEMBERSHIP = 2,

  /**
   * @generated from enum value: DOMAIN_COLLECTION_PERMISSION = 3;
   */
  COLLECTION_PERMISSION = 3,

  /**
   * @generated from enum value: DOMAIN_COLLECTION_ROLES = 4;
   */
  COLLECTION_ROLES = 4,

  /**
   * @generated from enum value: DOMAIN_USER = 5;
   */
  USER = 5,

  /**
   * @generated from enum value: DOMAIN_OBJECT = 6;
   */
  OBJECT = 6,

  /**
   * @generated from enum value: DOMAIN_OBJECT_FIELD = 7;
   */
  OBJECT_FIELD = 7,

  /**
   * Test
   *
   * @generated from enum value: DOMAIN_TEST = 100;
   */
  TEST = 100,
}
// Retrieve enum metadata with: proto3.getEnumType(Operation_Domain)
proto3.util.setEnumType(Operation_Domain, "auth.Operation.Domain", [
  { no: 0, name: "DOMAIN_UNSPECIFIED" },
  { no: 1, name: "DOMAIN_COLLECTION" },
  { no: 2, name: "DOMAIN_COLLECTION_MEMBERSHIP" },
  { no: 3, name: "DOMAIN_COLLECTION_PERMISSION" },
  { no: 4, name: "DOMAIN_COLLECTION_ROLES" },
  { no: 5, name: "DOMAIN_USER" },
  { no: 6, name: "DOMAIN_OBJECT" },
  { no: 7, name: "DOMAIN_OBJECT_FIELD" },
  { no: 100, name: "DOMAIN_TEST" },
]);

/**
 * @generated from enum auth.Operation.Action
 */
export enum Operation_Action {
  /**
   * Default
   *
   * @generated from enum value: ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * View
   *
   * @generated from enum value: ACTION_VIEW = 1;
   */
  VIEW = 1,

  /**
   * Create
   *
   * @generated from enum value: ACTION_CREATE = 2;
   */
  CREATE = 2,

  /**
   * Delete
   *
   * @generated from enum value: ACTION_DELETE = 3;
   */
  DELETE = 3,

  /**
   * Edit/Update
   *
   * @generated from enum value: ACTION_EDIT = 4;
   */
  EDIT = 4,

  /**
   * View the suggested update to the object
   *
   * @generated from enum value: ACTION_VIEW_SUGGEST = 5;
   */
  VIEW_SUGGEST = 5,

  /**
   * Suggest an update to the object
   *
   * @generated from enum value: ACTION_SUGGEST_EDIT = 6;
   */
  SUGGEST_EDIT = 6,

  /**
   * Approve the suggested update
   *
   * @generated from enum value: ACTION_SUGGEST_APPROVE = 7;
   */
  SUGGEST_APPROVE = 7,

  /**
   * Reject the suggested update
   *
   * @generated from enum value: ACTION_SUGGEST_REJECT = 8;
   */
  SUGGEST_REJECT = 8,

  /**
   * View the history of the object
   *
   * @generated from enum value: ACTION_VIEW_HISTORY = 9;
   */
  VIEW_HISTORY = 9,

  /**
   * view, hide, unhide
   *
   * @generated from enum value: ACTION_HIDDEN_TX = 10;
   */
  HIDDEN_TX = 10,

  /**
   * Test
   *
   * @generated from enum value: ACTION_TEST = 100;
   */
  TEST = 100,
}
// Retrieve enum metadata with: proto3.getEnumType(Operation_Action)
proto3.util.setEnumType(Operation_Action, "auth.Operation.Action", [
  { no: 0, name: "ACTION_UNSPECIFIED" },
  { no: 1, name: "ACTION_VIEW" },
  { no: 2, name: "ACTION_CREATE" },
  { no: 3, name: "ACTION_DELETE" },
  { no: 4, name: "ACTION_EDIT" },
  { no: 5, name: "ACTION_VIEW_SUGGEST" },
  { no: 6, name: "ACTION_SUGGEST_EDIT" },
  { no: 7, name: "ACTION_SUGGEST_APPROVE" },
  { no: 8, name: "ACTION_SUGGEST_REJECT" },
  { no: 9, name: "ACTION_VIEW_HISTORY" },
  { no: 10, name: "ACTION_HIDDEN_TX" },
  { no: 100, name: "ACTION_TEST" },
]);

/**
 * Types of Policies for the ACL
 *
 * @generated from message auth.Policy
 */
export class Policy extends Message<Policy> {
  /**
   * @generated from oneof auth.Policy.policy
   */
  policy: {
    /**
     * @generated from field: auth.Policy.Permissions roles = 1;
     */
    value: Policy_Permissions;
    case: "roles";
  } | {
    /**
     * @generated from field: auth.Policy.Permissions membership = 2;
     */
    value: Policy_Permissions;
    case: "membership";
  } | {
    /**
     * @generated from field: auth.Policy.Object object = 3;
     */
    value: Policy_Object;
    case: "object";
  } | {
    /**
     * @generated from field: auth.Policy.ObjectField object_field = 4;
     */
    value: Policy_ObjectField;
    case: "objectField";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Policy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Policy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "message", T: Policy_Permissions, oneof: "policy" },
    { no: 2, name: "membership", kind: "message", T: Policy_Permissions, oneof: "policy" },
    { no: 3, name: "object", kind: "message", T: Policy_Object, oneof: "policy" },
    { no: 4, name: "object_field", kind: "message", T: Policy_ObjectField, oneof: "policy" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Policy {
    return new Policy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Policy {
    return new Policy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Policy {
    return new Policy().fromJsonString(jsonString, options);
  }

  static equals(a: Policy | PlainMessage<Policy> | undefined, b: Policy | PlainMessage<Policy> | undefined): boolean {
    return proto3.util.equals(Policy, a, b);
  }
}

/**
 * Policy for altering the membership of a role or perms of a role
 *
 * @generated from message auth.Policy.Permissions
 */
export class Policy_Permissions extends Message<Policy_Permissions> {
  /**
   * @generated from field: bool view = 1;
   */
  view = false;

  /**
   * @generated from field: bool create = 2;
   */
  create = false;

  /**
   * @generated from field: bool edit = 3;
   */
  edit = false;

  /**
   * @generated from field: bool delete = 4;
   */
  delete = false;

  constructor(data?: PartialMessage<Policy_Permissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Policy.Permissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "view", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "delete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Policy_Permissions {
    return new Policy_Permissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Policy_Permissions {
    return new Policy_Permissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Policy_Permissions {
    return new Policy_Permissions().fromJsonString(jsonString, options);
  }

  static equals(a: Policy_Permissions | PlainMessage<Policy_Permissions> | undefined, b: Policy_Permissions | PlainMessage<Policy_Permissions> | undefined): boolean {
    return proto3.util.equals(Policy_Permissions, a, b);
  }
}

/**
 * Policy for altering the object
 *
 * @generated from message auth.Policy.Object
 */
export class Policy_Object extends Message<Policy_Object> {
  /**
   * @generated from field: bool view = 1;
   */
  view = false;

  /**
   * @generated from field: bool create = 2;
   */
  create = false;

  /**
   * @generated from field: bool delete = 3;
   */
  delete = false;

  /**
   * @generated from field: bool view_history = 4;
   */
  viewHistory = false;

  /**
   * @generated from field: bool hidden_tx = 5;
   */
  hiddenTx = false;

  constructor(data?: PartialMessage<Policy_Object>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Policy.Object";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "view", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "delete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "view_history", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "hidden_tx", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Policy_Object {
    return new Policy_Object().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Policy_Object {
    return new Policy_Object().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Policy_Object {
    return new Policy_Object().fromJsonString(jsonString, options);
  }

  static equals(a: Policy_Object | PlainMessage<Policy_Object> | undefined, b: Policy_Object | PlainMessage<Policy_Object> | undefined): boolean {
    return proto3.util.equals(Policy_Object, a, b);
  }
}

/**
 * Policy for altering the object
 *
 * @generated from message auth.Policy.ObjectField
 */
export class Policy_ObjectField extends Message<Policy_ObjectField> {
  /**
   * @generated from field: bool view = 1;
   */
  view = false;

  /**
   * @generated from field: bool edit = 2;
   */
  edit = false;

  /**
   * @generated from field: bool suggest_edit = 3;
   */
  suggestEdit = false;

  /**
   * @generated from field: bool suggest_approve = 4;
   */
  suggestApprove = false;

  /**
   * @generated from field: bool suggest_reject = 5;
   */
  suggestReject = false;

  constructor(data?: PartialMessage<Policy_ObjectField>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Policy.ObjectField";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "view", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "suggest_edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "suggest_approve", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "suggest_reject", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Policy_ObjectField {
    return new Policy_ObjectField().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Policy_ObjectField {
    return new Policy_ObjectField().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Policy_ObjectField {
    return new Policy_ObjectField().fromJsonString(jsonString, options);
  }

  static equals(a: Policy_ObjectField | PlainMessage<Policy_ObjectField> | undefined, b: Policy_ObjectField | PlainMessage<Policy_ObjectField> | undefined): boolean {
    return proto3.util.equals(Policy_ObjectField, a, b);
  }
}

/**
 * This message is the tree node for operations on the state object
 *
 * @generated from message auth.PathPermission
 */
export class PathPermission extends Message<PathPermission> {
  /**
   * The path is a sub path of a field mask
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: bool allow_sub_paths = 2;
   */
  allowSubPaths = false;

  /**
   * The key is a valid sub path in the type of state object
   *
   * @generated from field: map<string, auth.PathPermission> sub_paths = 3;
   */
  subPaths: { [key: string]: PathPermission } = {};

  /**
   * The Key must be a valid role id defined in the roles map
   *
   * @generated from field: auth.Policy.ObjectField policy = 4;
   */
  policy?: Policy_ObjectField;

  constructor(data?: PartialMessage<PathPermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.PathPermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "allow_sub_paths", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "sub_paths", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: PathPermission} },
    { no: 4, name: "policy", kind: "message", T: Policy_ObjectField },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PathPermission {
    return new PathPermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PathPermission {
    return new PathPermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PathPermission {
    return new PathPermission().fromJsonString(jsonString, options);
  }

  static equals(a: PathPermission | PlainMessage<PathPermission> | undefined, b: PathPermission | PlainMessage<PathPermission> | undefined): boolean {
    return proto3.util.equals(PathPermission, a, b);
  }
}

