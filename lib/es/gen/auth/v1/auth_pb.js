// @generated by protoc-gen-es v1.3.1
// @generated from file auth/v1/auth.proto (package auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, FieldMask, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum auth.TransactionType
 */
export const TransactionType = proto3.makeEnum(
  "auth.TransactionType",
  [
    {no: 0, name: "TRANSACTION_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TRANSACTION_TYPE_INVOKE", localName: "INVOKE"},
    {no: 2, name: "TRANSACTION_TYPE_QUERY", localName: "QUERY"},
  ],
);

/**
 * @generated from enum auth.ItemKind
 */
export const ItemKind = proto3.makeEnum(
  "auth.ItemKind",
  [
    {no: 0, name: "ITEM_KIND_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "ITEM_KIND_GLOBAL_ITEM", localName: "GLOBAL_ITEM"},
    {no: 2, name: "ITEM_KIND_PRIMARY_ITEM", localName: "PRIMARY_ITEM"},
    {no: 3, name: "ITEM_KIND_SUB_ITEM", localName: "SUB_ITEM"},
    {no: 4, name: "ITEM_KIND_REFERENCE", localName: "REFERENCE"},
  ],
);

/**
 * Action - The action to be performed during the operation
 *
 * # Action Groups
 *   - UNSPECIFIED: null or not set
 *   - REGISTER:    Used to register a new user or collection (always allowed)
 *   - COLLECTION:  Used to manage collections permissions
 *   - MEMBERSHIP:  Used to manage membership of a collection
 *   - ITEM:      Used to manage items in a collection
 *
 * @generated from enum auth.Action
 */
export const Action = proto3.makeEnum(
  "auth.Action",
  [
    {no: 0, name: "ACTION_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "ACTION_UTILITY", localName: "UTILITY"},
    {no: 10, name: "ACTION_VIEW", localName: "VIEW"},
    {no: 11, name: "ACTION_CREATE", localName: "CREATE"},
    {no: 12, name: "ACTION_UPDATE", localName: "UPDATE"},
    {no: 13, name: "ACTION_DELETE", localName: "DELETE"},
    {no: 14, name: "ACTION_SUGGEST_VIEW", localName: "SUGGEST_VIEW"},
    {no: 15, name: "ACTION_SUGGEST_CREATE", localName: "SUGGEST_CREATE"},
    {no: 16, name: "ACTION_SUGGEST_DELETE", localName: "SUGGEST_DELETE"},
    {no: 17, name: "ACTION_SUGGEST_APPROVE", localName: "SUGGEST_APPROVE"},
    {no: 18, name: "ACTION_VIEW_HISTORY", localName: "VIEW_HISTORY"},
    {no: 19, name: "ACTION_VIEW_HIDDEN_TXS", localName: "VIEW_HIDDEN_TXS"},
    {no: 20, name: "ACTION_HIDE_TX", localName: "HIDE_TX"},
    {no: 21, name: "ACTION_REFERENCE_CREATE", localName: "REFERENCE_CREATE"},
    {no: 22, name: "ACTION_REFERENCE_DELETE", localName: "REFERENCE_DELETE"},
    {no: 23, name: "ACTION_REFERENCE_VIEW", localName: "REFERENCE_VIEW"},
  ],
);

/**
 * @generated from enum auth.TxError
 */
export const TxError = proto3.makeEnum(
  "auth.TxError",
  [
    {no: 0, name: "UNSPECIFIED"},
    {no: 1, name: "REQUEST_INVALID"},
    {no: 2, name: "RUNTIME"},
    {no: 3, name: "RUNTIME_BAD_OPS"},
    {no: 4, name: "KEY_NOT_FOUND"},
    {no: 5, name: "KEY_ALREADY_EXISTS"},
    {no: 11, name: "COLLECTION_INVALID_ID"},
    {no: 12, name: "COLLECTION_UNREGISTERED"},
    {no: 13, name: "COLLECTION_ALREADY_REGISTERED"},
    {no: 14, name: "COLLECTION_INVALID"},
    {no: 15, name: "COLLECTION_INVALID_ITEM_TYPE"},
    {no: 16, name: "COLLECTION_INVALID_ROLE_ID"},
    {no: 20, name: "USER_INVALID_ID"},
    {no: 21, name: "USER_UNREGISTERED"},
    {no: 22, name: "USER_ALREADY_REGISTERED"},
    {no: 23, name: "USER_INVALID"},
    {no: 24, name: "USER_NO_ROLE"},
    {no: 26, name: "USER_PERMISSION_DENIED"},
    {no: 31, name: "ITEM_INVALID_ID"},
    {no: 32, name: "ITEM_UNREGISTERED"},
    {no: 33, name: "ITEM_ALREADY_REGISTERED"},
    {no: 34, name: "ITEM_INVALID"},
    {no: 35, name: "INVALID_ITEM_FIELD_PATH"},
    {no: 36, name: "INVALID_ITEM_FIELD_VALUE"},
  ],
);

/**
 * @generated from message auth.KeySchema
 */
export const KeySchema = proto3.makeMessageType(
  "auth.KeySchema",
  () => [
    { no: 1, name: "item_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "item_kind", kind: "enum", T: proto3.getEnumType(ItemKind) },
    { no: 3, name: "keys", kind: "message", T: FieldMask },
  ],
);

/**
 * Can be used as the history entry
 *
 * @generated from message auth.StateActivity
 */
export const StateActivity = proto3.makeMessageType(
  "auth.StateActivity",
  () => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "message", T: Timestamp },
    { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message auth.HistoryEntry
 */
export const HistoryEntry = proto3.makeMessageType(
  "auth.HistoryEntry",
  () => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_delete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "is_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "timestamp", kind: "message", T: Timestamp },
    { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "value", kind: "message", T: Any },
  ],
);

/**
 * @generated from message auth.History
 */
export const History = proto3.makeMessageType(
  "auth.History",
  () => [
    { no: 1, name: "entries", kind: "message", T: HistoryEntry, repeated: true },
    { no: 2, name: "hidden_txs", kind: "message", T: HiddenTxList },
  ],
);

/**
 * @generated from message auth.Operation
 */
export const Operation = proto3.makeMessageType(
  "auth.Operation",
  () => [
    { no: 1, name: "action", kind: "enum", T: proto3.getEnumType(Action) },
    { no: 2, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "item_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "secondary_item_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "paths", kind: "message", T: FieldMask },
  ],
);

/**
 * This message is the tree node for operations on the state item
 *
 * @generated from message auth.PathPolicy
 */
export const PathPolicy = proto3.makeMessageType(
  "auth.PathPolicy",
  () => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "full_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "allow_sub_paths", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "sub_paths", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: PathPolicy} },
    { no: 5, name: "actions", kind: "enum", T: proto3.getEnumType(Action), repeated: true },
  ],
);

/**
 * Access Control Entry for use in Hash Tree
 *
 * ItemPolicy root                 = 1 [(buf.validate.field).required = true];
 *
 * @generated from message auth.ACEntry
 */
export const ACEntry = proto3.makeMessageType(
  "auth.ACEntry",
  () => [
    { no: 1, name: "children", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: PathPolicy} },
  ],
);

/**
 * @generated from message auth.Item
 */
export const Item = proto3.makeMessageType(
  "auth.Item",
  () => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "value", kind: "message", T: Any },
  ],
);

/**
 * @generated from message auth.FullItem
 */
export const FullItem = proto3.makeMessageType(
  "auth.FullItem",
  () => [
    { no: 1, name: "key", kind: "message", T: ItemKey },
    { no: 2, name: "value", kind: "message", T: Any },
    { no: 3, name: "history", kind: "message", T: History },
    { no: 4, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
    { no: 5, name: "references", kind: "message", T: Reference, repeated: true },
  ],
);

/**
 * Keys
 * ─────────────────────────────────────────────────────────────────────────────────────
 * Item Keys
 * When converted to its string form it will be:
 * - Key := {ITEM_TYPE}{COLLECTION_ID}{...ITEM_ID}
 *
 * Reference Keys
 * Used to store references to items for case like a user having a role
 * When converted to its string form it will be:
 * {Ref}{REFERENCE_TYPE}{COLLECTION_ID}[{ITEM1_TYPE}{...ITEM1_ID}][{ITEM2_TYPE}{...ITEM2_ID}]
 *
 *
 * SubKeys
 * When converted to its string form it will be:
 * {SUB_ITEM_TYPE}{COLLECTION_ID}{ITEM_TYPE}{...ITEM_ID}{SUB_ITEM_ID}
 * Examples
 * - Suggestion := {auth.Suggestion}  {COLLECTION_ID}{ITEM_TYPE}{...ITEM_ID}{SUGGESTION_ID}
 * - HiddenTxList := {auth.HiddenTxList}{COLLECTION_ID}{ITEM_TYPE} {...ITEM_ID}
 *
 * @generated from message auth.ItemKey
 */
export const ItemKey = proto3.makeMessageType(
  "auth.ItemKey",
  () => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "item_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "item_id_parts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Reference Keys
 * {auth.Reference}{REFERENCE_TYPE}{COLLECTION_ID}[{ITEM1_TYPE}{...ITEM1_ID}][{ITEM2_TYPE}{...ITEM2_ID}]
 *
 * @generated from message auth.ReferenceKey
 */
export const ReferenceKey = proto3.makeMessageType(
  "auth.ReferenceKey",
  () => [
    { no: 1, name: "key1", kind: "message", T: ItemKey },
    { no: 2, name: "key2", kind: "message", T: ItemKey },
  ],
);

/**
 * Used to return the values of the items that are referenced
 *
 * @generated from message auth.Reference
 */
export const Reference = proto3.makeMessageType(
  "auth.Reference",
  () => [
    { no: 1, name: "reference", kind: "message", T: ReferenceKey },
    { no: 2, name: "item1", kind: "message", T: Item },
    { no: 3, name: "item2", kind: "message", T: Item },
  ],
);

/**
 * Collection
 * ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
 * Note that the types of items are stored in the default ACEntry
 *
 * key := {COLLECTION}{COLLECTION_ID}
 *
 * @generated from message auth.Collection
 */
export const Collection = proto3.makeMessageType(
  "auth.Collection",
  () => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "item_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "reference_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "default", kind: "message", T: ACEntry },
  ],
);

/**
 * User
 * ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
 *
 * key := {USER}{USER_ID.msp_id}{USER_ID.id}
 *
 *
 * @generated from message auth.User
 */
export const User = proto3.makeMessageType(
  "auth.User",
  () => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Key should be
 * {auth.Suggestion}{COLLECTION_ID}{ITEM_TYPE}{...ITEM_ID}{SUGGESTION_ID}
 *
 * @generated from message auth.Suggestion
 */
export const Suggestion = proto3.makeMessageType(
  "auth.Suggestion",
  () => [
    { no: 1, name: "primary_key", kind: "message", T: ItemKey },
    { no: 2, name: "suggestion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "paths", kind: "message", T: FieldMask },
    { no: 6, name: "value", kind: "message", T: Any },
  ],
);

/**
 * @generated from message auth.HiddenTx
 */
export const HiddenTx = proto3.makeMessageType(
  "auth.HiddenTx",
  () => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "message", T: Timestamp },
    { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Key should be {COLLECTION_ID}{auth.HiddenTxList}{ITEM_TYPE}{...ITEM_ID}
 *
 * @generated from message auth.HiddenTxList
 */
export const HiddenTxList = proto3.makeMessageType(
  "auth.HiddenTxList",
  () => [
    { no: 1, name: "primary_key", kind: "message", T: ItemKey },
    { no: 4, name: "txs", kind: "message", T: HiddenTx, repeated: true },
  ],
);

/**
 * @generated from message auth.Role
 */
export const Role = proto3.makeMessageType(
  "auth.Role",
  () => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ac", kind: "message", T: ACEntry },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "parent_role_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * An attribute is used to define permissions via the value of the attribute in the
 * users certificate for a given msp
 *
 * @generated from message auth.Attribute
 */
export const Attribute = proto3.makeMessageType(
  "auth.Attribute",
  () => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "oid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ac", kind: "message", T: ACEntry },
  ],
);

/**
 * Membership is used to store permissions for a user in a collection
 *
 * @generated from message auth.Membership
 */
export const Membership = proto3.makeMessageType(
  "auth.Membership",
  () => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ac", kind: "message", T: ACEntry },
  ],
);

