// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file auth/v1/auth.proto (package auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, FieldMask, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum auth.TransactionType
 */
export enum TransactionType {
  /**
   * @generated from enum value: TRANSACTION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TRANSACTION_TYPE_INVOKE = 1;
   */
  INVOKE = 1,

  /**
   * @generated from enum value: TRANSACTION_TYPE_QUERY = 2;
   */
  QUERY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TransactionType)
proto3.util.setEnumType(TransactionType, "auth.TransactionType", [
  { no: 0, name: "TRANSACTION_TYPE_UNSPECIFIED" },
  { no: 1, name: "TRANSACTION_TYPE_INVOKE" },
  { no: 2, name: "TRANSACTION_TYPE_QUERY" },
]);

/**
 * @generated from enum auth.ObjectDomain
 */
export enum ObjectDomain {
  /**
   * @generated from enum value: OBJECT_DOMAIN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OBJECT_DOMAIN_STATE_OBJECT = 1;
   */
  STATE_OBJECT = 1,

  /**
   * @generated from enum value: OBJECT_DOMAIN_STATE_INDEX = 2;
   */
  STATE_INDEX = 2,

  /**
   * @generated from enum value: OBJECT_DOMAIN_COLLECTION_OBJECT = 3;
   */
  COLLECTION_OBJECT = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ObjectDomain)
proto3.util.setEnumType(ObjectDomain, "auth.ObjectDomain", [
  { no: 0, name: "OBJECT_DOMAIN_UNSPECIFIED" },
  { no: 1, name: "OBJECT_DOMAIN_STATE_OBJECT" },
  { no: 2, name: "OBJECT_DOMAIN_STATE_INDEX" },
  { no: 3, name: "OBJECT_DOMAIN_COLLECTION_OBJECT" },
]);

/**
 * Action - The action to be performed during the operation
 *
 * # Action Groups
 *   - UNSPECIFIED: null or not set
 *   - REGISTER:    Used to register a new user or collection (always allowed)
 *   - COLLECTION:  Used to manage collections permissions
 *   - MEMBERSHIP:  Used to manage membership of a collection
 *   - OBJECT:      Used to manage objects in a collection 
 *
 * @generated from enum auth.Action
 */
export enum Action {
  /**
   * @generated from enum value: ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Used to register  
   *
   * @generated from enum value: ACTION_REGISTER_USER = 1;
   */
  REGISTER_USER = 1,

  /**
   * Used to register
   *
   * @generated from enum value: ACTION_REGISTER_COLLECTION = 2;
   */
  REGISTER_COLLECTION = 2,

  /**
   * Used to modify the default permissions of a collection
   *
   * @generated from enum value: ACTION_MODIFY_DEFAULT_PERMISSIONS = 3;
   */
  MODIFY_DEFAULT_PERMISSIONS = 3,

  /**
   * @generated from enum value: ACTION_OBJECT_VIEW = 10;
   */
  OBJECT_VIEW = 10,

  /**
   * @generated from enum value: ACTION_OBJECT_CREATE = 11;
   */
  OBJECT_CREATE = 11,

  /**
   * @generated from enum value: ACTION_OBJECT_EDIT = 12;
   */
  OBJECT_EDIT = 12,

  /**
   * @generated from enum value: ACTION_OBJECT_DELETE = 13;
   */
  OBJECT_DELETE = 13,

  /**
   * @generated from enum value: ACTION_OBJECT_SUGGEST_VIEW = 14;
   */
  OBJECT_SUGGEST_VIEW = 14,

  /**
   * @generated from enum value: ACTION_OBJECT_SUGGEST_CREATE = 15;
   */
  OBJECT_SUGGEST_CREATE = 15,

  /**
   * @generated from enum value: ACTION_OBJECT_SUGGEST_DELETE = 16;
   */
  OBJECT_SUGGEST_DELETE = 16,

  /**
   * @generated from enum value: ACTION_OBJECT_SUGGEST_APPROVE = 17;
   */
  OBJECT_SUGGEST_APPROVE = 17,

  /**
   * @generated from enum value: ACTION_OBJECT_VIEW_HISTORY = 18;
   */
  OBJECT_VIEW_HISTORY = 18,

  /**
   * @generated from enum value: ACTION_OBJECT_HIDE_HISTORY = 19;
   */
  OBJECT_HIDE_HISTORY = 19,
}
// Retrieve enum metadata with: proto3.getEnumType(Action)
proto3.util.setEnumType(Action, "auth.Action", [
  { no: 0, name: "ACTION_UNSPECIFIED" },
  { no: 1, name: "ACTION_REGISTER_USER" },
  { no: 2, name: "ACTION_REGISTER_COLLECTION" },
  { no: 3, name: "ACTION_MODIFY_DEFAULT_PERMISSIONS" },
  { no: 10, name: "ACTION_OBJECT_VIEW" },
  { no: 11, name: "ACTION_OBJECT_CREATE" },
  { no: 12, name: "ACTION_OBJECT_EDIT" },
  { no: 13, name: "ACTION_OBJECT_DELETE" },
  { no: 14, name: "ACTION_OBJECT_SUGGEST_VIEW" },
  { no: 15, name: "ACTION_OBJECT_SUGGEST_CREATE" },
  { no: 16, name: "ACTION_OBJECT_SUGGEST_DELETE" },
  { no: 17, name: "ACTION_OBJECT_SUGGEST_APPROVE" },
  { no: 18, name: "ACTION_OBJECT_VIEW_HISTORY" },
  { no: 19, name: "ACTION_OBJECT_HIDE_HISTORY" },
]);

/**
 * @generated from enum auth.TxError
 */
export enum TxError {
  /**
   * @generated from enum value: TX_ERROR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TX_ERROR_REQUEST_INVALID = 1;
   */
  REQUEST_INVALID = 1,

  /**
   * @generated from enum value: TX_ERROR_RUNTIME = 2;
   */
  RUNTIME = 2,

  /**
   * @generated from enum value: TX_ERROR_RUNTIME_BAD_OPS = 3;
   */
  RUNTIME_BAD_OPS = 3,

  /**
   * The collection id is invalid
   *
   * @generated from enum value: TX_ERROR_COLLECTION_INVALID_ID = 11;
   */
  COLLECTION_INVALID_ID = 11,

  /**
   * The collection is not registered
   *
   * @generated from enum value: TX_ERROR_COLLECTION_UNREGISTERED = 12;
   */
  COLLECTION_UNREGISTERED = 12,

  /**
   * The collection is already registered
   *
   * @generated from enum value: TX_ERROR_COLLECTION_ALREADY_REGISTERED = 13;
   */
  COLLECTION_ALREADY_REGISTERED = 13,

  /**
   * The Collection is invalid
   *
   * @generated from enum value: TX_ERROR_COLLECTION_INVALID = 14;
   */
  COLLECTION_INVALID = 14,

  /**
   * The object type name is invalid
   *
   * @generated from enum value: TX_ERROR_COLLECTION_INVALID_OBJECT_TYPE = 15;
   */
  COLLECTION_INVALID_OBJECT_TYPE = 15,

  /**
   * The role id is invalid
   *
   * @generated from enum value: TX_ERROR_COLLECTION_INVALID_ROLE_ID = 16;
   */
  COLLECTION_INVALID_ROLE_ID = 16,

  /**
   * The user does not have permission to perform the operation
   *
   * @generated from enum value: TX_ERROR_USER_INVALID_ID = 20;
   */
  USER_INVALID_ID = 20,

  /**
   * The user is not registered
   *
   * @generated from enum value: TX_ERROR_USER_UNREGISTERED = 21;
   */
  USER_UNREGISTERED = 21,

  /**
   * The user is already registered
   *
   * @generated from enum value: TX_ERROR_USER_ALREADY_REGISTERED = 22;
   */
  USER_ALREADY_REGISTERED = 22,

  /**
   * The user is invalid
   *
   * @generated from enum value: TX_ERROR_USER_INVALID = 23;
   */
  USER_INVALID = 23,

  /**
   * The user does not have a role in the collection
   *
   * @generated from enum value: TX_ERROR_USER_NO_ROLE = 24;
   */
  USER_NO_ROLE = 24,

  /**
   * The user has a deleted role in the collection
   *
   * @generated from enum value: TX_ERROR_USER_DELETED_ROLE = 25;
   */
  USER_DELETED_ROLE = 25,

  /**
   * The user does not have permission to perform the operation
   *
   * @generated from enum value: TX_ERROR_USER_PERMISSION_DENIED = 26;
   */
  USER_PERMISSION_DENIED = 26,

  /**
   * The object id is invalid
   *
   * @generated from enum value: TX_ERROR_OBJECT_INVALID_ID = 31;
   */
  OBJECT_INVALID_ID = 31,

  /**
   * The object is not registered
   *
   * @generated from enum value: TX_ERROR_OBJECT_UNREGISTERED = 32;
   */
  OBJECT_UNREGISTERED = 32,

  /**
   * The object is already registered
   *
   * @generated from enum value: TX_ERROR_OBJECT_ALREADY_REGISTERED = 33;
   */
  OBJECT_ALREADY_REGISTERED = 33,

  /**
   * The object is invalid
   *
   * @generated from enum value: TX_ERROR_OBJECT_INVALID = 34;
   */
  OBJECT_INVALID = 34,

  /**
   * @generated from enum value: TX_ERROR_INVALID_OBJECT_FIELD_PATH = 35;
   */
  INVALID_OBJECT_FIELD_PATH = 35,

  /**
   * @generated from enum value: TX_ERROR_INVALID_OBJECT_FIELD_VALUE = 36;
   */
  INVALID_OBJECT_FIELD_VALUE = 36,
}
// Retrieve enum metadata with: proto3.getEnumType(TxError)
proto3.util.setEnumType(TxError, "auth.TxError", [
  { no: 0, name: "TX_ERROR_UNSPECIFIED" },
  { no: 1, name: "TX_ERROR_REQUEST_INVALID" },
  { no: 2, name: "TX_ERROR_RUNTIME" },
  { no: 3, name: "TX_ERROR_RUNTIME_BAD_OPS" },
  { no: 11, name: "TX_ERROR_COLLECTION_INVALID_ID" },
  { no: 12, name: "TX_ERROR_COLLECTION_UNREGISTERED" },
  { no: 13, name: "TX_ERROR_COLLECTION_ALREADY_REGISTERED" },
  { no: 14, name: "TX_ERROR_COLLECTION_INVALID" },
  { no: 15, name: "TX_ERROR_COLLECTION_INVALID_OBJECT_TYPE" },
  { no: 16, name: "TX_ERROR_COLLECTION_INVALID_ROLE_ID" },
  { no: 20, name: "TX_ERROR_USER_INVALID_ID" },
  { no: 21, name: "TX_ERROR_USER_UNREGISTERED" },
  { no: 22, name: "TX_ERROR_USER_ALREADY_REGISTERED" },
  { no: 23, name: "TX_ERROR_USER_INVALID" },
  { no: 24, name: "TX_ERROR_USER_NO_ROLE" },
  { no: 25, name: "TX_ERROR_USER_DELETED_ROLE" },
  { no: 26, name: "TX_ERROR_USER_PERMISSION_DENIED" },
  { no: 31, name: "TX_ERROR_OBJECT_INVALID_ID" },
  { no: 32, name: "TX_ERROR_OBJECT_UNREGISTERED" },
  { no: 33, name: "TX_ERROR_OBJECT_ALREADY_REGISTERED" },
  { no: 34, name: "TX_ERROR_OBJECT_INVALID" },
  { no: 35, name: "TX_ERROR_INVALID_OBJECT_FIELD_PATH" },
  { no: 36, name: "TX_ERROR_INVALID_OBJECT_FIELD_VALUE" },
]);

/**
 * @generated from message auth.KeySchema
 */
export class KeySchema extends Message<KeySchema> {
  /**
   * @generated from field: google.protobuf.FieldMask prefix_paths = 1;
   */
  prefixPaths?: FieldMask;

  /**
   * @generated from field: google.protobuf.FieldMask key_paths = 2;
   */
  keyPaths?: FieldMask;

  /**
   * @generated from field: google.protobuf.FieldMask suffix_paths = 3;
   */
  suffixPaths?: FieldMask;

  /**
   * The value for the real key is stored in a sub message
   *
   * @generated from field: google.protobuf.FieldMask sub_messages = 4;
   */
  subMessages?: FieldMask;

  constructor(data?: PartialMessage<KeySchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.KeySchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix_paths", kind: "message", T: FieldMask },
    { no: 2, name: "key_paths", kind: "message", T: FieldMask },
    { no: 3, name: "suffix_paths", kind: "message", T: FieldMask },
    { no: 4, name: "sub_messages", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeySchema {
    return new KeySchema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeySchema {
    return new KeySchema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeySchema {
    return new KeySchema().fromJsonString(jsonString, options);
  }

  static equals(a: KeySchema | PlainMessage<KeySchema> | undefined, b: KeySchema | PlainMessage<KeySchema> | undefined): boolean {
    return proto3.util.equals(KeySchema, a, b);
  }
}

/**
 * Will create two keys so that it can be looked up either way 
 *
 * @generated from message auth.Index
 */
export class Index extends Message<Index> {
  /**
   * @generated from field: repeated string key1 = 1;
   */
  key1: string[] = [];

  /**
   * @generated from field: repeated string key2 = 2;
   */
  key2: string[] = [];

  constructor(data?: PartialMessage<Index>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Index";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key1", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "key2", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Index {
    return new Index().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Index {
    return new Index().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Index {
    return new Index().fromJsonString(jsonString, options);
  }

  static equals(a: Index | PlainMessage<Index> | undefined, b: Index | PlainMessage<Index> | undefined): boolean {
    return proto3.util.equals(Index, a, b);
  }
}

/**
 * @generated from message auth.StateActivity
 */
export class Activity extends Message<Activity> {
  /**
   * @generated from field: string tx_id = 1;
   */
  txId = "";

  /**
   * @generated from field: auth.User.Id user_id = 2;
   */
  userId?: User_Id;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: string note = 4;
   */
  note = "";

  /**
   * @generated from field: google.protobuf.Any state = 5;
   */
  state?: Any;

  /**
   * When it is a History Entry it can contain if the entry is deleted or hidden
   *
   * @generated from field: map<string, bool> metadata = 6;
   */
  metadata: { [key: string]: boolean } = {};

  constructor(data?: PartialMessage<Activity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.StateActivity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "message", T: User_Id },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
    { no: 4, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "state", kind: "message", T: Any },
    { no: 6, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Activity {
    return new Activity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Activity {
    return new Activity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Activity {
    return new Activity().fromJsonString(jsonString, options);
  }

  static equals(a: Activity | PlainMessage<Activity> | undefined, b: Activity | PlainMessage<Activity> | undefined): boolean {
    return proto3.util.equals(Activity, a, b);
  }
}

/**
 * @generated from message auth.Operation
 */
export class Operation extends Message<Operation> {
  /**
   * @generated from field: auth.Action action = 1;
   */
  action = Action.UNSPECIFIED;

  /**
   * @generated from field: string ObjectTypeName = 2;
   */
  ObjectTypeName = "";

  /**
   * @generated from field: google.protobuf.FieldMask paths = 3;
   */
  paths?: FieldMask;

  constructor(data?: PartialMessage<Operation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Operation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "enum", T: proto3.getEnumType(Action) },
    { no: 2, name: "ObjectTypeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "paths", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation {
    return new Operation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJsonString(jsonString, options);
  }

  static equals(a: Operation | PlainMessage<Operation> | undefined, b: Operation | PlainMessage<Operation> | undefined): boolean {
    return proto3.util.equals(Operation, a, b);
  }
}

/**
 * @generated from message auth.PathPolicy
 */
export class PathPolicy extends Message<PathPolicy> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: repeated auth.Action actions = 2;
   */
  actions: Action[] = [];

  constructor(data?: PartialMessage<PathPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.PathPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "actions", kind: "enum", T: proto3.getEnumType(Action), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PathPolicy {
    return new PathPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PathPolicy {
    return new PathPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PathPolicy {
    return new PathPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: PathPolicy | PlainMessage<PathPolicy> | undefined, b: PathPolicy | PlainMessage<PathPolicy> | undefined): boolean {
    return proto3.util.equals(PathPolicy, a, b);
  }
}

/**
 * @generated from message auth.ObjectPolicy
 */
export class ObjectPolicy extends Message<ObjectPolicy> {
  /**
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * @generated from field: string object_namespace = 2;
   */
  objectNamespace = "";

  /**
   * @generated from field: repeated auth.PathPolicy policies = 3;
   */
  policies: PathPolicy[] = [];

  constructor(data?: PartialMessage<ObjectPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ObjectPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "policies", kind: "message", T: PathPolicy, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectPolicy {
    return new ObjectPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectPolicy {
    return new ObjectPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectPolicy {
    return new ObjectPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectPolicy | PlainMessage<ObjectPolicy> | undefined, b: ObjectPolicy | PlainMessage<ObjectPolicy> | undefined): boolean {
    return proto3.util.equals(ObjectPolicy, a, b);
  }
}

/**
 * @generated from message auth.ACEntry
 */
export class ACEntry extends Message<ACEntry> {
  /**
   * @generated from field: repeated auth.Action actions = 1;
   */
  actions: Action[] = [];

  /**
   * @generated from field: repeated auth.ObjectPolicy object = 4;
   */
  object: ObjectPolicy[] = [];

  /**
   * @generated from field: google.protobuf.FieldMask view_mask = 6;
   */
  viewMask?: FieldMask;

  constructor(data?: PartialMessage<ACEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ACEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actions", kind: "enum", T: proto3.getEnumType(Action), repeated: true },
    { no: 4, name: "object", kind: "message", T: ObjectPolicy, repeated: true },
    { no: 6, name: "view_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ACEntry {
    return new ACEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ACEntry {
    return new ACEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ACEntry {
    return new ACEntry().fromJsonString(jsonString, options);
  }

  static equals(a: ACEntry | PlainMessage<ACEntry> | undefined, b: ACEntry | PlainMessage<ACEntry> | undefined): boolean {
    return proto3.util.equals(ACEntry, a, b);
  }
}

/**
 * Note that the types of objects are stored in the default ACEntry
 *
 * @generated from message auth.Collection
 */
export class Collection extends Message<Collection> {
  /**
   * The key for the ledger
   *
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: auth.ACEntry default = 4;
   */
  default?: ACEntry;

  constructor(data?: PartialMessage<Collection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Collection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "default", kind: "message", T: ACEntry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection {
    return new Collection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection {
    return new Collection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection {
    return new Collection().fromJsonString(jsonString, options);
  }

  static equals(a: Collection | PlainMessage<Collection> | undefined, b: Collection | PlainMessage<Collection> | undefined): boolean {
    return proto3.util.equals(Collection, a, b);
  }
}

/**
 * @generated from message auth.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: auth.User.Id id = 1;
   */
  id?: User_Id;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Indexed to the Roles domain
   *
   * @generated from field: repeated auth.Membership memberships = 3;
   */
  memberships: Membership[] = [];

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: User_Id },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memberships", kind: "message", T: Membership, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message auth.User.Id
 */
export class User_Id extends Message<User_Id> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<User_Id>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.User.Id";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User_Id {
    return new User_Id().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User_Id {
    return new User_Id().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User_Id {
    return new User_Id().fromJsonString(jsonString, options);
  }

  static equals(a: User_Id | PlainMessage<User_Id> | undefined, b: User_Id | PlainMessage<User_Id> | undefined): boolean {
    return proto3.util.equals(User_Id, a, b);
  }
}

/**
 * @generated from message auth.ObjectMetadata
 */
export class ObjectMetadata extends Message<ObjectMetadata> {
  /**
   * @generated from field: repeated auth.StateActivity hidden_txs = 2;
   */
  hiddenTxs: Activity[] = [];

  /**
   * @generated from field: auth.StateActivity last_activity = 3;
   */
  lastActivity?: Activity;

  constructor(data?: PartialMessage<ObjectMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ObjectMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "hidden_txs", kind: "message", T: Activity, repeated: true },
    { no: 3, name: "last_activity", kind: "message", T: Activity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectMetadata {
    return new ObjectMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectMetadata {
    return new ObjectMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectMetadata {
    return new ObjectMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectMetadata | PlainMessage<ObjectMetadata> | undefined, b: ObjectMetadata | PlainMessage<ObjectMetadata> | undefined): boolean {
    return proto3.util.equals(ObjectMetadata, a, b);
  }
}

/**
 * @generated from message auth.Suggestions
 */
export class Suggestions extends Message<Suggestions> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: google.protobuf.FieldMask paths = 2;
   */
  paths?: FieldMask;

  /**
   * @generated from field: google.protobuf.Any value = 4;
   */
  value?: Any;

  constructor(data?: PartialMessage<Suggestions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Suggestions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "paths", kind: "message", T: FieldMask },
    { no: 4, name: "value", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Suggestions {
    return new Suggestions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Suggestions {
    return new Suggestions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Suggestions {
    return new Suggestions().fromJsonString(jsonString, options);
  }

  static equals(a: Suggestions | PlainMessage<Suggestions> | undefined, b: Suggestions | PlainMessage<Suggestions> | undefined): boolean {
    return proto3.util.equals(Suggestions, a, b);
  }
}

/**
 * Used for setting Role Permissions
 *
 * @generated from message auth.Role
 */
export class Role extends Message<Role> {
  /**
   * @generated from field: auth.Role.Id role_id = 1;
   */
  roleId?: Role_Id;

  /**
   * @generated from field: auth.ObjectMetadata metadata = 2;
   */
  metadata?: ObjectMetadata;

  /**
   * @generated from field: auth.ACEntry ac = 3;
   */
  ac?: ACEntry;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: repeated auth.Role.Id parents = 6;
   */
  parents: Role_Id[] = [];

  constructor(data?: PartialMessage<Role>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Role";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role_id", kind: "message", T: Role_Id },
    { no: 2, name: "metadata", kind: "message", T: ObjectMetadata },
    { no: 3, name: "ac", kind: "message", T: ACEntry },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "parents", kind: "message", T: Role_Id, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role {
    return new Role().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJsonString(jsonString, options);
  }

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean {
    return proto3.util.equals(Role, a, b);
  }
}

/**
 * @generated from message auth.Role.Id
 */
export class Role_Id extends Message<Role_Id> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<Role_Id>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Role.Id";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role_Id {
    return new Role_Id().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role_Id {
    return new Role_Id().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role_Id {
    return new Role_Id().fromJsonString(jsonString, options);
  }

  static equals(a: Role_Id | PlainMessage<Role_Id> | undefined, b: Role_Id | PlainMessage<Role_Id> | undefined): boolean {
    return proto3.util.equals(Role_Id, a, b);
  }
}

/**
 * Used for Assigning Roles to Users
 *
 * @generated from message auth.Membership
 */
export class Membership extends Message<Membership> {
  /**
   * @generated from field: auth.Role.Id role_id = 1;
   */
  roleId?: Role_Id;

  /**
   * @generated from field: auth.User.Id user_id = 2;
   */
  userId?: User_Id;

  /**
   * For use in Collections Without Roles; role.ID must be an empty string
   *
   * @generated from field: auth.ACEntry fallback_ac = 3;
   */
  fallbackAc?: ACEntry;

  constructor(data?: PartialMessage<Membership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Membership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role_id", kind: "message", T: Role_Id },
    { no: 2, name: "user_id", kind: "message", T: User_Id },
    { no: 3, name: "fallback_ac", kind: "message", T: ACEntry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Membership {
    return new Membership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Membership {
    return new Membership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Membership {
    return new Membership().fromJsonString(jsonString, options);
  }

  static equals(a: Membership | PlainMessage<Membership> | undefined, b: Membership | PlainMessage<Membership> | undefined): boolean {
    return proto3.util.equals(Membership, a, b);
  }
}

