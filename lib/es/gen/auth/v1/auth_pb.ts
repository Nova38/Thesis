// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file auth/v1/auth.proto (package auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, FieldMask, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum auth.TransactionType
 */
export enum TransactionType {
  /**
   * @generated from enum value: TRANSACTION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TRANSACTION_TYPE_INVOKE = 1;
   */
  INVOKE = 1,

  /**
   * @generated from enum value: TRANSACTION_TYPE_QUERY = 2;
   */
  QUERY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TransactionType)
proto3.util.setEnumType(TransactionType, "auth.TransactionType", [
  { no: 0, name: "TRANSACTION_TYPE_UNSPECIFIED" },
  { no: 1, name: "TRANSACTION_TYPE_INVOKE" },
  { no: 2, name: "TRANSACTION_TYPE_QUERY" },
]);

/**
 * @generated from enum auth.ObjectKind
 */
export enum ObjectKind {
  /**
   * @generated from enum value: OBJECT_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OBJECT_KIND_GLOBAL_OBJECT = 1;
   */
  GLOBAL_OBJECT = 1,

  /**
   * Object's key := {COLLECTION_ID}{TYPE}[...key_paths]
   *
   * @generated from enum value: OBJECT_KIND_PRIMARY_OBJECT = 2;
   */
  PRIMARY_OBJECT = 2,

  /**
   * Object's key := {COLLECTION_ID}{TYPE}<PrimaryKey>{...key_paths}
   *
   * @generated from enum value: OBJECT_KIND_SUB_OBJECT = 3;
   */
  SUB_OBJECT = 3,

  /**
   * @generated from enum value: OBJECT_KIND_REFERENCE = 4;
   */
  REFERENCE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(ObjectKind)
proto3.util.setEnumType(ObjectKind, "auth.ObjectKind", [
  { no: 0, name: "OBJECT_KIND_UNSPECIFIED" },
  { no: 1, name: "OBJECT_KIND_GLOBAL_OBJECT" },
  { no: 2, name: "OBJECT_KIND_PRIMARY_OBJECT" },
  { no: 3, name: "OBJECT_KIND_SUB_OBJECT" },
  { no: 4, name: "OBJECT_KIND_REFERENCE" },
]);

/**
 * Action - The action to be performed during the operation
 *
 * # Action Groups
 *   - UNSPECIFIED: null or not set
 *   - REGISTER:    Used to register a new user or collection (always allowed)
 *   - COLLECTION:  Used to manage collections permissions
 *   - MEMBERSHIP:  Used to manage membership of a collection
 *   - OBJECT:      Used to manage objects in a collection
 *
 * @generated from enum auth.Action
 */
export enum Action {
  /**
   * @generated from enum value: ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACTION_UTILITY = 1;
   */
  UTILITY = 1,

  /**
   * View the contents of an object
   *
   * @generated from enum value: ACTION_VIEW = 10;
   */
  VIEW = 10,

  /**
   * Create a new object
   *  - key must not already exist
   *
   * @generated from enum value: ACTION_CREATE = 11;
   */
  CREATE = 11,

  /**
   * Update an existing object
   *   - key must already exist
   *
   * @generated from enum value: ACTION_UPDATE = 12;
   */
  UPDATE = 12,

  /**
   * Delete an existing object, key must already exist
   *
   * @generated from enum value: ACTION_DELETE = 13;
   */
  DELETE = 13,

  /**
   * Suggest a change to an object, key must already exist
   *
   * @generated from enum value: ACTION_SUGGEST_VIEW = 14;
   */
  SUGGEST_VIEW = 14,

  /**
   * Suggest a change to an object, key must already exist
   *
   * @generated from enum value: ACTION_SUGGEST_CREATE = 15;
   */
  SUGGEST_CREATE = 15,

  /**
   * Delete a suggestion, key must already exist
   *
   * @generated from enum value: ACTION_SUGGEST_DELETE = 16;
   */
  SUGGEST_DELETE = 16,

  /**
   * Approve a suggestion and apply it to the object, key must already exist
   *
   * @generated from enum value: ACTION_SUGGEST_APPROVE = 17;
   */
  SUGGEST_APPROVE = 17,

  /**
   * @generated from enum value: ACTION_VIEW_HISTORY = 18;
   */
  VIEW_HISTORY = 18,

  /**
   * @generated from enum value: ACTION_VIEW_HIDDEN_TXS = 19;
   */
  VIEW_HIDDEN_TXS = 19,

  /**
   * @generated from enum value: ACTION_HIDE_TX = 20;
   */
  HIDE_TX = 20,

  /**
   * @generated from enum value: ACTION_REFERENCE_CREATE = 21;
   */
  REFERENCE_CREATE = 21,

  /**
   * @generated from enum value: ACTION_REFERENCE_DELETE = 22;
   */
  REFERENCE_DELETE = 22,

  /**
   * @generated from enum value: ACTION_REFERENCE_VIEW = 23;
   */
  REFERENCE_VIEW = 23,
}
// Retrieve enum metadata with: proto3.getEnumType(Action)
proto3.util.setEnumType(Action, "auth.Action", [
  { no: 0, name: "ACTION_UNSPECIFIED" },
  { no: 1, name: "ACTION_UTILITY" },
  { no: 10, name: "ACTION_VIEW" },
  { no: 11, name: "ACTION_CREATE" },
  { no: 12, name: "ACTION_UPDATE" },
  { no: 13, name: "ACTION_DELETE" },
  { no: 14, name: "ACTION_SUGGEST_VIEW" },
  { no: 15, name: "ACTION_SUGGEST_CREATE" },
  { no: 16, name: "ACTION_SUGGEST_DELETE" },
  { no: 17, name: "ACTION_SUGGEST_APPROVE" },
  { no: 18, name: "ACTION_VIEW_HISTORY" },
  { no: 19, name: "ACTION_VIEW_HIDDEN_TXS" },
  { no: 20, name: "ACTION_HIDE_TX" },
  { no: 21, name: "ACTION_REFERENCE_CREATE" },
  { no: 22, name: "ACTION_REFERENCE_DELETE" },
  { no: 23, name: "ACTION_REFERENCE_VIEW" },
]);

/**
 * @generated from enum auth.TxError
 */
export enum TxError {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: REQUEST_INVALID = 1;
   */
  REQUEST_INVALID = 1,

  /**
   * @generated from enum value: RUNTIME = 2;
   */
  RUNTIME = 2,

  /**
   * @generated from enum value: RUNTIME_BAD_OPS = 3;
   */
  RUNTIME_BAD_OPS = 3,

  /**
   * The provided key is not in the world state
   *
   * @generated from enum value: KEY_NOT_FOUND = 4;
   */
  KEY_NOT_FOUND = 4,

  /**
   * The provided key is already in the world state
   *
   * @generated from enum value: KEY_ALREADY_EXISTS = 5;
   */
  KEY_ALREADY_EXISTS = 5,

  /**
   * The collection id is invalid
   *
   * @generated from enum value: COLLECTION_INVALID_ID = 11;
   */
  COLLECTION_INVALID_ID = 11,

  /**
   * The collection is not registered and thus cannot be accessed
   *
   * @generated from enum value: COLLECTION_UNREGISTERED = 12;
   */
  COLLECTION_UNREGISTERED = 12,

  /**
   * The collection is already registered and thus cannot be registered again
   *
   * @generated from enum value: COLLECTION_ALREADY_REGISTERED = 13;
   */
  COLLECTION_ALREADY_REGISTERED = 13,

  /**
   * The collection is invalid (e.g. the collection does not have a default ACEntry)
   *
   * @generated from enum value: COLLECTION_INVALID = 14;
   */
  COLLECTION_INVALID = 14,

  /**
   * The object type in the collection is invalid
   *
   * @generated from enum value: COLLECTION_INVALID_OBJECT_TYPE = 15;
   */
  COLLECTION_INVALID_OBJECT_TYPE = 15,

  /**
   * The role id in the collection is invalid
   *
   * @generated from enum value: COLLECTION_INVALID_ROLE_ID = 16;
   */
  COLLECTION_INVALID_ROLE_ID = 16,

  /**
   * The user does not have permission to perform the operation
   *
   * @generated from enum value: USER_INVALID_ID = 20;
   */
  USER_INVALID_ID = 20,

  /**
   * The certificate is not registered as a user and thus cannot be used 
   *
   * @generated from enum value: USER_UNREGISTERED = 21;
   */
  USER_UNREGISTERED = 21,

  /**
   * The certificate is already registered as a user and thus cannot be registered again
   *
   * @generated from enum value: USER_ALREADY_REGISTERED = 22;
   */
  USER_ALREADY_REGISTERED = 22,

  /**
   * The user is invalid
   *
   * @generated from enum value: USER_INVALID = 23;
   */
  USER_INVALID = 23,

  /**
   * The user does not have a role
   *
   * @generated from enum value: USER_NO_ROLE = 24;
   */
  USER_NO_ROLE = 24,

  /**
   * USER_DELETED_ROLE          = 25;
   * The user does not have permission to perform the operation
   *
   * @generated from enum value: USER_PERMISSION_DENIED = 26;
   */
  USER_PERMISSION_DENIED = 26,

  /**
   * The Object's key is invalid
   *
   * @generated from enum value: OBJECT_INVALID_ID = 31;
   */
  OBJECT_INVALID_ID = 31,

  /**
   * The Object is not registered and thus cannot be accessed
   *
   * @generated from enum value: OBJECT_UNREGISTERED = 32;
   */
  OBJECT_UNREGISTERED = 32,

  /**
   * The Object is already registered and thus cannot be registered again
   *
   * @generated from enum value: OBJECT_ALREADY_REGISTERED = 33;
   */
  OBJECT_ALREADY_REGISTERED = 33,

  /**
   * The Object is invalid
   *
   * @generated from enum value: OBJECT_INVALID = 34;
   */
  OBJECT_INVALID = 34,

  /**
   * The object field path is invalid for the object type
   *
   * @generated from enum value: INVALID_OBJECT_FIELD_PATH = 35;
   */
  INVALID_OBJECT_FIELD_PATH = 35,

  /**
   * The value at the object field path is invalid for the object type
   *
   * @generated from enum value: INVALID_OBJECT_FIELD_VALUE = 36;
   */
  INVALID_OBJECT_FIELD_VALUE = 36,
}
// Retrieve enum metadata with: proto3.getEnumType(TxError)
proto3.util.setEnumType(TxError, "auth.TxError", [
  { no: 0, name: "UNSPECIFIED" },
  { no: 1, name: "REQUEST_INVALID" },
  { no: 2, name: "RUNTIME" },
  { no: 3, name: "RUNTIME_BAD_OPS" },
  { no: 4, name: "KEY_NOT_FOUND" },
  { no: 5, name: "KEY_ALREADY_EXISTS" },
  { no: 11, name: "COLLECTION_INVALID_ID" },
  { no: 12, name: "COLLECTION_UNREGISTERED" },
  { no: 13, name: "COLLECTION_ALREADY_REGISTERED" },
  { no: 14, name: "COLLECTION_INVALID" },
  { no: 15, name: "COLLECTION_INVALID_OBJECT_TYPE" },
  { no: 16, name: "COLLECTION_INVALID_ROLE_ID" },
  { no: 20, name: "USER_INVALID_ID" },
  { no: 21, name: "USER_UNREGISTERED" },
  { no: 22, name: "USER_ALREADY_REGISTERED" },
  { no: 23, name: "USER_INVALID" },
  { no: 24, name: "USER_NO_ROLE" },
  { no: 26, name: "USER_PERMISSION_DENIED" },
  { no: 31, name: "OBJECT_INVALID_ID" },
  { no: 32, name: "OBJECT_UNREGISTERED" },
  { no: 33, name: "OBJECT_ALREADY_REGISTERED" },
  { no: 34, name: "OBJECT_INVALID" },
  { no: 35, name: "INVALID_OBJECT_FIELD_PATH" },
  { no: 36, name: "INVALID_OBJECT_FIELD_VALUE" },
]);

/**
 * @generated from message auth.KeySchema
 */
export class KeySchema extends Message<KeySchema> {
  /**
   * The object type of the key
   *
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * The kind of object that the key is for
   *
   * @generated from field: auth.ObjectKind object_kind = 2;
   */
  objectKind = ObjectKind.UNSPECIFIED;

  /**
   * The paths that make up the key
   *
   * @generated from field: google.protobuf.FieldMask keys = 3;
   */
  keys?: FieldMask;

  constructor(data?: PartialMessage<KeySchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.KeySchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_kind", kind: "enum", T: proto3.getEnumType(ObjectKind) },
    { no: 3, name: "keys", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeySchema {
    return new KeySchema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeySchema {
    return new KeySchema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeySchema {
    return new KeySchema().fromJsonString(jsonString, options);
  }

  static equals(a: KeySchema | PlainMessage<KeySchema> | undefined, b: KeySchema | PlainMessage<KeySchema> | undefined): boolean {
    return proto3.util.equals(KeySchema, a, b);
  }
}

/**
 * Can be used as the history entry
 *
 * @generated from message auth.StateActivity
 */
export class StateActivity extends Message<StateActivity> {
  /**
   * The transaction id that caused the change
   *
   * @generated from field: string tx_id = 1;
   */
  txId = "";

  /**
   * The msp of the user that caused the change
   *
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * The id of the user that caused the change
   *
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * The timestamp of the change
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 4;
   */
  timestamp?: Timestamp;

  /**
   * A note about the change
   *
   * @generated from field: string note = 5;
   */
  note = "";

  constructor(data?: PartialMessage<StateActivity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.StateActivity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "message", T: Timestamp },
    { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StateActivity {
    return new StateActivity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StateActivity {
    return new StateActivity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StateActivity {
    return new StateActivity().fromJsonString(jsonString, options);
  }

  static equals(a: StateActivity | PlainMessage<StateActivity> | undefined, b: StateActivity | PlainMessage<StateActivity> | undefined): boolean {
    return proto3.util.equals(StateActivity, a, b);
  }
}

/**
 * @generated from message auth.HistoryEntry
 */
export class HistoryEntry extends Message<HistoryEntry> {
  /**
   * The transaction id that caused the change
   *
   * @generated from field: string tx_id = 1;
   */
  txId = "";

  /**
   * Whether the object was deleted
   *
   * @generated from field: bool is_delete = 2;
   */
  isDelete = false;

  /**
   * Whether the transaction was hidden
   *
   * @generated from field: bool is_hidden = 3;
   */
  isHidden = false;

  /**
   * The timestamp of the change
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 4;
   */
  timestamp?: Timestamp;

  /**
   * A note about the change
   *
   * @generated from field: string note = 5;
   */
  note = "";

  /**
   * The value of the object
   *
   * @generated from field: google.protobuf.Any value = 6;
   */
  value?: Any;

  constructor(data?: PartialMessage<HistoryEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.HistoryEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_delete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "is_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "timestamp", kind: "message", T: Timestamp },
    { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "value", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HistoryEntry {
    return new HistoryEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HistoryEntry {
    return new HistoryEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HistoryEntry {
    return new HistoryEntry().fromJsonString(jsonString, options);
  }

  static equals(a: HistoryEntry | PlainMessage<HistoryEntry> | undefined, b: HistoryEntry | PlainMessage<HistoryEntry> | undefined): boolean {
    return proto3.util.equals(HistoryEntry, a, b);
  }
}

/**
 * @generated from message auth.History
 */
export class History extends Message<History> {
  /**
   * @generated from field: repeated auth.HistoryEntry entries = 1;
   */
  entries: HistoryEntry[] = [];

  /**
   * @generated from field: auth.HiddenTxList hidden_txs = 2;
   */
  hiddenTxs?: HiddenTxList;

  constructor(data?: PartialMessage<History>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.History";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: HistoryEntry, repeated: true },
    { no: 2, name: "hidden_txs", kind: "message", T: HiddenTxList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): History {
    return new History().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): History {
    return new History().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): History {
    return new History().fromJsonString(jsonString, options);
  }

  static equals(a: History | PlainMessage<History> | undefined, b: History | PlainMessage<History> | undefined): boolean {
    return proto3.util.equals(History, a, b);
  }
}

/**
 * @generated from message auth.Operation
 */
export class Operation extends Message<Operation> {
  /**
   * @generated from field: auth.Action action = 1;
   */
  action = Action.UNSPECIFIED;

  /**
   * @generated from field: string collection_id = 2;
   */
  collectionId = "";

  /**
   * @generated from field: string object_type = 3;
   */
  objectType = "";

  /**
   * @generated from field: string secondary_object_type = 4;
   */
  secondaryObjectType = "";

  /**
   * @generated from field: google.protobuf.FieldMask paths = 5;
   */
  paths?: FieldMask;

  constructor(data?: PartialMessage<Operation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Operation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "enum", T: proto3.getEnumType(Action) },
    { no: 2, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "secondary_object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "paths", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation {
    return new Operation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJsonString(jsonString, options);
  }

  static equals(a: Operation | PlainMessage<Operation> | undefined, b: Operation | PlainMessage<Operation> | undefined): boolean {
    return proto3.util.equals(Operation, a, b);
  }
}

/**
 * @generated from message auth.PathPolicy
 */
export class PathPolicy extends Message<PathPolicy> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: repeated auth.Action actions = 2;
   */
  actions: Action[] = [];

  constructor(data?: PartialMessage<PathPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.PathPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "actions", kind: "enum", T: proto3.getEnumType(Action), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PathPolicy {
    return new PathPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PathPolicy {
    return new PathPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PathPolicy {
    return new PathPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: PathPolicy | PlainMessage<PathPolicy> | undefined, b: PathPolicy | PlainMessage<PathPolicy> | undefined): boolean {
    return proto3.util.equals(PathPolicy, a, b);
  }
}

/**
 * @generated from message auth.ObjectPolicy
 */
export class ObjectPolicy extends Message<ObjectPolicy> {
  /**
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * @generated from field: repeated auth.PathPolicy policies = 3;
   */
  policies: PathPolicy[] = [];

  constructor(data?: PartialMessage<ObjectPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ObjectPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "policies", kind: "message", T: PathPolicy, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectPolicy {
    return new ObjectPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectPolicy {
    return new ObjectPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectPolicy {
    return new ObjectPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectPolicy | PlainMessage<ObjectPolicy> | undefined, b: ObjectPolicy | PlainMessage<ObjectPolicy> | undefined): boolean {
    return proto3.util.equals(ObjectPolicy, a, b);
  }
}

/**
 * Access Control Entry for use in Radix Tree
 *
 * @generated from message auth.ACEntry
 */
export class ACEntry extends Message<ACEntry> {
  /**
   * @generated from field: repeated auth.ObjectPolicy object = 1;
   */
  object: ObjectPolicy[] = [];

  /**
   * @generated from field: google.protobuf.FieldMask view_mask = 2;
   */
  viewMask?: FieldMask;

  constructor(data?: PartialMessage<ACEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ACEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: ObjectPolicy, repeated: true },
    { no: 2, name: "view_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ACEntry {
    return new ACEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ACEntry {
    return new ACEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ACEntry {
    return new ACEntry().fromJsonString(jsonString, options);
  }

  static equals(a: ACEntry | PlainMessage<ACEntry> | undefined, b: ACEntry | PlainMessage<ACEntry> | undefined): boolean {
    return proto3.util.equals(ACEntry, a, b);
  }
}

/**
 * @generated from message auth.NestedPathPolicy
 */
export class NestedPathPolicy extends Message<NestedPathPolicy> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: bool is_leaf = 2;
   */
  isLeaf = false;

  /**
   * @generated from field: repeated auth.Action actions = 3;
   */
  actions: Action[] = [];

  /**
   * @generated from field: auth.NestedPathPolicy children = 4;
   */
  children?: NestedPathPolicy;

  constructor(data?: PartialMessage<NestedPathPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.NestedPathPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_leaf", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "actions", kind: "enum", T: proto3.getEnumType(Action), repeated: true },
    { no: 4, name: "children", kind: "message", T: NestedPathPolicy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NestedPathPolicy {
    return new NestedPathPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NestedPathPolicy {
    return new NestedPathPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NestedPathPolicy {
    return new NestedPathPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: NestedPathPolicy | PlainMessage<NestedPathPolicy> | undefined, b: NestedPathPolicy | PlainMessage<NestedPathPolicy> | undefined): boolean {
    return proto3.util.equals(NestedPathPolicy, a, b);
  }
}

/**
 * @generated from message auth.NestedObjectPolicy
 */
export class NestedObjectPolicy extends Message<NestedObjectPolicy> {
  /**
   * @generated from field: string object_type = 1;
   */
  objectType = "";

  /**
   * @generated from field: auth.NestedPathPolicy policies = 2;
   */
  policies?: NestedPathPolicy;

  constructor(data?: PartialMessage<NestedObjectPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.NestedObjectPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "policies", kind: "message", T: NestedPathPolicy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NestedObjectPolicy {
    return new NestedObjectPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NestedObjectPolicy {
    return new NestedObjectPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NestedObjectPolicy {
    return new NestedObjectPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: NestedObjectPolicy | PlainMessage<NestedObjectPolicy> | undefined, b: NestedObjectPolicy | PlainMessage<NestedObjectPolicy> | undefined): boolean {
    return proto3.util.equals(NestedObjectPolicy, a, b);
  }
}

/**
 * Access Control Entry for use in Hash Tree
 *
 * @generated from message auth.NestedACEntry
 */
export class NestedACEntry extends Message<NestedACEntry> {
  /**
   * @generated from field: auth.ObjectPolicy root = 1;
   */
  root?: ObjectPolicy;

  /**
   * @generated from field: bool is_leaf = 3;
   */
  isLeaf = false;

  /**
   * @generated from field: map<string, auth.NestedACEntry> children = 2;
   */
  children: { [key: string]: NestedACEntry } = {};

  constructor(data?: PartialMessage<NestedACEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.NestedACEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "root", kind: "message", T: ObjectPolicy },
    { no: 3, name: "is_leaf", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "children", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: NestedACEntry} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NestedACEntry {
    return new NestedACEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NestedACEntry {
    return new NestedACEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NestedACEntry {
    return new NestedACEntry().fromJsonString(jsonString, options);
  }

  static equals(a: NestedACEntry | PlainMessage<NestedACEntry> | undefined, b: NestedACEntry | PlainMessage<NestedACEntry> | undefined): boolean {
    return proto3.util.equals(NestedACEntry, a, b);
  }
}

/**
 * @generated from message auth.Object
 */
export class Object$ extends Message<Object$> {
  /**
   * @generated from field: auth.ObjectKey key = 1;
   */
  key?: ObjectKey;

  /**
   * @generated from field: google.protobuf.Any value = 2;
   */
  value?: Any;

  constructor(data?: PartialMessage<Object$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Object";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ObjectKey },
    { no: 2, name: "value", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object$ {
    return new Object$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object$ {
    return new Object$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object$ {
    return new Object$().fromJsonString(jsonString, options);
  }

  static equals(a: Object$ | PlainMessage<Object$> | undefined, b: Object$ | PlainMessage<Object$> | undefined): boolean {
    return proto3.util.equals(Object$, a, b);
  }
}

/**
 * @generated from message auth.FullObject
 */
export class FullObject extends Message<FullObject> {
  /**
   * @generated from field: auth.ObjectKey key = 1;
   */
  key?: ObjectKey;

  /**
   * @generated from field: google.protobuf.Any value = 2;
   */
  value?: Any;

  /**
   * @generated from field: auth.History history = 3;
   */
  history?: History;

  /**
   * @generated from field: repeated auth.Suggestion suggestions = 4;
   */
  suggestions: Suggestion[] = [];

  /**
   * @generated from field: repeated auth.Reference references = 5;
   */
  references: Reference[] = [];

  constructor(data?: PartialMessage<FullObject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.FullObject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: ObjectKey },
    { no: 2, name: "value", kind: "message", T: Any },
    { no: 3, name: "history", kind: "message", T: History },
    { no: 4, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
    { no: 5, name: "references", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullObject {
    return new FullObject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullObject {
    return new FullObject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullObject {
    return new FullObject().fromJsonString(jsonString, options);
  }

  static equals(a: FullObject | PlainMessage<FullObject> | undefined, b: FullObject | PlainMessage<FullObject> | undefined): boolean {
    return proto3.util.equals(FullObject, a, b);
  }
}

/**
 * Keys
 * ─────────────────────────────────────────────────────────────────────────────────────
 * Object Keys
 * When converted to its string form it will be:
 * - Key := {OBJECT_TYPE}{COLLECTION_ID}{...OBJECT_ID}
 *
 * Reference Keys
 * Used to store references to objects for case like a user having a role
 * When converted to its string form it will be:
 * {Ref}{REFERENCE_TYPE}{COLLECTION_ID}[{OBJECT1_TYPE}{...OBJECT1_ID}][{OBJECT2_TYPE}{...OBJECT2_ID}]
 *
 *
 * SubKeys
 * When converted to its string form it will be:
 * {SUB_OBJECT_TYPE}{COLLECTION_ID}{OBJECT_TYPE}{...OBJECT_ID}{SUB_OBJECT_ID}
 * Examples
 * - Suggestion := {auth.Suggestion}  {COLLECTION_ID}{OBJECT_TYPE}{...OBJECT_ID}{SUGGESTION_ID}
 * - HiddenTxList := {auth.HiddenTxList}{COLLECTION_ID}{OBJECT_TYPE} {...OBJECT_ID}
 *
 * @generated from message auth.ObjectKey
 */
export class ObjectKey extends Message<ObjectKey> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string object_type = 2;
   */
  objectType = "";

  /**
   * @generated from field: repeated string object_id_parts = 3;
   */
  objectIdParts: string[] = [];

  constructor(data?: PartialMessage<ObjectKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ObjectKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "object_id_parts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectKey {
    return new ObjectKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectKey {
    return new ObjectKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectKey {
    return new ObjectKey().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectKey | PlainMessage<ObjectKey> | undefined, b: ObjectKey | PlainMessage<ObjectKey> | undefined): boolean {
    return proto3.util.equals(ObjectKey, a, b);
  }
}

/**
 * Reference Keys
 * {auth.Reference}{REFERENCE_TYPE}{COLLECTION_ID}[{OBJECT1_TYPE}{...OBJECT1_ID}][{OBJECT2_TYPE}{...OBJECT2_ID}]
 *
 * @generated from message auth.Reference
 */
export class Reference extends Message<Reference> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string reference_type = 2;
   */
  referenceType = "";

  /**
   * @generated from field: auth.ObjectKey key_1 = 3;
   */
  key1?: ObjectKey;

  /**
   * @generated from field: auth.ObjectKey key_2 = 4;
   */
  key2?: ObjectKey;

  constructor(data?: PartialMessage<Reference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Reference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reference_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key_1", kind: "message", T: ObjectKey },
    { no: 4, name: "key_2", kind: "message", T: ObjectKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reference {
    return new Reference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reference {
    return new Reference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reference {
    return new Reference().fromJsonString(jsonString, options);
  }

  static equals(a: Reference | PlainMessage<Reference> | undefined, b: Reference | PlainMessage<Reference> | undefined): boolean {
    return proto3.util.equals(Reference, a, b);
  }
}

/**
 * Collection
 * ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
 * Note that the types of objects are stored in the default ACEntry
 *
 * key := {COLLECTION}{COLLECTION_ID}
 *
 * @generated from message auth.Collection
 */
export class Collection extends Message<Collection> {
  /**
   * The key for the ledger
   *
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: repeated string object_types = 4;
   */
  objectTypes: string[] = [];

  /**
   * @generated from field: auth.ACEntry default = 5;
   */
  default?: ACEntry;

  constructor(data?: PartialMessage<Collection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Collection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "object_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "default", kind: "message", T: ACEntry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection {
    return new Collection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection {
    return new Collection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection {
    return new Collection().fromJsonString(jsonString, options);
  }

  static equals(a: Collection | PlainMessage<Collection> | undefined, b: Collection | PlainMessage<Collection> | undefined): boolean {
    return proto3.util.equals(Collection, a, b);
  }
}

/**
 * User
 * ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
 *
 * key := {USER}{USER_ID.msp_id}{USER_ID.id}
 *
 *
 * @generated from message auth.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * Key should be
 * {auth.Suggestion}{COLLECTION_ID}{OBJECT_TYPE}{...OBJECT_ID}{SUGGESTION_ID}
 *
 * @generated from message auth.Suggestion
 */
export class Suggestion extends Message<Suggestion> {
  /**
   * @generated from field: auth.ObjectKey primary_key = 1;
   */
  primaryKey?: ObjectKey;

  /**
   * @generated from field: string suggestion_id = 2;
   */
  suggestionId = "";

  /**
   * @generated from field: google.protobuf.FieldMask paths = 5;
   */
  paths?: FieldMask;

  /**
   * @generated from field: google.protobuf.Any value = 6;
   */
  value?: Any;

  constructor(data?: PartialMessage<Suggestion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Suggestion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "primary_key", kind: "message", T: ObjectKey },
    { no: 2, name: "suggestion_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "paths", kind: "message", T: FieldMask },
    { no: 6, name: "value", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Suggestion {
    return new Suggestion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Suggestion {
    return new Suggestion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Suggestion {
    return new Suggestion().fromJsonString(jsonString, options);
  }

  static equals(a: Suggestion | PlainMessage<Suggestion> | undefined, b: Suggestion | PlainMessage<Suggestion> | undefined): boolean {
    return proto3.util.equals(Suggestion, a, b);
  }
}

/**
 * @generated from message auth.HiddenTx
 */
export class HiddenTx extends Message<HiddenTx> {
  /**
   * @generated from field: string tx_id = 1;
   */
  txId = "";

  /**
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 4;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: string note = 5;
   */
  note = "";

  constructor(data?: PartialMessage<HiddenTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.HiddenTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "message", T: Timestamp },
    { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HiddenTx {
    return new HiddenTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HiddenTx {
    return new HiddenTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HiddenTx {
    return new HiddenTx().fromJsonString(jsonString, options);
  }

  static equals(a: HiddenTx | PlainMessage<HiddenTx> | undefined, b: HiddenTx | PlainMessage<HiddenTx> | undefined): boolean {
    return proto3.util.equals(HiddenTx, a, b);
  }
}

/**
 * Key should be {COLLECTION_ID}{auth.HiddenTxList}{OBJECT_TYPE}{...OBJECT_ID}
 *
 * @generated from message auth.HiddenTxList
 */
export class HiddenTxList extends Message<HiddenTxList> {
  /**
   * The key that is used to store the object
   *
   * @generated from field: auth.ObjectKey primary_key = 1;
   */
  primaryKey?: ObjectKey;

  /**
   * The list of hidden txs by tx_id
   *
   * @generated from field: repeated auth.HiddenTx txs = 4;
   */
  txs: HiddenTx[] = [];

  constructor(data?: PartialMessage<HiddenTxList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.HiddenTxList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "primary_key", kind: "message", T: ObjectKey },
    { no: 4, name: "txs", kind: "message", T: HiddenTx, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HiddenTxList {
    return new HiddenTxList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HiddenTxList {
    return new HiddenTxList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HiddenTxList {
    return new HiddenTxList().fromJsonString(jsonString, options);
  }

  static equals(a: HiddenTxList | PlainMessage<HiddenTxList> | undefined, b: HiddenTxList | PlainMessage<HiddenTxList> | undefined): boolean {
    return proto3.util.equals(HiddenTxList, a, b);
  }
}

/**
 * @generated from message auth.Role
 */
export class Role extends Message<Role> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string role_id = 2;
   */
  roleId = "";

  /**
   * @generated from field: auth.ACEntry ac = 4;
   */
  ac?: ACEntry;

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: string description = 6;
   */
  description = "";

  /**
   * @generated from field: repeated string parent_role_ids = 7;
   */
  parentRoleIds: string[] = [];

  constructor(data?: PartialMessage<Role>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Role";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ac", kind: "message", T: ACEntry },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "parent_role_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role {
    return new Role().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJsonString(jsonString, options);
  }

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean {
    return proto3.util.equals(Role, a, b);
  }
}

/**
 * An attribute is used to define permissions via the value of the attribute in the 
 * users certificate for a given msp
 *
 * @generated from message auth.Attribute
 */
export class Attribute extends Message<Attribute> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * The msp of the organization that this attribute applies to
   *
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * The oid of the attribute
   *
   * @generated from field: string oid = 3;
   */
  oid = "";

  /**
   * The value of the attribute required to be satisfied by the user to have the
   * role
   *
   * @generated from field: string value = 4;
   */
  value = "";

  /**
   * The Permission that the user will have if they have the attribute
   *
   * @generated from field: auth.ACEntry ac = 5;
   */
  ac?: ACEntry;

  constructor(data?: PartialMessage<Attribute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Attribute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "oid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ac", kind: "message", T: ACEntry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attribute {
    return new Attribute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attribute {
    return new Attribute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attribute {
    return new Attribute().fromJsonString(jsonString, options);
  }

  static equals(a: Attribute | PlainMessage<Attribute> | undefined, b: Attribute | PlainMessage<Attribute> | undefined): boolean {
    return proto3.util.equals(Attribute, a, b);
  }
}

/**
 * Membership is used to store permissions for a user in a collection
 *
 * @generated from message auth.Membership
 */
export class Membership extends Message<Membership> {
  /**
   * The collection that the user is a member of
   *
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * The msp of the organization that the user's certificate is from
   *
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * The id of the user from the certificate
   *
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * The Permissions that the user will have
   *
   * @generated from field: auth.ACEntry ac = 4;
   */
  ac?: ACEntry;

  constructor(data?: PartialMessage<Membership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.Membership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ac", kind: "message", T: ACEntry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Membership {
    return new Membership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Membership {
    return new Membership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Membership {
    return new Membership().fromJsonString(jsonString, options);
  }

  static equals(a: Membership | PlainMessage<Membership> | undefined, b: Membership | PlainMessage<Membership> | undefined): boolean {
    return proto3.util.equals(Membership, a, b);
  }
}

