// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file auth/v1/utils.proto (package auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { User_Id } from "./auth_pb.js";

/**
 * @generated from enum auth.Error
 */
export enum Error {
  /**
   * @generated from enum value: ERROR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ERROR_REQUEST_INVALID = 1;
   */
  REQUEST_INVALID = 1,

  /**
   * @generated from enum value: ERROR_RUNTIME = 2;
   */
  RUNTIME = 2,

  /**
   * @generated from enum value: ERROR_RUNTIME_BAD_OPS = 3;
   */
  RUNTIME_BAD_OPS = 3,

  /**
   * The collection id is invalid
   *
   * @generated from enum value: ERROR_COLLECTION_INVALID_ID = 11;
   */
  COLLECTION_INVALID_ID = 11,

  /**
   * The collection is not registered
   *
   * @generated from enum value: ERROR_COLLECTION_UNREGISTERED = 12;
   */
  COLLECTION_UNREGISTERED = 12,

  /**
   * The collection is already registered
   *
   * @generated from enum value: ERROR_COLLECTION_ALREADY_REGISTERED = 13;
   */
  COLLECTION_ALREADY_REGISTERED = 13,

  /**
   * The Collection is invalid
   *
   * @generated from enum value: ERROR_COLLECTION_INVALID = 14;
   */
  COLLECTION_INVALID = 14,

  /**
   * The object type name is invalid
   *
   * @generated from enum value: ERROR_COLLECTION_INVALID_OBJECT_TYPE = 15;
   */
  COLLECTION_INVALID_OBJECT_TYPE = 15,

  /**
   * The role id is invalid
   *
   * @generated from enum value: ERROR_COLLECTION_INVALID_ROLE_ID = 16;
   */
  COLLECTION_INVALID_ROLE_ID = 16,

  /**
   * The user does not have permission to perform the operation
   *
   * @generated from enum value: ERROR_USER_INVALID_ID = 20;
   */
  USER_INVALID_ID = 20,

  /**
   * The user is not registered
   *
   * @generated from enum value: ERROR_USER_UNREGISTERED = 21;
   */
  USER_UNREGISTERED = 21,

  /**
   * The user is already registered
   *
   * @generated from enum value: ERROR_USER_ALREADY_REGISTERED = 22;
   */
  USER_ALREADY_REGISTERED = 22,

  /**
   * The user is invalid
   *
   * @generated from enum value: ERROR_USER_INVALID = 23;
   */
  USER_INVALID = 23,

  /**
   * The user does not have a role in the collection
   *
   * @generated from enum value: ERROR_USER_NO_ROLE = 24;
   */
  USER_NO_ROLE = 24,

  /**
   * The user has a deleted role in the collection
   *
   * @generated from enum value: ERROR_USER_DELETED_ROLE = 25;
   */
  USER_DELETED_ROLE = 25,

  /**
   * The user does not have permission to perform the operation
   *
   * @generated from enum value: ERROR_USER_PERMISSION_DENIED = 26;
   */
  USER_PERMISSION_DENIED = 26,

  /**
   * The object id is invalid
   *
   * @generated from enum value: ERROR_OBJECT_INVALID_ID = 31;
   */
  OBJECT_INVALID_ID = 31,

  /**
   * The object is not registered
   *
   * @generated from enum value: ERROR_OBJECT_UNREGISTERED = 32;
   */
  OBJECT_UNREGISTERED = 32,

  /**
   * The object is already registered
   *
   * @generated from enum value: ERROR_OBJECT_ALREADY_REGISTERED = 33;
   */
  OBJECT_ALREADY_REGISTERED = 33,

  /**
   * The object is invalid
   *
   * @generated from enum value: ERROR_OBJECT_INVALID = 34;
   */
  OBJECT_INVALID = 34,

  /**
   * @generated from enum value: ERROR_INVALID_OBJECT_FIELD_PATH = 35;
   */
  INVALID_OBJECT_FIELD_PATH = 35,

  /**
   * @generated from enum value: ERROR_INVALID_OBJECT_FIELD_VALUE = 36;
   */
  INVALID_OBJECT_FIELD_VALUE = 36,
}
// Retrieve enum metadata with: proto3.getEnumType(Error)
proto3.util.setEnumType(Error, "auth.Error", [
  { no: 0, name: "ERROR_UNSPECIFIED" },
  { no: 1, name: "ERROR_REQUEST_INVALID" },
  { no: 2, name: "ERROR_RUNTIME" },
  { no: 3, name: "ERROR_RUNTIME_BAD_OPS" },
  { no: 11, name: "ERROR_COLLECTION_INVALID_ID" },
  { no: 12, name: "ERROR_COLLECTION_UNREGISTERED" },
  { no: 13, name: "ERROR_COLLECTION_ALREADY_REGISTERED" },
  { no: 14, name: "ERROR_COLLECTION_INVALID" },
  { no: 15, name: "ERROR_COLLECTION_INVALID_OBJECT_TYPE" },
  { no: 16, name: "ERROR_COLLECTION_INVALID_ROLE_ID" },
  { no: 20, name: "ERROR_USER_INVALID_ID" },
  { no: 21, name: "ERROR_USER_UNREGISTERED" },
  { no: 22, name: "ERROR_USER_ALREADY_REGISTERED" },
  { no: 23, name: "ERROR_USER_INVALID" },
  { no: 24, name: "ERROR_USER_NO_ROLE" },
  { no: 25, name: "ERROR_USER_DELETED_ROLE" },
  { no: 26, name: "ERROR_USER_PERMISSION_DENIED" },
  { no: 31, name: "ERROR_OBJECT_INVALID_ID" },
  { no: 32, name: "ERROR_OBJECT_UNREGISTERED" },
  { no: 33, name: "ERROR_OBJECT_ALREADY_REGISTERED" },
  { no: 34, name: "ERROR_OBJECT_INVALID" },
  { no: 35, name: "ERROR_INVALID_OBJECT_FIELD_PATH" },
  { no: 36, name: "ERROR_INVALID_OBJECT_FIELD_VALUE" },
]);

/**
 * @generated from message auth.History
 */
export class History extends Message<History> {
  /**
   * The tx_id is the key
   *
   * @generated from field: map<string, auth.History.Entry> entries = 1;
   */
  entries: { [key: string]: History_Entry } = {};

  constructor(data?: PartialMessage<History>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.History";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: History_Entry} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): History {
    return new History().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): History {
    return new History().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): History {
    return new History().fromJsonString(jsonString, options);
  }

  static equals(a: History | PlainMessage<History> | undefined, b: History | PlainMessage<History> | undefined): boolean {
    return proto3.util.equals(History, a, b);
  }
}

/**
 * @generated from message auth.History.Entry
 */
export class History_Entry extends Message<History_Entry> {
  /**
   * @generated from field: string tx_id = 1;
   */
  txId = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: bool is_deleted = 3;
   */
  isDeleted = false;

  /**
   * @generated from field: bool is_hidden = 4;
   */
  isHidden = false;

  /**
   * @generated from field: google.protobuf.Any state = 5;
   */
  state?: Any;

  constructor(data?: PartialMessage<History_Entry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.History.Entry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "is_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "is_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "state", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): History_Entry {
    return new History_Entry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): History_Entry {
    return new History_Entry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): History_Entry {
    return new History_Entry().fromJsonString(jsonString, options);
  }

  static equals(a: History_Entry | PlainMessage<History_Entry> | undefined, b: History_Entry | PlainMessage<History_Entry> | undefined): boolean {
    return proto3.util.equals(History_Entry, a, b);
  }
}

/**
 * @generated from message auth.StateActivity
 */
export class StateActivity extends Message<StateActivity> {
  /**
   * @generated from field: string tx_id = 1;
   */
  txId = "";

  /**
   * @generated from field: string note = 2;
   */
  note = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: auth.User.Id user_id = 4;
   */
  userId?: User_Id;

  constructor(data?: PartialMessage<StateActivity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.StateActivity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
    { no: 4, name: "user_id", kind: "message", T: User_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StateActivity {
    return new StateActivity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StateActivity {
    return new StateActivity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StateActivity {
    return new StateActivity().fromJsonString(jsonString, options);
  }

  static equals(a: StateActivity | PlainMessage<StateActivity> | undefined, b: StateActivity | PlainMessage<StateActivity> | undefined): boolean {
    return proto3.util.equals(StateActivity, a, b);
  }
}

/**
 * @generated from message auth.HiddenTx
 */
export class HiddenTx extends Message<HiddenTx> {
  /**
   * @generated from field: string tx_id = 1;
   */
  txId = "";

  /**
   * @generated from field: string notes = 2;
   */
  notes = "";

  /**
   * @generated from field: auth.StateActivity last_modified = 20;
   */
  lastModified?: StateActivity;

  constructor(data?: PartialMessage<HiddenTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.HiddenTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "notes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "last_modified", kind: "message", T: StateActivity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HiddenTx {
    return new HiddenTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HiddenTx {
    return new HiddenTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HiddenTx {
    return new HiddenTx().fromJsonString(jsonString, options);
  }

  static equals(a: HiddenTx | PlainMessage<HiddenTx> | undefined, b: HiddenTx | PlainMessage<HiddenTx> | undefined): boolean {
    return proto3.util.equals(HiddenTx, a, b);
  }
}

