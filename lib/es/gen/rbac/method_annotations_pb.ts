// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file rbac/method_annotations.proto (package rbac, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Operations_Action_Type, Operations_Domain } from "./rbac_pb.js";

/**
 * @generated from message rbac.MethodAnnotation
 */
export class MethodAnnotation extends Message<MethodAnnotation> {
  /**
   * Wither to evaluate or just submit it 
   *
   * @generated from field: bool Submit = 1;
   */
  Submit = false;

  /**
   * Action    
   *
   * Domain of the operation 
   *
   * @generated from field: rbac.Operations.Domain domain = 2;
   */
  domain = Operations_Domain.UNSPECIFIED;

  /**
   * The type of Action to be performed 
   *
   * @generated from field: rbac.Operations.Action.Type action = 3;
   */
  action = Operations_Action_Type.UNSPECIFIED;

  constructor(data?: PartialMessage<MethodAnnotation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.MethodAnnotation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Submit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "domain", kind: "enum", T: proto3.getEnumType(Operations_Domain) },
    { no: 3, name: "action", kind: "enum", T: proto3.getEnumType(Operations_Action_Type) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MethodAnnotation {
    return new MethodAnnotation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MethodAnnotation {
    return new MethodAnnotation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MethodAnnotation {
    return new MethodAnnotation().fromJsonString(jsonString, options);
  }

  static equals(a: MethodAnnotation | PlainMessage<MethodAnnotation> | undefined, b: MethodAnnotation | PlainMessage<MethodAnnotation> | undefined): boolean {
    return proto3.util.equals(MethodAnnotation, a, b);
  }
}

