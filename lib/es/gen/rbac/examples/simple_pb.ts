// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file rbac/examples/simple.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message SimpleStateObject
 */
export class SimpleStateObject extends Message<SimpleStateObject> {
  /**
   * @generated from field: SimpleStateObject.Id id = 1;
   */
  id?: SimpleStateObject_Id;

  /**
   * @generated from field: repeated string strings = 2;
   */
  strings: string[] = [];

  /**
   * @generated from field: int32 int32 = 3;
   */
  int32 = 0;

  constructor(data?: PartialMessage<SimpleStateObject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SimpleStateObject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: SimpleStateObject_Id },
    { no: 2, name: "strings", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "int32", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleStateObject {
    return new SimpleStateObject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleStateObject {
    return new SimpleStateObject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleStateObject {
    return new SimpleStateObject().fromJsonString(jsonString, options);
  }

  static equals(a: SimpleStateObject | PlainMessage<SimpleStateObject> | undefined, b: SimpleStateObject | PlainMessage<SimpleStateObject> | undefined): boolean {
    return proto3.util.equals(SimpleStateObject, a, b);
  }
}

/**
 * @generated from message SimpleStateObject.Id
 */
export class SimpleStateObject_Id extends Message<SimpleStateObject_Id> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<SimpleStateObject_Id>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SimpleStateObject.Id";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleStateObject_Id {
    return new SimpleStateObject_Id().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleStateObject_Id {
    return new SimpleStateObject_Id().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleStateObject_Id {
    return new SimpleStateObject_Id().fromJsonString(jsonString, options);
  }

  static equals(a: SimpleStateObject_Id | PlainMessage<SimpleStateObject_Id> | undefined, b: SimpleStateObject_Id | PlainMessage<SimpleStateObject_Id> | undefined): boolean {
    return proto3.util.equals(SimpleStateObject_Id, a, b);
  }
}

/**
 * @generated from message SimpleStateObject.List
 */
export class SimpleStateObject_List extends Message<SimpleStateObject_List> {
  /**
   * @generated from field: repeated SimpleStateObject.Id ids = 1;
   */
  ids: SimpleStateObject_Id[] = [];

  constructor(data?: PartialMessage<SimpleStateObject_List>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SimpleStateObject.List";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "message", T: SimpleStateObject_Id, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleStateObject_List {
    return new SimpleStateObject_List().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleStateObject_List {
    return new SimpleStateObject_List().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleStateObject_List {
    return new SimpleStateObject_List().fromJsonString(jsonString, options);
  }

  static equals(a: SimpleStateObject_List | PlainMessage<SimpleStateObject_List> | undefined, b: SimpleStateObject_List | PlainMessage<SimpleStateObject_List> | undefined): boolean {
    return proto3.util.equals(SimpleStateObject_List, a, b);
  }
}

