// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file rbac/rbac.proto (package rbac, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, Struct, Timestamp, Type } from "@bufbuild/protobuf";

/**
 * @generated from message rbac.StateActivity
 */
export class StateActivity extends Message<StateActivity> {
  /**
   * @generated from field: string tx_id = 1;
   */
  txId = "";

  /**
   * @generated from field: string note = 2;
   */
  note = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: rbac.User.Id user_id = 4;
   */
  userId?: User_Id;

  constructor(data?: PartialMessage<StateActivity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.StateActivity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
    { no: 4, name: "user_id", kind: "message", T: User_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StateActivity {
    return new StateActivity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StateActivity {
    return new StateActivity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StateActivity {
    return new StateActivity().fromJsonString(jsonString, options);
  }

  static equals(a: StateActivity | PlainMessage<StateActivity> | undefined, b: StateActivity | PlainMessage<StateActivity> | undefined): boolean {
    return proto3.util.equals(StateActivity, a, b);
  }
}

/**
 * @generated from message rbac.Collection
 */
export class Collection extends Message<Collection> {
  /**
   * @generated from field: rbac.Collection.Id id = 1;
   */
  id?: Collection_Id;

  /**
   * The namespace of the object
   *
   * @generated from field: string object_namespace = 2;
   */
  objectNamespace = "";

  /**
   * protobuf message descriptor
   *
   * @generated from field: google.protobuf.Type object_type = 3;
   */
  objectType?: Type;

  /**
   * Declared Roles for the collection
   *   - The key is the role id
   *   - The value is the role name
   *
   * @generated from field: map<int32, string> roles = 4;
   */
  roles: { [key: number]: string } = {};

  /**
   * @generated from field: repeated int32 role_nums = 9;
   */
  roleNums: number[] = [];

  /**
   * Declared Permissions for the permissions of all roles in the collection
   *
   * @generated from field: map<int32, rbac.Collection.ACL> acl = 5;
   */
  acl: { [key: number]: Collection_ACL } = {};

  constructor(data?: PartialMessage<Collection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.Collection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Collection_Id },
    { no: 2, name: "object_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "object_type", kind: "message", T: Type },
    { no: 4, name: "roles", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 9, name: "role_nums", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 5, name: "acl", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: Collection_ACL} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection {
    return new Collection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection {
    return new Collection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection {
    return new Collection().fromJsonString(jsonString, options);
  }

  static equals(a: Collection | PlainMessage<Collection> | undefined, b: Collection | PlainMessage<Collection> | undefined): boolean {
    return proto3.util.equals(Collection, a, b);
  }
}

/**
 * @generated from message rbac.Collection.Id
 */
export class Collection_Id extends Message<Collection_Id> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  constructor(data?: PartialMessage<Collection_Id>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.Collection.Id";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection_Id {
    return new Collection_Id().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection_Id {
    return new Collection_Id().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection_Id {
    return new Collection_Id().fromJsonString(jsonString, options);
  }

  static equals(a: Collection_Id | PlainMessage<Collection_Id> | undefined, b: Collection_Id | PlainMessage<Collection_Id> | undefined): boolean {
    return proto3.util.equals(Collection_Id, a, b);
  }
}

/**
 * @generated from message rbac.Collection.List
 */
export class Collection_List extends Message<Collection_List> {
  /**
   * @generated from field: repeated rbac.Collection items = 1;
   */
  items: Collection[] = [];

  constructor(data?: PartialMessage<Collection_List>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.Collection.List";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Collection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection_List {
    return new Collection_List().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection_List {
    return new Collection_List().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection_List {
    return new Collection_List().fromJsonString(jsonString, options);
  }

  static equals(a: Collection_List | PlainMessage<Collection_List> | undefined, b: Collection_List | PlainMessage<Collection_List> | undefined): boolean {
    return proto3.util.equals(Collection_List, a, b);
  }
}

/**
 * @generated from message rbac.Collection.ACL
 */
export class Collection_ACL extends Message<Collection_ACL> {
  /**
   * Declared Permissions for the permissions of all roles in the collection
   *   - The value is the permissions for the role
   *
   * @generated from field: rbac.Operations.Membership role_permissions = 5;
   */
  rolePermissions?: Operations_Membership;

  /**
   * Declared Permissions for the memberships of all roles in the Collection
   *   - The key is the role id
   *   - The value is the permissions for the role 
   *
   * @generated from field: rbac.Operations.Membership memberships = 6;
   */
  memberships?: Operations_Membership;

  /**
   * acl_object are the permissions for the object
   * Keys must be valid role ids defined in the roles map
   *
   * @generated from field: rbac.Operations.Object object = 7;
   */
  object?: Operations_Object;

  /**
   *  ObjectField Permissions
   * Key must be a valid field path in the object descriptor
   *
   * @generated from field: map<string, rbac.Operations.PathRolePermission> object_paths = 8;
   */
  objectPaths: { [key: string]: Operations_PathRolePermission } = {};

  constructor(data?: PartialMessage<Collection_ACL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.Collection.ACL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "role_permissions", kind: "message", T: Operations_Membership },
    { no: 6, name: "memberships", kind: "message", T: Operations_Membership },
    { no: 7, name: "object", kind: "message", T: Operations_Object },
    { no: 8, name: "object_paths", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Operations_PathRolePermission} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collection_ACL {
    return new Collection_ACL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collection_ACL {
    return new Collection_ACL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collection_ACL {
    return new Collection_ACL().fromJsonString(jsonString, options);
  }

  static equals(a: Collection_ACL | PlainMessage<Collection_ACL> | undefined, b: Collection_ACL | PlainMessage<Collection_ACL> | undefined): boolean {
    return proto3.util.equals(Collection_ACL, a, b);
  }
}

/**
 * @generated from message rbac.Operations
 */
export class Operations extends Message<Operations> {
  constructor(data?: PartialMessage<Operations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.Operations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operations {
    return new Operations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operations {
    return new Operations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operations {
    return new Operations().fromJsonString(jsonString, options);
  }

  static equals(a: Operations | PlainMessage<Operations> | undefined, b: Operations | PlainMessage<Operations> | undefined): boolean {
    return proto3.util.equals(Operations, a, b);
  }
}

/**
 * @generated from enum rbac.Operations.Domain
 */
export enum Operations_Domain {
  /**
   * @generated from enum value: DOMAIN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DOMAIN_COLLECTION = 1;
   */
  COLLECTION = 1,

  /**
   * @generated from enum value: DOMAIN_OBJECT = 2;
   */
  OBJECT = 2,

  /**
   * @generated from enum value: DOMAIN_OBJECT_FIELD = 3;
   */
  OBJECT_FIELD = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Operations_Domain)
proto3.util.setEnumType(Operations_Domain, "rbac.Operations.Domain", [
  { no: 0, name: "DOMAIN_UNSPECIFIED" },
  { no: 1, name: "DOMAIN_COLLECTION" },
  { no: 2, name: "DOMAIN_OBJECT" },
  { no: 3, name: "DOMAIN_OBJECT_FIELD" },
]);

/**
 * @generated from message rbac.Operations.Action
 */
export class Operations_Action extends Message<Operations_Action> {
  /**
   * @generated from field: rbac.Operations.Action.Type type = 1;
   */
  type = Operations_Action_Type.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.FieldMask paths = 2;
   */
  paths?: FieldMask;

  constructor(data?: PartialMessage<Operations_Action>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.Operations.Action";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Operations_Action_Type) },
    { no: 2, name: "paths", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operations_Action {
    return new Operations_Action().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operations_Action {
    return new Operations_Action().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operations_Action {
    return new Operations_Action().fromJsonString(jsonString, options);
  }

  static equals(a: Operations_Action | PlainMessage<Operations_Action> | undefined, b: Operations_Action | PlainMessage<Operations_Action> | undefined): boolean {
    return proto3.util.equals(Operations_Action, a, b);
  }
}

/**
 * @generated from enum rbac.Operations.Action.Type
 */
export enum Operations_Action_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_VIEW = 1;
   */
  VIEW = 1,

  /**
   * @generated from enum value: TYPE_EDIT = 2;
   */
  EDIT = 2,

  /**
   * @generated from enum value: TYPE_SUGGEST_EDIT = 3;
   */
  SUGGEST_EDIT = 3,

  /**
   * @generated from enum value: TYPE_SUGGEST_APPROVE = 4;
   */
  SUGGEST_APPROVE = 4,

  /**
   * @generated from enum value: TYPE_SUGGEST_REJECT = 5;
   */
  SUGGEST_REJECT = 5,

  /**
   * @generated from enum value: TYPE_CREATE = 6;
   */
  CREATE = 6,

  /**
   * @generated from enum value: TYPE_DELETE = 7;
   */
  DELETE = 7,

  /**
   * @generated from enum value: TYPE_HIDDEN_TX = 8;
   */
  HIDDEN_TX = 8,

  /**
   * @generated from enum value: TYPE_INIT = 9;
   */
  INIT = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(Operations_Action_Type)
proto3.util.setEnumType(Operations_Action_Type, "rbac.Operations.Action.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_VIEW" },
  { no: 2, name: "TYPE_EDIT" },
  { no: 3, name: "TYPE_SUGGEST_EDIT" },
  { no: 4, name: "TYPE_SUGGEST_APPROVE" },
  { no: 5, name: "TYPE_SUGGEST_REJECT" },
  { no: 6, name: "TYPE_CREATE" },
  { no: 7, name: "TYPE_DELETE" },
  { no: 8, name: "TYPE_HIDDEN_TX" },
  { no: 9, name: "TYPE_INIT" },
]);

/**
 * @generated from message rbac.Operations.Membership
 */
export class Operations_Membership extends Message<Operations_Membership> {
  /**
   * @generated from field: bool view = 1;
   */
  view = false;

  /**
   * @generated from field: bool edit = 2;
   */
  edit = false;

  constructor(data?: PartialMessage<Operations_Membership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.Operations.Membership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "view", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operations_Membership {
    return new Operations_Membership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operations_Membership {
    return new Operations_Membership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operations_Membership {
    return new Operations_Membership().fromJsonString(jsonString, options);
  }

  static equals(a: Operations_Membership | PlainMessage<Operations_Membership> | undefined, b: Operations_Membership | PlainMessage<Operations_Membership> | undefined): boolean {
    return proto3.util.equals(Operations_Membership, a, b);
  }
}

/**
 * @generated from message rbac.Operations.Object
 */
export class Operations_Object extends Message<Operations_Object> {
  /**
   * @generated from field: bool view = 1;
   */
  view = false;

  /**
   * @generated from field: bool create = 2;
   */
  create = false;

  /**
   * @generated from field: bool delete = 3;
   */
  delete = false;

  /**
   * @generated from field: bool hidden_txs = 4;
   */
  hiddenTxs = false;

  constructor(data?: PartialMessage<Operations_Object>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.Operations.Object";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "view", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "delete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "hidden_txs", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operations_Object {
    return new Operations_Object().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operations_Object {
    return new Operations_Object().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operations_Object {
    return new Operations_Object().fromJsonString(jsonString, options);
  }

  static equals(a: Operations_Object | PlainMessage<Operations_Object> | undefined, b: Operations_Object | PlainMessage<Operations_Object> | undefined): boolean {
    return proto3.util.equals(Operations_Object, a, b);
  }
}

/**
 * @generated from message rbac.Operations.ObjectField
 */
export class Operations_ObjectField extends Message<Operations_ObjectField> {
  /**
   * @generated from field: bool view = 1;
   */
  view = false;

  /**
   * @generated from field: bool edit = 2;
   */
  edit = false;

  /**
   * @generated from field: bool suggest_edit = 3;
   */
  suggestEdit = false;

  /**
   * @generated from field: bool suggest_approve = 4;
   */
  suggestApprove = false;

  /**
   * @generated from field: bool suggest_reject = 5;
   */
  suggestReject = false;

  constructor(data?: PartialMessage<Operations_ObjectField>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.Operations.ObjectField";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "view", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "suggest_edit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "suggest_approve", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "suggest_reject", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operations_ObjectField {
    return new Operations_ObjectField().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operations_ObjectField {
    return new Operations_ObjectField().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operations_ObjectField {
    return new Operations_ObjectField().fromJsonString(jsonString, options);
  }

  static equals(a: Operations_ObjectField | PlainMessage<Operations_ObjectField> | undefined, b: Operations_ObjectField | PlainMessage<Operations_ObjectField> | undefined): boolean {
    return proto3.util.equals(Operations_ObjectField, a, b);
  }
}

/**
 * This message is the tree node for operations on the state object
 *
 * @generated from message rbac.Operations.PathRolePermission
 */
export class Operations_PathRolePermission extends Message<Operations_PathRolePermission> {
  /**
   * The path is a sub path of a field mask
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * The key is a valid sub path in the collection object descriptor
   *
   * @generated from field: map<string, rbac.Operations.PathRolePermission> sub_paths = 2;
   */
  subPaths: { [key: string]: Operations_PathRolePermission } = {};

  /**
   * The Key must be a valid role id defined in the roles map
   *
   * @generated from field: map<int32, rbac.Operations.ObjectField> acl = 3;
   */
  acl: { [key: number]: Operations_ObjectField } = {};

  constructor(data?: PartialMessage<Operations_PathRolePermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.Operations.PathRolePermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_paths", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Operations_PathRolePermission} },
    { no: 3, name: "acl", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: Operations_ObjectField} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operations_PathRolePermission {
    return new Operations_PathRolePermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operations_PathRolePermission {
    return new Operations_PathRolePermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operations_PathRolePermission {
    return new Operations_PathRolePermission().fromJsonString(jsonString, options);
  }

  static equals(a: Operations_PathRolePermission | PlainMessage<Operations_PathRolePermission> | undefined, b: Operations_PathRolePermission | PlainMessage<Operations_PathRolePermission> | undefined): boolean {
    return proto3.util.equals(Operations_PathRolePermission, a, b);
  }
}

/**
 * Users are a special type of object
 *
 * @generated from message rbac.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: rbac.User.Id id = 1;
   */
  id?: User_Id;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Key is the collectionID
   *
   * @generated from field: map<string, int32> roles = 3;
   */
  roles: { [key: string]: number } = {};

  /**
   * @generated from field: google.protobuf.Struct metadata = 4;
   */
  metadata?: Struct;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: User_Id },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "roles", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
    { no: 4, name: "metadata", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * The key for the ledger
 *
 * @generated from message rbac.User.Id
 */
export class User_Id extends Message<User_Id> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<User_Id>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.User.Id";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User_Id {
    return new User_Id().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User_Id {
    return new User_Id().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User_Id {
    return new User_Id().fromJsonString(jsonString, options);
  }

  static equals(a: User_Id | PlainMessage<User_Id> | undefined, b: User_Id | PlainMessage<User_Id> | undefined): boolean {
    return proto3.util.equals(User_Id, a, b);
  }
}

/**
 * @generated from message rbac.User.List
 */
export class User_List extends Message<User_List> {
  /**
   * @generated from field: repeated rbac.User items = 1;
   */
  items: User[] = [];

  constructor(data?: PartialMessage<User_List>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.User.List";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User_List {
    return new User_List().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User_List {
    return new User_List().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User_List {
    return new User_List().fromJsonString(jsonString, options);
  }

  static equals(a: User_List | PlainMessage<User_List> | undefined, b: User_List | PlainMessage<User_List> | undefined): boolean {
    return proto3.util.equals(User_List, a, b);
  }
}

