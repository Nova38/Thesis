// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file rbac/example/nested.proto (package example, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SimpleMessage } from "./simple_pb.js";

/**
 * @generated from message example.NestedMessage
 */
export class NestedMessage extends Message<NestedMessage> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: example.SimpleMessage simple_message = 2;
   */
  simpleMessage?: SimpleMessage;

  constructor(data?: PartialMessage<NestedMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.NestedMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "simple_message", kind: "message", T: SimpleMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NestedMessage {
    return new NestedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NestedMessage {
    return new NestedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NestedMessage {
    return new NestedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: NestedMessage | PlainMessage<NestedMessage> | undefined, b: NestedMessage | PlainMessage<NestedMessage> | undefined): boolean {
    return proto3.util.equals(NestedMessage, a, b);
  }
}

