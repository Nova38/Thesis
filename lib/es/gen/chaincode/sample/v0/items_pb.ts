// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file chaincode/sample/v0/items.proto (package sample, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message sample.Item
 */
export class Item extends Message<Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int32 quantity = 3;
   */
  quantity = 0;

  constructor(data?: PartialMessage<Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sample.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item {
    return new Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJsonString(jsonString, options);
  }

  static equals(a: Item | PlainMessage<Item> | undefined, b: Item | PlainMessage<Item> | undefined): boolean {
    return proto3.util.equals(Item, a, b);
  }
}

/**
 * @generated from message sample.Group
 */
export class Group extends Message<Group> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated sample.Item items = 2;
   */
  items: Item[] = [];

  constructor(data?: PartialMessage<Group>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sample.Group";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "items", kind: "message", T: Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Group {
    return new Group().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Group {
    return new Group().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Group {
    return new Group().fromJsonString(jsonString, options);
  }

  static equals(a: Group | PlainMessage<Group> | undefined, b: Group | PlainMessage<Group> | undefined): boolean {
    return proto3.util.equals(Group, a, b);
  }
}

/**
 * @generated from message sample.Person
 */
export class Person extends Message<Person> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 age = 2;
   */
  age = 0;

  /**
   * @generated from field: repeated string friends = 3;
   */
  friends: string[] = [];

  /**
   * @generated from field: repeated sample.Group groups = 4;
   */
  groups: Group[] = [];

  constructor(data?: PartialMessage<Person>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sample.Person";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "age", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "friends", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "groups", kind: "message", T: Group, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Person {
    return new Person().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Person {
    return new Person().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Person {
    return new Person().fromJsonString(jsonString, options);
  }

  static equals(a: Person | PlainMessage<Person> | undefined, b: Person | PlainMessage<Person> | undefined): boolean {
    return proto3.util.equals(Person, a, b);
  }
}

/**
 * @generated from message sample.Book
 */
export class Book extends Message<Book> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string isbn = 2;
   */
  isbn = "";

  /**
   * @generated from field: string book_title = 3;
   */
  bookTitle = "";

  /**
   * @generated from field: string author = 4;
   */
  author = "";

  /**
   * @generated from field: int32 year = 5;
   */
  year = 0;

  /**
   * @generated from field: string publisher = 6;
   */
  publisher = "";

  /**
   * @generated from field: string language = 7;
   */
  language = "";

  /**
   * @generated from field: string description = 8;
   */
  description = "";

  constructor(data?: PartialMessage<Book>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sample.Book";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "isbn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "book_title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "year", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "publisher", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Book {
    return new Book().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Book {
    return new Book().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Book {
    return new Book().fromJsonString(jsonString, options);
  }

  static equals(a: Book | PlainMessage<Book> | undefined, b: Book | PlainMessage<Book> | undefined): boolean {
    return proto3.util.equals(Book, a, b);
  }
}

/**
 * @generated from message sample.Degree
 */
export class Degree extends Message<Degree> {
  /**
   * @generated from field: string degree_name = 1;
   */
  degreeName = "";

  /**
   * @generated from field: string institute = 2;
   */
  institute = "";

  /**
   * @generated from field: google.protobuf.Timestamp degree_date = 3;
   */
  degreeDate?: Timestamp;

  constructor(data?: PartialMessage<Degree>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sample.Degree";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "degree_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "institute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "degree_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Degree {
    return new Degree().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Degree {
    return new Degree().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Degree {
    return new Degree().fromJsonString(jsonString, options);
  }

  static equals(a: Degree | PlainMessage<Degree> | undefined, b: Degree | PlainMessage<Degree> | undefined): boolean {
    return proto3.util.equals(Degree, a, b);
  }
}

/**
 * @generated from message sample.Awards
 */
export class Awards extends Message<Awards> {
  /**
   * @generated from field: string award_name = 1;
   */
  awardName = "";

  /**
   * @generated from field: google.protobuf.Timestamp award_date = 2;
   */
  awardDate?: Timestamp;

  /**
   * @generated from field: string award_description = 3;
   */
  awardDescription = "";

  constructor(data?: PartialMessage<Awards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sample.Awards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "award_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "award_date", kind: "message", T: Timestamp },
    { no: 3, name: "award_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Awards {
    return new Awards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Awards {
    return new Awards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Awards {
    return new Awards().fromJsonString(jsonString, options);
  }

  static equals(a: Awards | PlainMessage<Awards> | undefined, b: Awards | PlainMessage<Awards> | undefined): boolean {
    return proto3.util.equals(Awards, a, b);
  }
}

/**
 * @generated from message sample.Author
 */
export class Author extends Message<Author> {
  /**
   * @generated from field: string author_id = 1;
   */
  authorId = "";

  /**
   * @generated from field: string author_name = 2;
   */
  authorName = "";

  /**
   * @generated from field: repeated sample.Book books = 3;
   */
  books: Book[] = [];

  /**
   * Key: degree_name
   *
   * @generated from field: map<string, sample.Degree> degrees = 4;
   */
  degrees: { [key: string]: Degree } = {};

  constructor(data?: PartialMessage<Author>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sample.Author";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "author_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "books", kind: "message", T: Book, repeated: true },
    { no: 4, name: "degrees", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Degree} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Author {
    return new Author().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Author {
    return new Author().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Author {
    return new Author().fromJsonString(jsonString, options);
  }

  static equals(a: Author | PlainMessage<Author> | undefined, b: Author | PlainMessage<Author> | undefined): boolean {
    return proto3.util.equals(Author, a, b);
  }
}

