// @generated by protoc-gen-reg v1 with parameter "target=ts"
// @generated from file chaincode/auth/common/generic.proto (package auth.common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Contract } from "@hyperledger/fabric-gateway";
import type { JsonValue } from "@bufbuild/protobuf";
import { Empty, IMessageTypeRegistry, JsonWriteStringOptions } from "@bufbuild/protobuf";
import { AuthorizeOperationRequest, AuthorizeOperationResponse, CreateRequest, CreateResponse, DeleteRequest, DeleteResponse, GetCurrentUserResponse, GetRequest, GetResponse, HiddenTxRequest, HiddenTxResponse, HideTxRequest, HideTxResponse, HistoryRequest, HistoryResponse, ListByAttrsRequest, ListByAttrsResponse, ListByCollectionRequest, ListByCollectionResponse, ListRequest, ListResponse, SuggestionApproveRequest, SuggestionApproveResponse, SuggestionByPartialKeyRequest, SuggestionByPartialKeyResponse, SuggestionCreateRequest, SuggestionCreateResponse, SuggestionDeleteRequest, SuggestionDeleteResponse, SuggestionListByCollectionRequest, SuggestionListByCollectionResponse, SuggestionRequest, SuggestionResponse, UnHideTxRequest, UnHideTxResponse, UpdateRequest, UpdateResponse } from "./generic_pb.js";

/**
 * @generated from service auth.common.GenericService
 */
export class GenericServiceClient {
    private contract: Contract;
    private jsonWriteOptions:Partial<JsonWriteStringOptions> = {};

    constructor(contract: Contract, registry: IMessageTypeRegistry) {
        this.contract = contract;
    }


    /**
     * ══════════════════════════════════ Helper ═════════════════════════════════════
     * ────────────────────────────────── Query ──────────────────────────────────────
     * rpc GetAllTypes(google.protobuf.Empty) returns (GetAllTypesResponse) {
     *   option (auth.transaction_type) = TRANSACTION_TYPE_QUERY;
     *   option (auth.operation) = {action: ACTION_UTILITY};
     * }
     *
     * @generated from rpc auth.common.GenericService.GetCurrentUser
     */
    async getCurrentUser(request: Empty, evaluate: bool ): Promise< GetCurrentUserResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "GetCurrentUser",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "GetCurrentUser",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             GetCurrentUserResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.AuthorizeOperation
     */
    async authorizeOperation(request: AuthorizeOperationRequest, evaluate: bool ): Promise< AuthorizeOperationResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "AuthorizeOperation",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "AuthorizeOperation",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             AuthorizeOperationResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.Get
     */
    async get(request: GetRequest, evaluate: bool ): Promise< GetResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "Get",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "Get",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             GetResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.List
     */
    async list(request: ListRequest, evaluate: bool ): Promise< ListResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "List",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "List",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             ListResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.ListByCollection
     */
    async listByCollection(request: ListByCollectionRequest, evaluate: bool ): Promise< ListByCollectionResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "ListByCollection",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "ListByCollection",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             ListByCollectionResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.ListByAttrs
     */
    async listByAttrs(request: ListByAttrsRequest, evaluate: bool ): Promise< ListByAttrsResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "ListByAttrs",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "ListByAttrs",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             ListByAttrsResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.Create
     */
    async create(request: CreateRequest, evaluate: bool ): Promise< CreateResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "Create",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "Create",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             CreateResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.Update
     */
    async update(request: UpdateRequest, evaluate: bool ): Promise< UpdateResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "Update",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "Update",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             UpdateResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.Delete
     */
    async delete(request: DeleteRequest, evaluate: bool ): Promise< DeleteResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "Delete",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "Delete",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             DeleteResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.History
     */
    async history(request: HistoryRequest, evaluate: bool ): Promise< HistoryResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "History",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "History",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             HistoryResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.HiddenTx
     */
    async hiddenTx(request: HiddenTxRequest, evaluate: bool ): Promise< HiddenTxResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "HiddenTx",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "HiddenTx",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             HiddenTxResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.HideTx
     */
    async hideTx(request: HideTxRequest, evaluate: bool ): Promise< HideTxResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "HideTx",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "HideTx",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             HideTxResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.UnHideTx
     */
    async unHideTx(request: UnHideTxRequest, evaluate: bool ): Promise< UnHideTxResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "UnHideTx",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "UnHideTx",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             UnHideTxResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.Suggestion
     */
    async suggestion(request: SuggestionRequest, evaluate: bool ): Promise< SuggestionResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "Suggestion",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "Suggestion",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SuggestionResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.SuggestionListByCollection
     */
    async suggestionListByCollection(request: SuggestionListByCollectionRequest, evaluate: bool ): Promise< SuggestionListByCollectionResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SuggestionListByCollection",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SuggestionListByCollection",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SuggestionListByCollectionResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.SuggestionByPartialKey
     */
    async suggestionByPartialKey(request: SuggestionByPartialKeyRequest, evaluate: bool ): Promise< SuggestionByPartialKeyResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SuggestionByPartialKey",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SuggestionByPartialKey",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SuggestionByPartialKeyResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * ──────────────────────────────── Invoke ───────────────────────────────────────
     *
     * @generated from rpc auth.common.GenericService.SuggestionCreate
     */
    async suggestionCreate(request: SuggestionCreateRequest, evaluate: bool ): Promise< SuggestionCreateResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SuggestionCreate",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SuggestionCreate",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SuggestionCreateResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.SuggestionDelete
     */
    async suggestionDelete(request: SuggestionDeleteRequest, evaluate: bool ): Promise< SuggestionDeleteResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SuggestionDelete",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SuggestionDelete",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SuggestionDeleteResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc auth.common.GenericService.SuggestionApprove
     */
    async suggestionApprove(request: SuggestionApproveRequest, evaluate: bool ): Promise< SuggestionApproveResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SuggestionApprove",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SuggestionApprove",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SuggestionApproveResponse.fromJson(data as JsonValue)
        );
    }
}
