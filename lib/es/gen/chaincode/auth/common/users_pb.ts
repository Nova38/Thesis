// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file chaincode/auth/common/users.proto (package auth.common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { HiddenTx, HiddenTxList, History, User } from "../../../auth/v1/auth_pb.js";

/**
 * ──────────────────-- Query ─────────────────────
 *
 * @generated from message auth.common.UserGetCurrentResponse
 */
export class UserGetCurrentResponse extends Message<UserGetCurrentResponse> {
  /**
   * @generated from field: auth.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserGetCurrentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserGetCurrentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetCurrentResponse {
    return new UserGetCurrentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetCurrentResponse {
    return new UserGetCurrentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetCurrentResponse {
    return new UserGetCurrentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetCurrentResponse | PlainMessage<UserGetCurrentResponse> | undefined, b: UserGetCurrentResponse | PlainMessage<UserGetCurrentResponse> | undefined): boolean {
    return proto3.util.equals(UserGetCurrentResponse, a, b);
  }
}

/**
 * @generated from message auth.common.UserGetCurrentIdResponse
 */
export class UserGetCurrentIdResponse extends Message<UserGetCurrentIdResponse> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<UserGetCurrentIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserGetCurrentIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetCurrentIdResponse {
    return new UserGetCurrentIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetCurrentIdResponse {
    return new UserGetCurrentIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetCurrentIdResponse {
    return new UserGetCurrentIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetCurrentIdResponse | PlainMessage<UserGetCurrentIdResponse> | undefined, b: UserGetCurrentIdResponse | PlainMessage<UserGetCurrentIdResponse> | undefined): boolean {
    return proto3.util.equals(UserGetCurrentIdResponse, a, b);
  }
}

/**
 * @generated from message auth.common.UserGetRequest
 */
export class UserGetRequest extends Message<UserGetRequest> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<UserGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetRequest {
    return new UserGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetRequest {
    return new UserGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetRequest {
    return new UserGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetRequest | PlainMessage<UserGetRequest> | undefined, b: UserGetRequest | PlainMessage<UserGetRequest> | undefined): boolean {
    return proto3.util.equals(UserGetRequest, a, b);
  }
}

/**
 * @generated from message auth.common.UserGetResponse
 */
export class UserGetResponse extends Message<UserGetResponse> {
  /**
   * @generated from field: auth.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetResponse {
    return new UserGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetResponse {
    return new UserGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetResponse {
    return new UserGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetResponse | PlainMessage<UserGetResponse> | undefined, b: UserGetResponse | PlainMessage<UserGetResponse> | undefined): boolean {
    return proto3.util.equals(UserGetResponse, a, b);
  }
}

/**
 * @generated from message auth.common.UserGetListRequest
 */
export class UserGetListRequest extends Message<UserGetListRequest> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<UserGetListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserGetListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetListRequest {
    return new UserGetListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetListRequest {
    return new UserGetListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetListRequest {
    return new UserGetListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetListRequest | PlainMessage<UserGetListRequest> | undefined, b: UserGetListRequest | PlainMessage<UserGetListRequest> | undefined): boolean {
    return proto3.util.equals(UserGetListRequest, a, b);
  }
}

/**
 * @generated from message auth.common.UserGetListResponse
 */
export class UserGetListResponse extends Message<UserGetListResponse> {
  /**
   * @generated from field: repeated auth.User users = 1;
   */
  users: User[] = [];

  /**
   * @generated from field: string bookmark = 2;
   */
  bookmark = "";

  constructor(data?: PartialMessage<UserGetListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserGetListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
    { no: 2, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetListResponse {
    return new UserGetListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetListResponse {
    return new UserGetListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetListResponse {
    return new UserGetListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetListResponse | PlainMessage<UserGetListResponse> | undefined, b: UserGetListResponse | PlainMessage<UserGetListResponse> | undefined): boolean {
    return proto3.util.equals(UserGetListResponse, a, b);
  }
}

/**
 * UserGetHistory
 *
 * @generated from message auth.common.UserGetHistoryRequest
 */
export class UserGetHistoryRequest extends Message<UserGetHistoryRequest> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: bool show_hidden = 3;
   */
  showHidden = false;

  constructor(data?: PartialMessage<UserGetHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserGetHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "show_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetHistoryRequest {
    return new UserGetHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetHistoryRequest {
    return new UserGetHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetHistoryRequest {
    return new UserGetHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetHistoryRequest | PlainMessage<UserGetHistoryRequest> | undefined, b: UserGetHistoryRequest | PlainMessage<UserGetHistoryRequest> | undefined): boolean {
    return proto3.util.equals(UserGetHistoryRequest, a, b);
  }
}

/**
 * @generated from message auth.common.UserGetHistoryResponse
 */
export class UserGetHistoryResponse extends Message<UserGetHistoryResponse> {
  /**
   * @generated from field: auth.User user = 1;
   */
  user?: User;

  /**
   * @generated from field: auth.History history = 3;
   */
  history?: History;

  constructor(data?: PartialMessage<UserGetHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserGetHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 3, name: "history", kind: "message", T: History },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetHistoryResponse {
    return new UserGetHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetHistoryResponse {
    return new UserGetHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetHistoryResponse {
    return new UserGetHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetHistoryResponse | PlainMessage<UserGetHistoryResponse> | undefined, b: UserGetHistoryResponse | PlainMessage<UserGetHistoryResponse> | undefined): boolean {
    return proto3.util.equals(UserGetHistoryResponse, a, b);
  }
}

/**
 * UserGetHiddenTx
 *
 * @generated from message auth.common.UserGetHiddenTxRequest
 */
export class UserGetHiddenTxRequest extends Message<UserGetHiddenTxRequest> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<UserGetHiddenTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserGetHiddenTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetHiddenTxRequest {
    return new UserGetHiddenTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetHiddenTxRequest {
    return new UserGetHiddenTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetHiddenTxRequest {
    return new UserGetHiddenTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetHiddenTxRequest | PlainMessage<UserGetHiddenTxRequest> | undefined, b: UserGetHiddenTxRequest | PlainMessage<UserGetHiddenTxRequest> | undefined): boolean {
    return proto3.util.equals(UserGetHiddenTxRequest, a, b);
  }
}

/**
 * @generated from message auth.common.UserGetHiddenTxResponse
 */
export class UserGetHiddenTxResponse extends Message<UserGetHiddenTxResponse> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: auth.HiddenTxList hidden_txs = 3;
   */
  hiddenTxs?: HiddenTxList;

  constructor(data?: PartialMessage<UserGetHiddenTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserGetHiddenTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "hidden_txs", kind: "message", T: HiddenTxList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetHiddenTxResponse {
    return new UserGetHiddenTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetHiddenTxResponse {
    return new UserGetHiddenTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetHiddenTxResponse {
    return new UserGetHiddenTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetHiddenTxResponse | PlainMessage<UserGetHiddenTxResponse> | undefined, b: UserGetHiddenTxResponse | PlainMessage<UserGetHiddenTxResponse> | undefined): boolean {
    return proto3.util.equals(UserGetHiddenTxResponse, a, b);
  }
}

/**
 * UserCreate
 *
 * @generated from message auth.common.UserCreateRequest
 */
export class UserCreateRequest extends Message<UserCreateRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<UserCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserCreateRequest {
    return new UserCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserCreateRequest {
    return new UserCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserCreateRequest {
    return new UserCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserCreateRequest | PlainMessage<UserCreateRequest> | undefined, b: UserCreateRequest | PlainMessage<UserCreateRequest> | undefined): boolean {
    return proto3.util.equals(UserCreateRequest, a, b);
  }
}

/**
 * @generated from message auth.common.UserCreateResponse
 */
export class UserCreateResponse extends Message<UserCreateResponse> {
  /**
   * @generated from field: auth.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserCreateResponse {
    return new UserCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserCreateResponse {
    return new UserCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserCreateResponse {
    return new UserCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserCreateResponse | PlainMessage<UserCreateResponse> | undefined, b: UserCreateResponse | PlainMessage<UserCreateResponse> | undefined): boolean {
    return proto3.util.equals(UserCreateResponse, a, b);
  }
}

/**
 * @generated from message auth.common.UserDeleteRequest
 */
export class UserDeleteRequest extends Message<UserDeleteRequest> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string reason = 3;
   */
  reason = "";

  constructor(data?: PartialMessage<UserDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDeleteRequest {
    return new UserDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDeleteRequest {
    return new UserDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDeleteRequest {
    return new UserDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserDeleteRequest | PlainMessage<UserDeleteRequest> | undefined, b: UserDeleteRequest | PlainMessage<UserDeleteRequest> | undefined): boolean {
    return proto3.util.equals(UserDeleteRequest, a, b);
  }
}

/**
 * @generated from message auth.common.UserDeleteResponse
 */
export class UserDeleteResponse extends Message<UserDeleteResponse> {
  /**
   * @generated from field: auth.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDeleteResponse {
    return new UserDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDeleteResponse {
    return new UserDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDeleteResponse {
    return new UserDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserDeleteResponse | PlainMessage<UserDeleteResponse> | undefined, b: UserDeleteResponse | PlainMessage<UserDeleteResponse> | undefined): boolean {
    return proto3.util.equals(UserDeleteResponse, a, b);
  }
}

/**
 * @generated from message auth.common.UserUpdateRequest
 */
export class UserUpdateRequest extends Message<UserUpdateRequest> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<UserUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserUpdateRequest | PlainMessage<UserUpdateRequest> | undefined, b: UserUpdateRequest | PlainMessage<UserUpdateRequest> | undefined): boolean {
    return proto3.util.equals(UserUpdateRequest, a, b);
  }
}

/**
 * @generated from message auth.common.UserUpdateResponse
 */
export class UserUpdateResponse extends Message<UserUpdateResponse> {
  /**
   * @generated from field: auth.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserUpdateResponse | PlainMessage<UserUpdateResponse> | undefined, b: UserUpdateResponse | PlainMessage<UserUpdateResponse> | undefined): boolean {
    return proto3.util.equals(UserUpdateResponse, a, b);
  }
}

/**
 * @generated from message auth.common.UserHideTxRequest
 */
export class UserHideTxRequest extends Message<UserHideTxRequest> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: auth.HiddenTx hidden_tx = 3;
   */
  hiddenTx?: HiddenTx;

  constructor(data?: PartialMessage<UserHideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserHideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "hidden_tx", kind: "message", T: HiddenTx },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserHideTxRequest {
    return new UserHideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserHideTxRequest {
    return new UserHideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserHideTxRequest {
    return new UserHideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserHideTxRequest | PlainMessage<UserHideTxRequest> | undefined, b: UserHideTxRequest | PlainMessage<UserHideTxRequest> | undefined): boolean {
    return proto3.util.equals(UserHideTxRequest, a, b);
  }
}

/**
 * @generated from message auth.common.UserHideTxResponse
 */
export class UserHideTxResponse extends Message<UserHideTxResponse> {
  /**
   * @generated from field: auth.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserHideTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UserHideTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserHideTxResponse {
    return new UserHideTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserHideTxResponse {
    return new UserHideTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserHideTxResponse {
    return new UserHideTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserHideTxResponse | PlainMessage<UserHideTxResponse> | undefined, b: UserHideTxResponse | PlainMessage<UserHideTxResponse> | undefined): boolean {
    return proto3.util.equals(UserHideTxResponse, a, b);
  }
}

