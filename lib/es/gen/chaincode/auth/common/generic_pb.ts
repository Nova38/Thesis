// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file chaincode/auth/common/generic.proto (package auth.common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { HiddenTx, HiddenTxList, History, Object$, Suggestion } from "../../../auth/v1/auth_pb.js";

/**
 * Get
 *
 * @generated from message auth.common.GetRequest
 */
export class GetRequest extends Message<GetRequest> {
  /**
   * @generated from field: auth.Object object = 3;
   */
  object?: Object$;

  constructor(data?: PartialMessage<GetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.GetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequest {
    return new GetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequest {
    return new GetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequest {
    return new GetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRequest | PlainMessage<GetRequest> | undefined, b: GetRequest | PlainMessage<GetRequest> | undefined): boolean {
    return proto3.util.equals(GetRequest, a, b);
  }
}

/**
 * @generated from message auth.common.GetResponse
 */
export class GetResponse extends Message<GetResponse> {
  /**
   * @generated from field: auth.Object object = 1;
   */
  object?: Object$;

  constructor(data?: PartialMessage<GetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.GetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResponse {
    return new GetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResponse {
    return new GetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResponse {
    return new GetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetResponse | PlainMessage<GetResponse> | undefined, b: GetResponse | PlainMessage<GetResponse> | undefined): boolean {
    return proto3.util.equals(GetResponse, a, b);
  }
}

/**
 * @generated from message auth.common.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: auth.Object object = 3;
   */
  object?: Object$;

  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * @generated from message auth.common.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: repeated auth.Object objects = 2;
   */
  objects: Object$[] = [];

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "objects", kind: "message", T: Object$, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

/**
 * @generated from message auth.common.ListByCollectionRequest
 */
export class ListByCollectionRequest extends Message<ListByCollectionRequest> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: auth.Object object = 3;
   */
  object?: Object$;

  constructor(data?: PartialMessage<ListByCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.ListByCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListByCollectionRequest {
    return new ListByCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListByCollectionRequest {
    return new ListByCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListByCollectionRequest {
    return new ListByCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListByCollectionRequest | PlainMessage<ListByCollectionRequest> | undefined, b: ListByCollectionRequest | PlainMessage<ListByCollectionRequest> | undefined): boolean {
    return proto3.util.equals(ListByCollectionRequest, a, b);
  }
}

/**
 * @generated from message auth.common.ListByCollectionResponse
 */
export class ListByCollectionResponse extends Message<ListByCollectionResponse> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: repeated auth.Object objects = 2;
   */
  objects: Object$[] = [];

  constructor(data?: PartialMessage<ListByCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.ListByCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "objects", kind: "message", T: Object$, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListByCollectionResponse {
    return new ListByCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListByCollectionResponse {
    return new ListByCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListByCollectionResponse {
    return new ListByCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListByCollectionResponse | PlainMessage<ListByCollectionResponse> | undefined, b: ListByCollectionResponse | PlainMessage<ListByCollectionResponse> | undefined): boolean {
    return proto3.util.equals(ListByCollectionResponse, a, b);
  }
}

/**
 * @generated from message auth.common.ListByAttrsRequest
 */
export class ListByAttrsRequest extends Message<ListByAttrsRequest> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: auth.Object object = 3;
   */
  object?: Object$;

  /**
   * @generated from field: int32 num_attrs = 4;
   */
  numAttrs = 0;

  constructor(data?: PartialMessage<ListByAttrsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.ListByAttrsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "object", kind: "message", T: Object$ },
    { no: 4, name: "num_attrs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListByAttrsRequest {
    return new ListByAttrsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListByAttrsRequest {
    return new ListByAttrsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListByAttrsRequest {
    return new ListByAttrsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListByAttrsRequest | PlainMessage<ListByAttrsRequest> | undefined, b: ListByAttrsRequest | PlainMessage<ListByAttrsRequest> | undefined): boolean {
    return proto3.util.equals(ListByAttrsRequest, a, b);
  }
}

/**
 * @generated from message auth.common.ListByAttrsResponse
 */
export class ListByAttrsResponse extends Message<ListByAttrsResponse> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: repeated auth.Object objects = 2;
   */
  objects: Object$[] = [];

  constructor(data?: PartialMessage<ListByAttrsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.ListByAttrsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "objects", kind: "message", T: Object$, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListByAttrsResponse {
    return new ListByAttrsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListByAttrsResponse {
    return new ListByAttrsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListByAttrsResponse {
    return new ListByAttrsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListByAttrsResponse | PlainMessage<ListByAttrsResponse> | undefined, b: ListByAttrsResponse | PlainMessage<ListByAttrsResponse> | undefined): boolean {
    return proto3.util.equals(ListByAttrsResponse, a, b);
  }
}

/**
 * History
 *
 * @generated from message auth.common.HistoryRequest
 */
export class HistoryRequest extends Message<HistoryRequest> {
  /**
   * @generated from field: auth.Object object = 1;
   */
  object?: Object$;

  constructor(data?: PartialMessage<HistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.HistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HistoryRequest {
    return new HistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HistoryRequest {
    return new HistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HistoryRequest {
    return new HistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HistoryRequest | PlainMessage<HistoryRequest> | undefined, b: HistoryRequest | PlainMessage<HistoryRequest> | undefined): boolean {
    return proto3.util.equals(HistoryRequest, a, b);
  }
}

/**
 * @generated from message auth.common.HistoryResponse
 */
export class HistoryResponse extends Message<HistoryResponse> {
  /**
   * repeated auth. s = 1;
   *
   * @generated from field: auth.History history = 2;
   */
  history?: History;

  constructor(data?: PartialMessage<HistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.HistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "history", kind: "message", T: History },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HistoryResponse {
    return new HistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HistoryResponse {
    return new HistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HistoryResponse {
    return new HistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HistoryResponse | PlainMessage<HistoryResponse> | undefined, b: HistoryResponse | PlainMessage<HistoryResponse> | undefined): boolean {
    return proto3.util.equals(HistoryResponse, a, b);
  }
}

/**
 * HiddenTx
 *
 * @generated from message auth.common.HiddenTxRequest
 */
export class HiddenTxRequest extends Message<HiddenTxRequest> {
  /**
   * @generated from field: auth.Object object = 1;
   */
  object?: Object$;

  constructor(data?: PartialMessage<HiddenTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.HiddenTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HiddenTxRequest {
    return new HiddenTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HiddenTxRequest {
    return new HiddenTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HiddenTxRequest {
    return new HiddenTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HiddenTxRequest | PlainMessage<HiddenTxRequest> | undefined, b: HiddenTxRequest | PlainMessage<HiddenTxRequest> | undefined): boolean {
    return proto3.util.equals(HiddenTxRequest, a, b);
  }
}

/**
 * @generated from message auth.common.HiddenTxResponse
 */
export class HiddenTxResponse extends Message<HiddenTxResponse> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: repeated auth.HiddenTx hidden_txs = 2;
   */
  hiddenTxs: HiddenTx[] = [];

  constructor(data?: PartialMessage<HiddenTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.HiddenTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hidden_txs", kind: "message", T: HiddenTx, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HiddenTxResponse {
    return new HiddenTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HiddenTxResponse {
    return new HiddenTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HiddenTxResponse {
    return new HiddenTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HiddenTxResponse | PlainMessage<HiddenTxResponse> | undefined, b: HiddenTxResponse | PlainMessage<HiddenTxResponse> | undefined): boolean {
    return proto3.util.equals(HiddenTxResponse, a, b);
  }
}

/**
 * -------------------------------- Invoke -------------------------------------
 * Create
 *
 * @generated from message auth.common.CreateRequest
 */
export class CreateRequest extends Message<CreateRequest> {
  /**
   * @generated from field: auth.Object object = 2;
   */
  object?: Object$;

  constructor(data?: PartialMessage<CreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRequest {
    return new CreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRequest | PlainMessage<CreateRequest> | undefined, b: CreateRequest | PlainMessage<CreateRequest> | undefined): boolean {
    return proto3.util.equals(CreateRequest, a, b);
  }
}

/**
 * @generated from message auth.common.CreateResponse
 */
export class CreateResponse extends Message<CreateResponse> {
  /**
   * @generated from field: auth.Object object = 2;
   */
  object?: Object$;

  constructor(data?: PartialMessage<CreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateResponse {
    return new CreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateResponse | PlainMessage<CreateResponse> | undefined, b: CreateResponse | PlainMessage<CreateResponse> | undefined): boolean {
    return proto3.util.equals(CreateResponse, a, b);
  }
}

/**
 * @generated from message auth.common.UpdateRequest
 */
export class UpdateRequest extends Message<UpdateRequest> {
  /**
   * @generated from field: auth.Object object = 2;
   */
  object?: Object$;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "object", kind: "message", T: Object$ },
    { no: 3, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRequest {
    return new UpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRequest | PlainMessage<UpdateRequest> | undefined, b: UpdateRequest | PlainMessage<UpdateRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRequest, a, b);
  }
}

/**
 * @generated from message auth.common.UpdateResponse
 */
export class UpdateResponse extends Message<UpdateResponse> {
  /**
   * @generated from field: auth.Object object = 2;
   */
  object?: Object$;

  constructor(data?: PartialMessage<UpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResponse {
    return new UpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResponse | PlainMessage<UpdateResponse> | undefined, b: UpdateResponse | PlainMessage<UpdateResponse> | undefined): boolean {
    return proto3.util.equals(UpdateResponse, a, b);
  }
}

/**
 * @generated from message auth.common.DeleteRequest
 */
export class DeleteRequest extends Message<DeleteRequest> {
  /**
   * @generated from field: auth.Object object = 1;
   */
  object?: Object$;

  /**
   * @generated from field: string reason = 4;
   */
  reason = "";

  constructor(data?: PartialMessage<DeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.DeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
    { no: 4, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRequest {
    return new DeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRequest | PlainMessage<DeleteRequest> | undefined, b: DeleteRequest | PlainMessage<DeleteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRequest, a, b);
  }
}

/**
 * @generated from message auth.common.DeleteResponse
 */
export class DeleteResponse extends Message<DeleteResponse> {
  /**
   * @generated from field: auth.Object object = 2;
   */
  object?: Object$;

  constructor(data?: PartialMessage<DeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.DeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteResponse {
    return new DeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteResponse | PlainMessage<DeleteResponse> | undefined, b: DeleteResponse | PlainMessage<DeleteResponse> | undefined): boolean {
    return proto3.util.equals(DeleteResponse, a, b);
  }
}

/**
 * @generated from message auth.common.HideTxRequest
 */
export class HideTxRequest extends Message<HideTxRequest> {
  /**
   * @generated from field: auth.Object object = 1;
   */
  object?: Object$;

  /**
   * @generated from field: auth.HiddenTx hidden_tx = 2;
   */
  hiddenTx?: HiddenTx;

  constructor(data?: PartialMessage<HideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.HideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
    { no: 2, name: "hidden_tx", kind: "message", T: HiddenTx },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HideTxRequest {
    return new HideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HideTxRequest {
    return new HideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HideTxRequest {
    return new HideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HideTxRequest | PlainMessage<HideTxRequest> | undefined, b: HideTxRequest | PlainMessage<HideTxRequest> | undefined): boolean {
    return proto3.util.equals(HideTxRequest, a, b);
  }
}

/**
 * @generated from message auth.common.HideTxResponse
 */
export class HideTxResponse extends Message<HideTxResponse> {
  /**
   * @generated from field: auth.Object object = 1;
   */
  object?: Object$;

  /**
   * @generated from field: auth.HiddenTxList hidden_txs = 2;
   */
  hiddenTxs?: HiddenTxList;

  constructor(data?: PartialMessage<HideTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.HideTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
    { no: 2, name: "hidden_txs", kind: "message", T: HiddenTxList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HideTxResponse {
    return new HideTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HideTxResponse {
    return new HideTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HideTxResponse {
    return new HideTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HideTxResponse | PlainMessage<HideTxResponse> | undefined, b: HideTxResponse | PlainMessage<HideTxResponse> | undefined): boolean {
    return proto3.util.equals(HideTxResponse, a, b);
  }
}

/**
 * @generated from message auth.common.UnHideTxRequest
 */
export class UnHideTxRequest extends Message<UnHideTxRequest> {
  /**
   * @generated from field: auth.Object object = 1;
   */
  object?: Object$;

  /**
   * @generated from field: string tx_id = 2;
   */
  txId = "";

  constructor(data?: PartialMessage<UnHideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UnHideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
    { no: 2, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnHideTxRequest {
    return new UnHideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnHideTxRequest {
    return new UnHideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnHideTxRequest {
    return new UnHideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnHideTxRequest | PlainMessage<UnHideTxRequest> | undefined, b: UnHideTxRequest | PlainMessage<UnHideTxRequest> | undefined): boolean {
    return proto3.util.equals(UnHideTxRequest, a, b);
  }
}

/**
 * @generated from message auth.common.UnHideTxResponse
 */
export class UnHideTxResponse extends Message<UnHideTxResponse> {
  /**
   * @generated from field: auth.Object object = 1;
   */
  object?: Object$;

  /**
   * @generated from field: auth.HiddenTxList hidden_txs = 2;
   */
  hiddenTxs?: HiddenTxList;

  constructor(data?: PartialMessage<UnHideTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.UnHideTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
    { no: 2, name: "hidden_txs", kind: "message", T: HiddenTxList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnHideTxResponse {
    return new UnHideTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnHideTxResponse {
    return new UnHideTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnHideTxResponse {
    return new UnHideTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnHideTxResponse | PlainMessage<UnHideTxResponse> | undefined, b: UnHideTxResponse | PlainMessage<UnHideTxResponse> | undefined): boolean {
    return proto3.util.equals(UnHideTxResponse, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionRequest
 */
export class SuggestionRequest extends Message<SuggestionRequest> {
  /**
   * @generated from field: auth.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<SuggestionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionRequest {
    return new SuggestionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionRequest {
    return new SuggestionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionRequest {
    return new SuggestionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionRequest | PlainMessage<SuggestionRequest> | undefined, b: SuggestionRequest | PlainMessage<SuggestionRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionRequest, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionResponse
 */
export class SuggestionResponse extends Message<SuggestionResponse> {
  /**
   * @generated from field: auth.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<SuggestionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionResponse {
    return new SuggestionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionResponse {
    return new SuggestionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionResponse {
    return new SuggestionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionResponse | PlainMessage<SuggestionResponse> | undefined, b: SuggestionResponse | PlainMessage<SuggestionResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionResponse, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionListRequest
 */
export class SuggestionListRequest extends Message<SuggestionListRequest> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: auth.Object object = 3;
   */
  object?: Object$;

  constructor(data?: PartialMessage<SuggestionListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListRequest {
    return new SuggestionListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListRequest {
    return new SuggestionListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListRequest {
    return new SuggestionListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListRequest | PlainMessage<SuggestionListRequest> | undefined, b: SuggestionListRequest | PlainMessage<SuggestionListRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionListRequest, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionListResponse
 */
export class SuggestionListResponse extends Message<SuggestionListResponse> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: repeated auth.Suggestion suggestions = 2;
   */
  suggestions: Suggestion[] = [];

  constructor(data?: PartialMessage<SuggestionListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListResponse {
    return new SuggestionListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListResponse {
    return new SuggestionListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListResponse {
    return new SuggestionListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListResponse | PlainMessage<SuggestionListResponse> | undefined, b: SuggestionListResponse | PlainMessage<SuggestionListResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionListResponse, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionListByCollectionRequest
 */
export class SuggestionListByCollectionRequest extends Message<SuggestionListByCollectionRequest> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: auth.Object object = 3;
   */
  object?: Object$;

  constructor(data?: PartialMessage<SuggestionListByCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionListByCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListByCollectionRequest {
    return new SuggestionListByCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListByCollectionRequest {
    return new SuggestionListByCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListByCollectionRequest {
    return new SuggestionListByCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListByCollectionRequest | PlainMessage<SuggestionListByCollectionRequest> | undefined, b: SuggestionListByCollectionRequest | PlainMessage<SuggestionListByCollectionRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionListByCollectionRequest, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionListByCollectionResponse
 */
export class SuggestionListByCollectionResponse extends Message<SuggestionListByCollectionResponse> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: repeated auth.Suggestion suggestions = 2;
   */
  suggestions: Suggestion[] = [];

  constructor(data?: PartialMessage<SuggestionListByCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionListByCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListByCollectionResponse {
    return new SuggestionListByCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListByCollectionResponse {
    return new SuggestionListByCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListByCollectionResponse {
    return new SuggestionListByCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListByCollectionResponse | PlainMessage<SuggestionListByCollectionResponse> | undefined, b: SuggestionListByCollectionResponse | PlainMessage<SuggestionListByCollectionResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionListByCollectionResponse, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionListByObjectRequest
 */
export class SuggestionListByObjectRequest extends Message<SuggestionListByObjectRequest> {
  /**
   * @generated from field: auth.Object object = 1;
   */
  object?: Object$;

  constructor(data?: PartialMessage<SuggestionListByObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionListByObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListByObjectRequest {
    return new SuggestionListByObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListByObjectRequest {
    return new SuggestionListByObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListByObjectRequest {
    return new SuggestionListByObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListByObjectRequest | PlainMessage<SuggestionListByObjectRequest> | undefined, b: SuggestionListByObjectRequest | PlainMessage<SuggestionListByObjectRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionListByObjectRequest, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionListByObjectResponse
 */
export class SuggestionListByObjectResponse extends Message<SuggestionListByObjectResponse> {
  /**
   * @generated from field: repeated auth.Suggestion suggestions = 1;
   */
  suggestions: Suggestion[] = [];

  constructor(data?: PartialMessage<SuggestionListByObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionListByObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionListByObjectResponse {
    return new SuggestionListByObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionListByObjectResponse {
    return new SuggestionListByObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionListByObjectResponse {
    return new SuggestionListByObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionListByObjectResponse | PlainMessage<SuggestionListByObjectResponse> | undefined, b: SuggestionListByObjectResponse | PlainMessage<SuggestionListByObjectResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionListByObjectResponse, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionByPartialKeyRequest
 */
export class SuggestionByPartialKeyRequest extends Message<SuggestionByPartialKeyRequest> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string collection_id = 3;
   */
  collectionId = "";

  /**
   * @generated from field: string object_type = 4;
   */
  objectType = "";

  /**
   * @generated from field: repeated string object_id_parts = 5;
   */
  objectIdParts: string[] = [];

  /**
   * @generated from field: int32 num_attrs = 6;
   */
  numAttrs = 0;

  constructor(data?: PartialMessage<SuggestionByPartialKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionByPartialKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "object_id_parts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "num_attrs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionByPartialKeyRequest {
    return new SuggestionByPartialKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionByPartialKeyRequest {
    return new SuggestionByPartialKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionByPartialKeyRequest {
    return new SuggestionByPartialKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionByPartialKeyRequest | PlainMessage<SuggestionByPartialKeyRequest> | undefined, b: SuggestionByPartialKeyRequest | PlainMessage<SuggestionByPartialKeyRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionByPartialKeyRequest, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionByPartialKeyResponse
 */
export class SuggestionByPartialKeyResponse extends Message<SuggestionByPartialKeyResponse> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: repeated auth.Suggestion suggestions = 2;
   */
  suggestions: Suggestion[] = [];

  constructor(data?: PartialMessage<SuggestionByPartialKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionByPartialKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "suggestions", kind: "message", T: Suggestion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionByPartialKeyResponse {
    return new SuggestionByPartialKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionByPartialKeyResponse {
    return new SuggestionByPartialKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionByPartialKeyResponse {
    return new SuggestionByPartialKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionByPartialKeyResponse | PlainMessage<SuggestionByPartialKeyResponse> | undefined, b: SuggestionByPartialKeyResponse | PlainMessage<SuggestionByPartialKeyResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionByPartialKeyResponse, a, b);
  }
}

/**
 * @generated from message auth.common.GetSuggestionsRequest
 */
export class GetSuggestionsRequest extends Message<GetSuggestionsRequest> {
  /**
   * @generated from field: auth.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<GetSuggestionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.GetSuggestionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestionsRequest {
    return new GetSuggestionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestionsRequest {
    return new GetSuggestionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestionsRequest {
    return new GetSuggestionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestionsRequest | PlainMessage<GetSuggestionsRequest> | undefined, b: GetSuggestionsRequest | PlainMessage<GetSuggestionsRequest> | undefined): boolean {
    return proto3.util.equals(GetSuggestionsRequest, a, b);
  }
}

/**
 * @generated from message auth.common.GetSuggestionsResponse
 */
export class GetSuggestionsResponse extends Message<GetSuggestionsResponse> {
  /**
   * @generated from field: auth.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<GetSuggestionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.GetSuggestionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestionsResponse {
    return new GetSuggestionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestionsResponse {
    return new GetSuggestionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestionsResponse {
    return new GetSuggestionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestionsResponse | PlainMessage<GetSuggestionsResponse> | undefined, b: GetSuggestionsResponse | PlainMessage<GetSuggestionsResponse> | undefined): boolean {
    return proto3.util.equals(GetSuggestionsResponse, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionCreateRequest
 */
export class SuggestionCreateRequest extends Message<SuggestionCreateRequest> {
  /**
   * @generated from field: auth.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<SuggestionCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionCreateRequest {
    return new SuggestionCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionCreateRequest {
    return new SuggestionCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionCreateRequest {
    return new SuggestionCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionCreateRequest | PlainMessage<SuggestionCreateRequest> | undefined, b: SuggestionCreateRequest | PlainMessage<SuggestionCreateRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionCreateRequest, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionCreateResponse
 */
export class SuggestionCreateResponse extends Message<SuggestionCreateResponse> {
  /**
   * @generated from field: auth.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<SuggestionCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionCreateResponse {
    return new SuggestionCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionCreateResponse {
    return new SuggestionCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionCreateResponse {
    return new SuggestionCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionCreateResponse | PlainMessage<SuggestionCreateResponse> | undefined, b: SuggestionCreateResponse | PlainMessage<SuggestionCreateResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionCreateResponse, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionDeleteRequest
 */
export class SuggestionDeleteRequest extends Message<SuggestionDeleteRequest> {
  /**
   * @generated from field: auth.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  /**
   * @generated from field: string reason = 2;
   */
  reason = "";

  constructor(data?: PartialMessage<SuggestionDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionDeleteRequest {
    return new SuggestionDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionDeleteRequest {
    return new SuggestionDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionDeleteRequest {
    return new SuggestionDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionDeleteRequest | PlainMessage<SuggestionDeleteRequest> | undefined, b: SuggestionDeleteRequest | PlainMessage<SuggestionDeleteRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionDeleteRequest, a, b);
  }
}

/**
 * string collection_id = 1 [(buf.validate.field).string.min_len = 1];
 * string object_id = 2 [(buf.validate.field).string.min_len = 1];
 * string suggestion_id = 3 [(buf.validate.field).string.min_len = 1];
 *
 * @generated from message auth.common.SuggestionDeleteResponse
 */
export class SuggestionDeleteResponse extends Message<SuggestionDeleteResponse> {
  /**
   * @generated from field: auth.Suggestion suggestion = 4;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<SuggestionDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionDeleteResponse {
    return new SuggestionDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionDeleteResponse {
    return new SuggestionDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionDeleteResponse {
    return new SuggestionDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionDeleteResponse | PlainMessage<SuggestionDeleteResponse> | undefined, b: SuggestionDeleteResponse | PlainMessage<SuggestionDeleteResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionDeleteResponse, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionApproveRequest
 */
export class SuggestionApproveRequest extends Message<SuggestionApproveRequest> {
  /**
   * @generated from field: auth.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  constructor(data?: PartialMessage<SuggestionApproveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionApproveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionApproveRequest {
    return new SuggestionApproveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionApproveRequest {
    return new SuggestionApproveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionApproveRequest {
    return new SuggestionApproveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionApproveRequest | PlainMessage<SuggestionApproveRequest> | undefined, b: SuggestionApproveRequest | PlainMessage<SuggestionApproveRequest> | undefined): boolean {
    return proto3.util.equals(SuggestionApproveRequest, a, b);
  }
}

/**
 * @generated from message auth.common.SuggestionApproveResponse
 */
export class SuggestionApproveResponse extends Message<SuggestionApproveResponse> {
  /**
   * @generated from field: auth.Suggestion suggestion = 1;
   */
  suggestion?: Suggestion;

  /**
   * @generated from field: auth.Object object = 2;
   */
  object?: Object$;

  constructor(data?: PartialMessage<SuggestionApproveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.SuggestionApproveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion", kind: "message", T: Suggestion },
    { no: 2, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestionApproveResponse {
    return new SuggestionApproveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestionApproveResponse {
    return new SuggestionApproveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestionApproveResponse {
    return new SuggestionApproveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestionApproveResponse | PlainMessage<SuggestionApproveResponse> | undefined, b: SuggestionApproveResponse | PlainMessage<SuggestionApproveResponse> | undefined): boolean {
    return proto3.util.equals(SuggestionApproveResponse, a, b);
  }
}

