// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file chaincode/auth/common/collections.proto (package auth.common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Collection, HiddenTx, History } from "../../../auth/v1/auth_pb.js";

/**
 * @generated from message auth.common.CollectionGetListRequest
 */
export class CollectionGetListRequest extends Message<CollectionGetListRequest> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<CollectionGetListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionGetListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionGetListRequest {
    return new CollectionGetListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionGetListRequest {
    return new CollectionGetListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionGetListRequest {
    return new CollectionGetListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionGetListRequest | PlainMessage<CollectionGetListRequest> | undefined, b: CollectionGetListRequest | PlainMessage<CollectionGetListRequest> | undefined): boolean {
    return proto3.util.equals(CollectionGetListRequest, a, b);
  }
}

/**
 * @generated from message auth.common.CollectionGetListResponse
 */
export class CollectionGetListResponse extends Message<CollectionGetListResponse> {
  /**
   * @generated from field: repeated auth.Collection collections = 1;
   */
  collections: Collection[] = [];

  /**
   * @generated from field: string bookmark = 2;
   */
  bookmark = "";

  constructor(data?: PartialMessage<CollectionGetListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionGetListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collections", kind: "message", T: Collection, repeated: true },
    { no: 2, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionGetListResponse {
    return new CollectionGetListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionGetListResponse {
    return new CollectionGetListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionGetListResponse {
    return new CollectionGetListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionGetListResponse | PlainMessage<CollectionGetListResponse> | undefined, b: CollectionGetListResponse | PlainMessage<CollectionGetListResponse> | undefined): boolean {
    return proto3.util.equals(CollectionGetListResponse, a, b);
  }
}

/**
 * CollectionGet
 *
 * @generated from message auth.common.CollectionGetRequest
 */
export class CollectionGetRequest extends Message<CollectionGetRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  constructor(data?: PartialMessage<CollectionGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionGetRequest {
    return new CollectionGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionGetRequest {
    return new CollectionGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionGetRequest {
    return new CollectionGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionGetRequest | PlainMessage<CollectionGetRequest> | undefined, b: CollectionGetRequest | PlainMessage<CollectionGetRequest> | undefined): boolean {
    return proto3.util.equals(CollectionGetRequest, a, b);
  }
}

/**
 * @generated from message auth.common.CollectionGetResponse
 */
export class CollectionGetResponse extends Message<CollectionGetResponse> {
  /**
   * @generated from field: auth.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionGetResponse {
    return new CollectionGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionGetResponse {
    return new CollectionGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionGetResponse {
    return new CollectionGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionGetResponse | PlainMessage<CollectionGetResponse> | undefined, b: CollectionGetResponse | PlainMessage<CollectionGetResponse> | undefined): boolean {
    return proto3.util.equals(CollectionGetResponse, a, b);
  }
}

/**
 * CollectionGetHistory
 *
 * @generated from message auth.common.CollectionGetHistoryRequest
 */
export class CollectionGetHistoryRequest extends Message<CollectionGetHistoryRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: bool show_hidden = 2;
   */
  showHidden = false;

  constructor(data?: PartialMessage<CollectionGetHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionGetHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "show_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionGetHistoryRequest {
    return new CollectionGetHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionGetHistoryRequest {
    return new CollectionGetHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionGetHistoryRequest {
    return new CollectionGetHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionGetHistoryRequest | PlainMessage<CollectionGetHistoryRequest> | undefined, b: CollectionGetHistoryRequest | PlainMessage<CollectionGetHistoryRequest> | undefined): boolean {
    return proto3.util.equals(CollectionGetHistoryRequest, a, b);
  }
}

/**
 * @generated from message auth.common.CollectionGetHistoryResponse
 */
export class CollectionGetHistoryResponse extends Message<CollectionGetHistoryResponse> {
  /**
   * repeated auth.Collection collections = 1;
   *
   * @generated from field: auth.Collection collection = 1;
   */
  collection?: Collection;

  /**
   * @generated from field: auth.History history = 2;
   */
  history?: History;

  constructor(data?: PartialMessage<CollectionGetHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionGetHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
    { no: 2, name: "history", kind: "message", T: History },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionGetHistoryResponse {
    return new CollectionGetHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionGetHistoryResponse {
    return new CollectionGetHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionGetHistoryResponse {
    return new CollectionGetHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionGetHistoryResponse | PlainMessage<CollectionGetHistoryResponse> | undefined, b: CollectionGetHistoryResponse | PlainMessage<CollectionGetHistoryResponse> | undefined): boolean {
    return proto3.util.equals(CollectionGetHistoryResponse, a, b);
  }
}

/**
 * -------------------- Invoke ------------------------
 * CollectionCreate
 *
 * @generated from message auth.common.CollectionCreateRequest
 */
export class CollectionCreateRequest extends Message<CollectionCreateRequest> {
  /**
   * @generated from field: auth.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionCreateRequest {
    return new CollectionCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionCreateRequest {
    return new CollectionCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionCreateRequest {
    return new CollectionCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionCreateRequest | PlainMessage<CollectionCreateRequest> | undefined, b: CollectionCreateRequest | PlainMessage<CollectionCreateRequest> | undefined): boolean {
    return proto3.util.equals(CollectionCreateRequest, a, b);
  }
}

/**
 * @generated from message auth.common.CollectionCreateResponse
 */
export class CollectionCreateResponse extends Message<CollectionCreateResponse> {
  /**
   * @generated from field: auth.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionCreateResponse {
    return new CollectionCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionCreateResponse {
    return new CollectionCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionCreateResponse {
    return new CollectionCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionCreateResponse | PlainMessage<CollectionCreateResponse> | undefined, b: CollectionCreateResponse | PlainMessage<CollectionCreateResponse> | undefined): boolean {
    return proto3.util.equals(CollectionCreateResponse, a, b);
  }
}

/**
 * @generated from message auth.common.CollectionUpdateRequest
 */
export class CollectionUpdateRequest extends Message<CollectionUpdateRequest> {
  /**
   * @generated from field: auth.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionUpdateRequest {
    return new CollectionUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionUpdateRequest {
    return new CollectionUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionUpdateRequest {
    return new CollectionUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionUpdateRequest | PlainMessage<CollectionUpdateRequest> | undefined, b: CollectionUpdateRequest | PlainMessage<CollectionUpdateRequest> | undefined): boolean {
    return proto3.util.equals(CollectionUpdateRequest, a, b);
  }
}

/**
 * @generated from message auth.common.CollectionUpdateResponse
 */
export class CollectionUpdateResponse extends Message<CollectionUpdateResponse> {
  /**
   * @generated from field: auth.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionUpdateResponse {
    return new CollectionUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionUpdateResponse {
    return new CollectionUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionUpdateResponse {
    return new CollectionUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionUpdateResponse | PlainMessage<CollectionUpdateResponse> | undefined, b: CollectionUpdateResponse | PlainMessage<CollectionUpdateResponse> | undefined): boolean {
    return proto3.util.equals(CollectionUpdateResponse, a, b);
  }
}

/**
 * @generated from message auth.common.CollectionHideTxRequest
 */
export class CollectionHideTxRequest extends Message<CollectionHideTxRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: auth.HiddenTx hidden_tx = 2;
   */
  hiddenTx?: HiddenTx;

  constructor(data?: PartialMessage<CollectionHideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionHideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hidden_tx", kind: "message", T: HiddenTx },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionHideTxRequest {
    return new CollectionHideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionHideTxRequest {
    return new CollectionHideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionHideTxRequest {
    return new CollectionHideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionHideTxRequest | PlainMessage<CollectionHideTxRequest> | undefined, b: CollectionHideTxRequest | PlainMessage<CollectionHideTxRequest> | undefined): boolean {
    return proto3.util.equals(CollectionHideTxRequest, a, b);
  }
}

/**
 * @generated from message auth.common.CollectionHideTxResponse
 */
export class CollectionHideTxResponse extends Message<CollectionHideTxResponse> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  constructor(data?: PartialMessage<CollectionHideTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.common.CollectionHideTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionHideTxResponse {
    return new CollectionHideTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionHideTxResponse {
    return new CollectionHideTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionHideTxResponse {
    return new CollectionHideTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionHideTxResponse | PlainMessage<CollectionHideTxResponse> | undefined, b: CollectionHideTxResponse | PlainMessage<CollectionHideTxResponse> | undefined): boolean {
    return proto3.util.equals(CollectionHideTxResponse, a, b);
  }
}

