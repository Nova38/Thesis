// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file chaincode/auth/rbac/schema/v1/rbac.proto (package rbac.schema.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { ACEntry, Collection, History, User } from "../../../../../auth/v1/auth_pb.js";

/**
 * ==================== Roles =========================
 * Used for setting Role Permissions
 * !! key := {ROLE}{COLLECTION_ID}{ROLE_ID.Id}
 *
 * @generated from message rbac.schema.v1.Role
 */
export class Role extends Message<Role> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string role_id = 2;
   */
  roleId = "";

  /**
   * @generated from field: auth.ACEntry ac = 4;
   */
  ac?: ACEntry;

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: string description = 6;
   */
  description = "";

  /**
   * @generated from field: repeated string parent_role_ids = 7;
   */
  parentRoleIds: string[] = [];

  constructor(data?: PartialMessage<Role>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.Role";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ac", kind: "message", T: ACEntry },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "parent_role_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role {
    return new Role().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJsonString(jsonString, options);
  }

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean {
    return proto3.util.equals(Role, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleGetRequest
 */
export class RoleGetRequest extends Message<RoleGetRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string role_id = 2;
   */
  roleId = "";

  constructor(data?: PartialMessage<RoleGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleGetRequest {
    return new RoleGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleGetRequest {
    return new RoleGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleGetRequest {
    return new RoleGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RoleGetRequest | PlainMessage<RoleGetRequest> | undefined, b: RoleGetRequest | PlainMessage<RoleGetRequest> | undefined): boolean {
    return proto3.util.equals(RoleGetRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleGetResponse
 */
export class RoleGetResponse extends Message<RoleGetResponse> {
  /**
   * @generated from field: rbac.schema.v1.Role role = 1;
   */
  role?: Role;

  constructor(data?: PartialMessage<RoleGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "message", T: Role },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleGetResponse {
    return new RoleGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleGetResponse {
    return new RoleGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleGetResponse {
    return new RoleGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RoleGetResponse | PlainMessage<RoleGetResponse> | undefined, b: RoleGetResponse | PlainMessage<RoleGetResponse> | undefined): boolean {
    return proto3.util.equals(RoleGetResponse, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleGetListRequest
 */
export class RoleGetListRequest extends Message<RoleGetListRequest> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<RoleGetListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleGetListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleGetListRequest {
    return new RoleGetListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleGetListRequest {
    return new RoleGetListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleGetListRequest {
    return new RoleGetListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RoleGetListRequest | PlainMessage<RoleGetListRequest> | undefined, b: RoleGetListRequest | PlainMessage<RoleGetListRequest> | undefined): boolean {
    return proto3.util.equals(RoleGetListRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleGetListResponse
 */
export class RoleGetListResponse extends Message<RoleGetListResponse> {
  /**
   * @generated from field: repeated rbac.schema.v1.Role roles = 1;
   */
  roles: Role[] = [];

  /**
   * @generated from field: string bookmark = 2;
   */
  bookmark = "";

  constructor(data?: PartialMessage<RoleGetListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleGetListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "message", T: Role, repeated: true },
    { no: 2, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleGetListResponse {
    return new RoleGetListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleGetListResponse {
    return new RoleGetListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleGetListResponse {
    return new RoleGetListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RoleGetListResponse | PlainMessage<RoleGetListResponse> | undefined, b: RoleGetListResponse | PlainMessage<RoleGetListResponse> | undefined): boolean {
    return proto3.util.equals(RoleGetListResponse, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleGetByCollectionRequest
 */
export class RoleGetByCollectionRequest extends Message<RoleGetByCollectionRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string bookmark = 2;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<RoleGetByCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleGetByCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleGetByCollectionRequest {
    return new RoleGetByCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleGetByCollectionRequest {
    return new RoleGetByCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleGetByCollectionRequest {
    return new RoleGetByCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RoleGetByCollectionRequest | PlainMessage<RoleGetByCollectionRequest> | undefined, b: RoleGetByCollectionRequest | PlainMessage<RoleGetByCollectionRequest> | undefined): boolean {
    return proto3.util.equals(RoleGetByCollectionRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleGetByCollectionResponse
 */
export class RoleGetByCollectionResponse extends Message<RoleGetByCollectionResponse> {
  /**
   * @generated from field: auth.Collection collection = 1;
   */
  collection?: Collection;

  /**
   * @generated from field: repeated rbac.schema.v1.Role roles = 2;
   */
  roles: Role[] = [];

  /**
   * @generated from field: string bookmark = 3;
   */
  bookmark = "";

  constructor(data?: PartialMessage<RoleGetByCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleGetByCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
    { no: 2, name: "roles", kind: "message", T: Role, repeated: true },
    { no: 3, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleGetByCollectionResponse {
    return new RoleGetByCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleGetByCollectionResponse {
    return new RoleGetByCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleGetByCollectionResponse {
    return new RoleGetByCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RoleGetByCollectionResponse | PlainMessage<RoleGetByCollectionResponse> | undefined, b: RoleGetByCollectionResponse | PlainMessage<RoleGetByCollectionResponse> | undefined): boolean {
    return proto3.util.equals(RoleGetByCollectionResponse, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleGetHistoryRequest
 */
export class RoleGetHistoryRequest extends Message<RoleGetHistoryRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string role_id = 4;
   */
  roleId = "";

  /**
   * @generated from field: bool show_hidden = 5;
   */
  showHidden = false;

  constructor(data?: PartialMessage<RoleGetHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleGetHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "show_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleGetHistoryRequest {
    return new RoleGetHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleGetHistoryRequest {
    return new RoleGetHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleGetHistoryRequest {
    return new RoleGetHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RoleGetHistoryRequest | PlainMessage<RoleGetHistoryRequest> | undefined, b: RoleGetHistoryRequest | PlainMessage<RoleGetHistoryRequest> | undefined): boolean {
    return proto3.util.equals(RoleGetHistoryRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleGetHistoryResponse
 */
export class RoleGetHistoryResponse extends Message<RoleGetHistoryResponse> {
  /**
   * @generated from field: auth.History history = 1;
   */
  history?: History;

  constructor(data?: PartialMessage<RoleGetHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleGetHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "history", kind: "message", T: History },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleGetHistoryResponse {
    return new RoleGetHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleGetHistoryResponse {
    return new RoleGetHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleGetHistoryResponse {
    return new RoleGetHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RoleGetHistoryResponse | PlainMessage<RoleGetHistoryResponse> | undefined, b: RoleGetHistoryResponse | PlainMessage<RoleGetHistoryResponse> | undefined): boolean {
    return proto3.util.equals(RoleGetHistoryResponse, a, b);
  }
}

/**
 * -------------------- Invoke ------------------------
 *
 * @generated from message rbac.schema.v1.RoleCreateRequest
 */
export class RoleCreateRequest extends Message<RoleCreateRequest> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string collection_id = 3;
   */
  collectionId = "";

  /**
   * @generated from field: string role_id = 4;
   */
  roleId = "";

  constructor(data?: PartialMessage<RoleCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleCreateRequest {
    return new RoleCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleCreateRequest {
    return new RoleCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleCreateRequest {
    return new RoleCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RoleCreateRequest | PlainMessage<RoleCreateRequest> | undefined, b: RoleCreateRequest | PlainMessage<RoleCreateRequest> | undefined): boolean {
    return proto3.util.equals(RoleCreateRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleCreateResponse
 */
export class RoleCreateResponse extends Message<RoleCreateResponse> {
  /**
   * @generated from field: rbac.schema.v1.Role role = 1;
   */
  role?: Role;

  constructor(data?: PartialMessage<RoleCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "message", T: Role },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleCreateResponse {
    return new RoleCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleCreateResponse {
    return new RoleCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleCreateResponse {
    return new RoleCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RoleCreateResponse | PlainMessage<RoleCreateResponse> | undefined, b: RoleCreateResponse | PlainMessage<RoleCreateResponse> | undefined): boolean {
    return proto3.util.equals(RoleCreateResponse, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleUpdateRequest
 */
export class RoleUpdateRequest extends Message<RoleUpdateRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string role_id = 2;
   */
  roleId = "";

  /**
   * @generated from field: rbac.schema.v1.Role update = 3;
   */
  update?: Role;

  /**
   * @generated from field: google.protobuf.FieldMask mask = 4;
   */
  mask?: FieldMask;

  constructor(data?: PartialMessage<RoleUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "update", kind: "message", T: Role },
    { no: 4, name: "mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleUpdateRequest {
    return new RoleUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleUpdateRequest {
    return new RoleUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleUpdateRequest {
    return new RoleUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RoleUpdateRequest | PlainMessage<RoleUpdateRequest> | undefined, b: RoleUpdateRequest | PlainMessage<RoleUpdateRequest> | undefined): boolean {
    return proto3.util.equals(RoleUpdateRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleUpdateResponse
 */
export class RoleUpdateResponse extends Message<RoleUpdateResponse> {
  /**
   * @generated from field: rbac.schema.v1.Role role = 1;
   */
  role?: Role;

  constructor(data?: PartialMessage<RoleUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "message", T: Role },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleUpdateResponse {
    return new RoleUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleUpdateResponse {
    return new RoleUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleUpdateResponse {
    return new RoleUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RoleUpdateResponse | PlainMessage<RoleUpdateResponse> | undefined, b: RoleUpdateResponse | PlainMessage<RoleUpdateResponse> | undefined): boolean {
    return proto3.util.equals(RoleUpdateResponse, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleDeleteRequest
 */
export class RoleDeleteRequest extends Message<RoleDeleteRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string role_id = 2;
   */
  roleId = "";

  constructor(data?: PartialMessage<RoleDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleDeleteRequest {
    return new RoleDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleDeleteRequest {
    return new RoleDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleDeleteRequest {
    return new RoleDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RoleDeleteRequest | PlainMessage<RoleDeleteRequest> | undefined, b: RoleDeleteRequest | PlainMessage<RoleDeleteRequest> | undefined): boolean {
    return proto3.util.equals(RoleDeleteRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.RoleDeleteResponse
 */
export class RoleDeleteResponse extends Message<RoleDeleteResponse> {
  /**
   * @generated from field: rbac.schema.v1.Role role = 1;
   */
  role?: Role;

  constructor(data?: PartialMessage<RoleDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.RoleDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "message", T: Role },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleDeleteResponse {
    return new RoleDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleDeleteResponse {
    return new RoleDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleDeleteResponse {
    return new RoleDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RoleDeleteResponse | PlainMessage<RoleDeleteResponse> | undefined, b: RoleDeleteResponse | PlainMessage<RoleDeleteResponse> | undefined): boolean {
    return proto3.util.equals(RoleDeleteResponse, a, b);
  }
}

/**
 * ==================== Membership ====================
 * Used for Assigning Roles to Users
 * !! key := {MEMBERSHIP}{COLLECTION_ID}{ROLE_ID.Id}<{USER_ID.msp_id}{USER_ID.id}>
 * !! SecondaryKey := {MEMBERSHIP}<{USER_ID.msp_id}{USER_ID.id}>{COLLECTION_ID}{ROLE_ID.Id}
 *
 * @generated from message rbac.schema.v1.Membership
 */
export class Membership extends Message<Membership> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: string role_id = 4;
   */
  roleId = "";

  constructor(data?: PartialMessage<Membership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.Membership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Membership {
    return new Membership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Membership {
    return new Membership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Membership {
    return new Membership().fromJsonString(jsonString, options);
  }

  static equals(a: Membership | PlainMessage<Membership> | undefined, b: Membership | PlainMessage<Membership> | undefined): boolean {
    return proto3.util.equals(Membership, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipGetRequest
 */
export class MembershipGetRequest extends Message<MembershipGetRequest> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string collection_id = 3;
   */
  collectionId = "";

  /**
   * @generated from field: string role_id = 4;
   */
  roleId = "";

  constructor(data?: PartialMessage<MembershipGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipGetRequest {
    return new MembershipGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipGetRequest {
    return new MembershipGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipGetRequest {
    return new MembershipGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipGetRequest | PlainMessage<MembershipGetRequest> | undefined, b: MembershipGetRequest | PlainMessage<MembershipGetRequest> | undefined): boolean {
    return proto3.util.equals(MembershipGetRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipGetResponse
 */
export class MembershipGetResponse extends Message<MembershipGetResponse> {
  /**
   * @generated from field: rbac.schema.v1.Membership membership = 1;
   */
  membership?: Membership;

  constructor(data?: PartialMessage<MembershipGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "membership", kind: "message", T: Membership },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipGetResponse {
    return new MembershipGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipGetResponse {
    return new MembershipGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipGetResponse {
    return new MembershipGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipGetResponse | PlainMessage<MembershipGetResponse> | undefined, b: MembershipGetResponse | PlainMessage<MembershipGetResponse> | undefined): boolean {
    return proto3.util.equals(MembershipGetResponse, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipGetListRequest
 */
export class MembershipGetListRequest extends Message<MembershipGetListRequest> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<MembershipGetListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipGetListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipGetListRequest {
    return new MembershipGetListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipGetListRequest {
    return new MembershipGetListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipGetListRequest {
    return new MembershipGetListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipGetListRequest | PlainMessage<MembershipGetListRequest> | undefined, b: MembershipGetListRequest | PlainMessage<MembershipGetListRequest> | undefined): boolean {
    return proto3.util.equals(MembershipGetListRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipGetListResponse
 */
export class MembershipGetListResponse extends Message<MembershipGetListResponse> {
  /**
   * @generated from field: repeated rbac.schema.v1.Membership memberships = 1;
   */
  memberships: Membership[] = [];

  /**
   * @generated from field: string bookmark = 2;
   */
  bookmark = "";

  constructor(data?: PartialMessage<MembershipGetListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipGetListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "memberships", kind: "message", T: Membership, repeated: true },
    { no: 2, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipGetListResponse {
    return new MembershipGetListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipGetListResponse {
    return new MembershipGetListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipGetListResponse {
    return new MembershipGetListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipGetListResponse | PlainMessage<MembershipGetListResponse> | undefined, b: MembershipGetListResponse | PlainMessage<MembershipGetListResponse> | undefined): boolean {
    return proto3.util.equals(MembershipGetListResponse, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipGetByCollectionRequest
 */
export class MembershipGetByCollectionRequest extends Message<MembershipGetByCollectionRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string bookmark = 2;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<MembershipGetByCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipGetByCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipGetByCollectionRequest {
    return new MembershipGetByCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipGetByCollectionRequest {
    return new MembershipGetByCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipGetByCollectionRequest {
    return new MembershipGetByCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipGetByCollectionRequest | PlainMessage<MembershipGetByCollectionRequest> | undefined, b: MembershipGetByCollectionRequest | PlainMessage<MembershipGetByCollectionRequest> | undefined): boolean {
    return proto3.util.equals(MembershipGetByCollectionRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipGetByCollectionResponse
 */
export class MembershipGetByCollectionResponse extends Message<MembershipGetByCollectionResponse> {
  /**
   * @generated from field: auth.Collection collection = 1;
   */
  collection?: Collection;

  /**
   * @generated from field: repeated rbac.schema.v1.Membership memberships = 2;
   */
  memberships: Membership[] = [];

  /**
   * @generated from field: string bookmark = 3;
   */
  bookmark = "";

  constructor(data?: PartialMessage<MembershipGetByCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipGetByCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
    { no: 2, name: "memberships", kind: "message", T: Membership, repeated: true },
    { no: 3, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipGetByCollectionResponse {
    return new MembershipGetByCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipGetByCollectionResponse {
    return new MembershipGetByCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipGetByCollectionResponse {
    return new MembershipGetByCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipGetByCollectionResponse | PlainMessage<MembershipGetByCollectionResponse> | undefined, b: MembershipGetByCollectionResponse | PlainMessage<MembershipGetByCollectionResponse> | undefined): boolean {
    return proto3.util.equals(MembershipGetByCollectionResponse, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipGetByUserRequest
 */
export class MembershipGetByUserRequest extends Message<MembershipGetByUserRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: string bookmark = 4;
   */
  bookmark = "";

  /**
   * @generated from field: uint32 page_size = 5;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<MembershipGetByUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipGetByUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipGetByUserRequest {
    return new MembershipGetByUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipGetByUserRequest {
    return new MembershipGetByUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipGetByUserRequest {
    return new MembershipGetByUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipGetByUserRequest | PlainMessage<MembershipGetByUserRequest> | undefined, b: MembershipGetByUserRequest | PlainMessage<MembershipGetByUserRequest> | undefined): boolean {
    return proto3.util.equals(MembershipGetByUserRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipGetByUserResponse
 */
export class MembershipGetByUserResponse extends Message<MembershipGetByUserResponse> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: auth.User user = 2;
   */
  user?: User;

  /**
   * @generated from field: repeated rbac.schema.v1.Membership memberships = 3;
   */
  memberships: Membership[] = [];

  /**
   * @generated from field: string bookmark = 4;
   */
  bookmark = "";

  constructor(data?: PartialMessage<MembershipGetByUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipGetByUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user", kind: "message", T: User },
    { no: 3, name: "memberships", kind: "message", T: Membership, repeated: true },
    { no: 4, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipGetByUserResponse {
    return new MembershipGetByUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipGetByUserResponse {
    return new MembershipGetByUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipGetByUserResponse {
    return new MembershipGetByUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipGetByUserResponse | PlainMessage<MembershipGetByUserResponse> | undefined, b: MembershipGetByUserResponse | PlainMessage<MembershipGetByUserResponse> | undefined): boolean {
    return proto3.util.equals(MembershipGetByUserResponse, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipGetHistoryRequest
 */
export class MembershipGetHistoryRequest extends Message<MembershipGetHistoryRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string msp_id = 2;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: string role_id = 4;
   */
  roleId = "";

  constructor(data?: PartialMessage<MembershipGetHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipGetHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipGetHistoryRequest {
    return new MembershipGetHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipGetHistoryRequest {
    return new MembershipGetHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipGetHistoryRequest {
    return new MembershipGetHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipGetHistoryRequest | PlainMessage<MembershipGetHistoryRequest> | undefined, b: MembershipGetHistoryRequest | PlainMessage<MembershipGetHistoryRequest> | undefined): boolean {
    return proto3.util.equals(MembershipGetHistoryRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipGetHistoryResponse
 */
export class MembershipGetHistoryResponse extends Message<MembershipGetHistoryResponse> {
  /**
   * @generated from field: auth.History history = 1;
   */
  history?: History;

  constructor(data?: PartialMessage<MembershipGetHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipGetHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "history", kind: "message", T: History },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipGetHistoryResponse {
    return new MembershipGetHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipGetHistoryResponse {
    return new MembershipGetHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipGetHistoryResponse {
    return new MembershipGetHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipGetHistoryResponse | PlainMessage<MembershipGetHistoryResponse> | undefined, b: MembershipGetHistoryResponse | PlainMessage<MembershipGetHistoryResponse> | undefined): boolean {
    return proto3.util.equals(MembershipGetHistoryResponse, a, b);
  }
}

/**
 * -------------------- Invoke ------------------------
 *
 * @generated from message rbac.schema.v1.MembershipCreateRequest
 */
export class MembershipCreateRequest extends Message<MembershipCreateRequest> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string collection_id = 3;
   */
  collectionId = "";

  /**
   * @generated from field: string role_id = 4;
   */
  roleId = "";

  constructor(data?: PartialMessage<MembershipCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipCreateRequest {
    return new MembershipCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipCreateRequest {
    return new MembershipCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipCreateRequest {
    return new MembershipCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipCreateRequest | PlainMessage<MembershipCreateRequest> | undefined, b: MembershipCreateRequest | PlainMessage<MembershipCreateRequest> | undefined): boolean {
    return proto3.util.equals(MembershipCreateRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipCreateResponse
 */
export class MembershipCreateResponse extends Message<MembershipCreateResponse> {
  /**
   * @generated from field: rbac.schema.v1.Membership membership = 1;
   */
  membership?: Membership;

  constructor(data?: PartialMessage<MembershipCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "membership", kind: "message", T: Membership },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipCreateResponse {
    return new MembershipCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipCreateResponse {
    return new MembershipCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipCreateResponse {
    return new MembershipCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipCreateResponse | PlainMessage<MembershipCreateResponse> | undefined, b: MembershipCreateResponse | PlainMessage<MembershipCreateResponse> | undefined): boolean {
    return proto3.util.equals(MembershipCreateResponse, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipDeleteRequest
 */
export class MembershipDeleteRequest extends Message<MembershipDeleteRequest> {
  /**
   * @generated from field: string msp_id = 1;
   */
  mspId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string collection_id = 3;
   */
  collectionId = "";

  /**
   * @generated from field: string role_id = 4;
   */
  roleId = "";

  constructor(data?: PartialMessage<MembershipDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipDeleteRequest {
    return new MembershipDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipDeleteRequest {
    return new MembershipDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipDeleteRequest {
    return new MembershipDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipDeleteRequest | PlainMessage<MembershipDeleteRequest> | undefined, b: MembershipDeleteRequest | PlainMessage<MembershipDeleteRequest> | undefined): boolean {
    return proto3.util.equals(MembershipDeleteRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.MembershipDeleteResponse
 */
export class MembershipDeleteResponse extends Message<MembershipDeleteResponse> {
  /**
   * @generated from field: rbac.schema.v1.Membership membership = 1;
   */
  membership?: Membership;

  constructor(data?: PartialMessage<MembershipDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.MembershipDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "membership", kind: "message", T: Membership },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipDeleteResponse {
    return new MembershipDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipDeleteResponse {
    return new MembershipDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipDeleteResponse {
    return new MembershipDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipDeleteResponse | PlainMessage<MembershipDeleteResponse> | undefined, b: MembershipDeleteResponse | PlainMessage<MembershipDeleteResponse> | undefined): boolean {
    return proto3.util.equals(MembershipDeleteResponse, a, b);
  }
}

