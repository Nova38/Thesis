// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file chaincode/ccbio/schema/v2/service.proto (package ccbio.schema.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Collection, Collection_Id, Role, Specimen, Specimen_Georeference, Specimen_HiddenTx, Specimen_Id, Specimen_Image, Specimen_Primary, Specimen_Secondary, Specimen_Taxon, SuggestedUpdate, SuggestedUpdate_Id, User, User_Id } from "./state_pb.js";

/**
 * @generated from message ccbio.schema.v2.GetSuggestedUpdateRequest
 */
export class GetSuggestedUpdateRequest extends Message<GetSuggestedUpdateRequest> {
  /**
   * @generated from field: ccbio.schema.v2.SuggestedUpdate.Id id = 1;
   */
  id?: SuggestedUpdate_Id;

  constructor(data?: PartialMessage<GetSuggestedUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSuggestedUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: SuggestedUpdate_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedUpdateRequest {
    return new GetSuggestedUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedUpdateRequest {
    return new GetSuggestedUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedUpdateRequest {
    return new GetSuggestedUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedUpdateRequest | PlainMessage<GetSuggestedUpdateRequest> | undefined, b: GetSuggestedUpdateRequest | PlainMessage<GetSuggestedUpdateRequest> | undefined): boolean {
    return proto3.util.equals(GetSuggestedUpdateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetSuggestedUpdateBySpecimenRequest
 */
export class GetSuggestedUpdateBySpecimenRequest extends Message<GetSuggestedUpdateBySpecimenRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  constructor(data?: PartialMessage<GetSuggestedUpdateBySpecimenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSuggestedUpdateBySpecimenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedUpdateBySpecimenRequest {
    return new GetSuggestedUpdateBySpecimenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedUpdateBySpecimenRequest {
    return new GetSuggestedUpdateBySpecimenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedUpdateBySpecimenRequest {
    return new GetSuggestedUpdateBySpecimenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedUpdateBySpecimenRequest | PlainMessage<GetSuggestedUpdateBySpecimenRequest> | undefined, b: GetSuggestedUpdateBySpecimenRequest | PlainMessage<GetSuggestedUpdateBySpecimenRequest> | undefined): boolean {
    return proto3.util.equals(GetSuggestedUpdateBySpecimenRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetSuggestedUpdateByCollectionRequest
 */
export class GetSuggestedUpdateByCollectionRequest extends Message<GetSuggestedUpdateByCollectionRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Collection.Id id = 1;
   */
  id?: Collection_Id;

  constructor(data?: PartialMessage<GetSuggestedUpdateByCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSuggestedUpdateByCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Collection_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedUpdateByCollectionRequest {
    return new GetSuggestedUpdateByCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedUpdateByCollectionRequest {
    return new GetSuggestedUpdateByCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedUpdateByCollectionRequest {
    return new GetSuggestedUpdateByCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedUpdateByCollectionRequest | PlainMessage<GetSuggestedUpdateByCollectionRequest> | undefined, b: GetSuggestedUpdateByCollectionRequest | PlainMessage<GetSuggestedUpdateByCollectionRequest> | undefined): boolean {
    return proto3.util.equals(GetSuggestedUpdateByCollectionRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetUserListRequest
 */
export class GetUserListRequest extends Message<GetUserListRequest> {
  constructor(data?: PartialMessage<GetUserListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetUserListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserListRequest {
    return new GetUserListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserListRequest {
    return new GetUserListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserListRequest {
    return new GetUserListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserListRequest | PlainMessage<GetUserListRequest> | undefined, b: GetUserListRequest | PlainMessage<GetUserListRequest> | undefined): boolean {
    return proto3.util.equals(GetUserListRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetUserListResponse
 */
export class GetUserListResponse extends Message<GetUserListResponse> {
  /**
   * @generated from field: repeated ccbio.schema.v2.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<GetUserListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetUserListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserListResponse {
    return new GetUserListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserListResponse {
    return new GetUserListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserListResponse {
    return new GetUserListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserListResponse | PlainMessage<GetUserListResponse> | undefined, b: GetUserListResponse | PlainMessage<GetUserListResponse> | undefined): boolean {
    return proto3.util.equals(GetUserListResponse, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  /**
   * @generated from field: ccbio.schema.v2.User.Id id = 1;
   */
  id?: User_Id;

  constructor(data?: PartialMessage<GetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: User_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean {
    return proto3.util.equals(GetUserRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetCollectionRequest
 */
export class GetCollectionRequest extends Message<GetCollectionRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Collection.Id id = 1;
   */
  id?: Collection_Id;

  constructor(data?: PartialMessage<GetCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Collection_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCollectionRequest {
    return new GetCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCollectionRequest {
    return new GetCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCollectionRequest {
    return new GetCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCollectionRequest | PlainMessage<GetCollectionRequest> | undefined, b: GetCollectionRequest | PlainMessage<GetCollectionRequest> | undefined): boolean {
    return proto3.util.equals(GetCollectionRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetSpecimenRequest
 */
export class GetSpecimenRequest extends Message<GetSpecimenRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  constructor(data?: PartialMessage<GetSpecimenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSpecimenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpecimenRequest {
    return new GetSpecimenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpecimenRequest {
    return new GetSpecimenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpecimenRequest {
    return new GetSpecimenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpecimenRequest | PlainMessage<GetSpecimenRequest> | undefined, b: GetSpecimenRequest | PlainMessage<GetSpecimenRequest> | undefined): boolean {
    return proto3.util.equals(GetSpecimenRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetSpecimenHistoryRequest
 */
export class GetSpecimenHistoryRequest extends Message<GetSpecimenHistoryRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  /**
   * @generated from field: bool include_hidden = 2;
   */
  includeHidden = false;

  constructor(data?: PartialMessage<GetSpecimenHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSpecimenHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
    { no: 2, name: "include_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpecimenHistoryRequest {
    return new GetSpecimenHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpecimenHistoryRequest {
    return new GetSpecimenHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpecimenHistoryRequest {
    return new GetSpecimenHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpecimenHistoryRequest | PlainMessage<GetSpecimenHistoryRequest> | undefined, b: GetSpecimenHistoryRequest | PlainMessage<GetSpecimenHistoryRequest> | undefined): boolean {
    return proto3.util.equals(GetSpecimenHistoryRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetSpecimenByCollectionRequest
 */
export class GetSpecimenByCollectionRequest extends Message<GetSpecimenByCollectionRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Collection.Id id = 1;
   */
  id?: Collection_Id;

  constructor(data?: PartialMessage<GetSpecimenByCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSpecimenByCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Collection_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpecimenByCollectionRequest {
    return new GetSpecimenByCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpecimenByCollectionRequest {
    return new GetSpecimenByCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpecimenByCollectionRequest {
    return new GetSpecimenByCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpecimenByCollectionRequest | PlainMessage<GetSpecimenByCollectionRequest> | undefined, b: GetSpecimenByCollectionRequest | PlainMessage<GetSpecimenByCollectionRequest> | undefined): boolean {
    return proto3.util.equals(GetSpecimenByCollectionRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetUserByCollectionRequest
 */
export class GetUserByCollectionRequest extends Message<GetUserByCollectionRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Collection.Id id = 1;
   */
  id?: Collection_Id;

  constructor(data?: PartialMessage<GetUserByCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetUserByCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Collection_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByCollectionRequest {
    return new GetUserByCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByCollectionRequest {
    return new GetUserByCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByCollectionRequest {
    return new GetUserByCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByCollectionRequest | PlainMessage<GetUserByCollectionRequest> | undefined, b: GetUserByCollectionRequest | PlainMessage<GetUserByCollectionRequest> | undefined): boolean {
    return proto3.util.equals(GetUserByCollectionRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.UserRegisterRequest
 */
export class UserRegisterRequest extends Message<UserRegisterRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string affiliation = 3;
   */
  affiliation = "";

  constructor(data?: PartialMessage<UserRegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.UserRegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "affiliation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserRegisterRequest {
    return new UserRegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserRegisterRequest {
    return new UserRegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserRegisterRequest {
    return new UserRegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserRegisterRequest | PlainMessage<UserRegisterRequest> | undefined, b: UserRegisterRequest | PlainMessage<UserRegisterRequest> | undefined): boolean {
    return proto3.util.equals(UserRegisterRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.UpdateMembershipRequest
 */
export class UpdateMembershipRequest extends Message<UpdateMembershipRequest> {
  /**
   * @generated from field: ccbio.schema.v2.User.Id user_id = 1;
   */
  userId?: User_Id;

  /**
   * @generated from field: ccbio.schema.v2.Collection.Id collection_id = 2;
   */
  collectionId?: Collection_Id;

  /**
   * @generated from field: ccbio.schema.v2.Role new_role = 3;
   */
  newRole = Role.PUBLIC_UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateMembershipRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.UpdateMembershipRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "message", T: User_Id },
    { no: 2, name: "collection_id", kind: "message", T: Collection_Id },
    { no: 3, name: "new_role", kind: "enum", T: proto3.getEnumType(Role) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMembershipRequest {
    return new UpdateMembershipRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMembershipRequest {
    return new UpdateMembershipRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMembershipRequest {
    return new UpdateMembershipRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMembershipRequest | PlainMessage<UpdateMembershipRequest> | undefined, b: UpdateMembershipRequest | PlainMessage<UpdateMembershipRequest> | undefined): boolean {
    return proto3.util.equals(UpdateMembershipRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.CollectionCreateRequest
 */
export class CollectionCreateRequest extends Message<CollectionCreateRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.CollectionCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionCreateRequest {
    return new CollectionCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionCreateRequest {
    return new CollectionCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionCreateRequest {
    return new CollectionCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionCreateRequest | PlainMessage<CollectionCreateRequest> | undefined, b: CollectionCreateRequest | PlainMessage<CollectionCreateRequest> | undefined): boolean {
    return proto3.util.equals(CollectionCreateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.CollectionUpdateRequest
 */
export class CollectionUpdateRequest extends Message<CollectionUpdateRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.CollectionUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionUpdateRequest {
    return new CollectionUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionUpdateRequest {
    return new CollectionUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionUpdateRequest {
    return new CollectionUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionUpdateRequest | PlainMessage<CollectionUpdateRequest> | undefined, b: CollectionUpdateRequest | PlainMessage<CollectionUpdateRequest> | undefined): boolean {
    return proto3.util.equals(CollectionUpdateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.sTest
 */
export class sTest extends Message<sTest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Georeference georeference = 5;
   */
  georeference?: Specimen_Georeference;

  constructor(data?: PartialMessage<sTest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.sTest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "georeference", kind: "message", T: Specimen_Georeference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): sTest {
    return new sTest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): sTest {
    return new sTest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): sTest {
    return new sTest().fromJsonString(jsonString, options);
  }

  static equals(a: sTest | PlainMessage<sTest> | undefined, b: sTest | PlainMessage<sTest> | undefined): boolean {
    return proto3.util.equals(sTest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SpecimenCreateRequest
 */
export class SpecimenCreateRequest extends Message<SpecimenCreateRequest> {
  /**
   *  Specimen specimen = 1 [(buf.validate.field).required = true];
   *
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  /**
   * @generated from field: ccbio.schema.v2.Specimen.Taxon taxon = 2;
   */
  taxon?: Specimen_Taxon;

  /**
   * @generated from field: ccbio.schema.v2.Specimen.Primary primary = 3;
   */
  primary?: Specimen_Primary;

  /**
   * @generated from field: ccbio.schema.v2.Specimen.Secondary secondary = 4;
   */
  secondary?: Specimen_Secondary;

  /**
   * @generated from field: ccbio.schema.v2.Specimen.Georeference georeference = 5;
   */
  georeference?: Specimen_Georeference;

  /**
   * @generated from field: map<string, ccbio.schema.v2.Specimen.Image> images = 7;
   */
  images: { [key: string]: Specimen_Image } = {};

  /**
   * @generated from field: string loans = 8;
   */
  loans = "";

  /**
   * @generated from field: string grants = 9;
   */
  grants = "";

  constructor(data?: PartialMessage<SpecimenCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
    { no: 2, name: "taxon", kind: "message", T: Specimen_Taxon },
    { no: 3, name: "primary", kind: "message", T: Specimen_Primary },
    { no: 4, name: "secondary", kind: "message", T: Specimen_Secondary },
    { no: 5, name: "georeference", kind: "message", T: Specimen_Georeference },
    { no: 7, name: "images", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Specimen_Image} },
    { no: 8, name: "loans", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "grants", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenCreateRequest {
    return new SpecimenCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenCreateRequest {
    return new SpecimenCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenCreateRequest {
    return new SpecimenCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenCreateRequest | PlainMessage<SpecimenCreateRequest> | undefined, b: SpecimenCreateRequest | PlainMessage<SpecimenCreateRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenCreateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SpecimenCreateResponse
 */
export class SpecimenCreateResponse extends Message<SpecimenCreateResponse> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenCreateResponse {
    return new SpecimenCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenCreateResponse {
    return new SpecimenCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenCreateResponse {
    return new SpecimenCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenCreateResponse | PlainMessage<SpecimenCreateResponse> | undefined, b: SpecimenCreateResponse | PlainMessage<SpecimenCreateResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenCreateResponse, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SpecimenUpdateRequest
 */
export class SpecimenUpdateRequest extends Message<SpecimenUpdateRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenUpdateRequest {
    return new SpecimenUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenUpdateRequest {
    return new SpecimenUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenUpdateRequest {
    return new SpecimenUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenUpdateRequest | PlainMessage<SpecimenUpdateRequest> | undefined, b: SpecimenUpdateRequest | PlainMessage<SpecimenUpdateRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenUpdateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SpecimenHideTxRequest
 */
export class SpecimenHideTxRequest extends Message<SpecimenHideTxRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  /**
   * @generated from field: ccbio.schema.v2.Specimen.HiddenTx tx = 2;
   */
  tx?: Specimen_HiddenTx;

  constructor(data?: PartialMessage<SpecimenHideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenHideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
    { no: 2, name: "tx", kind: "message", T: Specimen_HiddenTx },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenHideTxRequest {
    return new SpecimenHideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenHideTxRequest {
    return new SpecimenHideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenHideTxRequest {
    return new SpecimenHideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenHideTxRequest | PlainMessage<SpecimenHideTxRequest> | undefined, b: SpecimenHideTxRequest | PlainMessage<SpecimenHideTxRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenHideTxRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SpecimenUnHideTxRequest
 */
export class SpecimenUnHideTxRequest extends Message<SpecimenUnHideTxRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  /**
   * @generated from field: ccbio.schema.v2.Specimen.HiddenTx tx = 2;
   */
  tx?: Specimen_HiddenTx;

  constructor(data?: PartialMessage<SpecimenUnHideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenUnHideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
    { no: 2, name: "tx", kind: "message", T: Specimen_HiddenTx },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenUnHideTxRequest {
    return new SpecimenUnHideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenUnHideTxRequest {
    return new SpecimenUnHideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenUnHideTxRequest {
    return new SpecimenUnHideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenUnHideTxRequest | PlainMessage<SpecimenUnHideTxRequest> | undefined, b: SpecimenUnHideTxRequest | PlainMessage<SpecimenUnHideTxRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenUnHideTxRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SpecimenDeleteRequest
 */
export class SpecimenDeleteRequest extends Message<SpecimenDeleteRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  constructor(data?: PartialMessage<SpecimenDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDeleteRequest {
    return new SpecimenDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDeleteRequest {
    return new SpecimenDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDeleteRequest {
    return new SpecimenDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDeleteRequest | PlainMessage<SpecimenDeleteRequest> | undefined, b: SpecimenDeleteRequest | PlainMessage<SpecimenDeleteRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenDeleteRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SuggestedUpdateCreateRequest
 */
export class SuggestedUpdateCreateRequest extends Message<SuggestedUpdateCreateRequest> {
  /**
   * @generated from field: ccbio.schema.v2.SuggestedUpdate suggested_update = 1;
   */
  suggestedUpdate?: SuggestedUpdate;

  constructor(data?: PartialMessage<SuggestedUpdateCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SuggestedUpdateCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggested_update", kind: "message", T: SuggestedUpdate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestedUpdateCreateRequest {
    return new SuggestedUpdateCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestedUpdateCreateRequest {
    return new SuggestedUpdateCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestedUpdateCreateRequest {
    return new SuggestedUpdateCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestedUpdateCreateRequest | PlainMessage<SuggestedUpdateCreateRequest> | undefined, b: SuggestedUpdateCreateRequest | PlainMessage<SuggestedUpdateCreateRequest> | undefined): boolean {
    return proto3.util.equals(SuggestedUpdateCreateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SuggestedUpdateApproveRequest
 */
export class SuggestedUpdateApproveRequest extends Message<SuggestedUpdateApproveRequest> {
  /**
   * @generated from field: ccbio.schema.v2.SuggestedUpdate.Id id = 1;
   */
  id?: SuggestedUpdate_Id;

  /**
   * @generated from field: string comment = 2;
   */
  comment = "";

  constructor(data?: PartialMessage<SuggestedUpdateApproveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SuggestedUpdateApproveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: SuggestedUpdate_Id },
    { no: 2, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestedUpdateApproveRequest {
    return new SuggestedUpdateApproveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestedUpdateApproveRequest {
    return new SuggestedUpdateApproveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestedUpdateApproveRequest {
    return new SuggestedUpdateApproveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestedUpdateApproveRequest | PlainMessage<SuggestedUpdateApproveRequest> | undefined, b: SuggestedUpdateApproveRequest | PlainMessage<SuggestedUpdateApproveRequest> | undefined): boolean {
    return proto3.util.equals(SuggestedUpdateApproveRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SuggestedUpdateRejectRequest
 */
export class SuggestedUpdateRejectRequest extends Message<SuggestedUpdateRejectRequest> {
  /**
   * @generated from field: ccbio.schema.v2.SuggestedUpdate.Id id = 1;
   */
  id?: SuggestedUpdate_Id;

  /**
   * @generated from field: string comment = 2;
   */
  comment = "";

  constructor(data?: PartialMessage<SuggestedUpdateRejectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SuggestedUpdateRejectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: SuggestedUpdate_Id },
    { no: 2, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestedUpdateRejectRequest {
    return new SuggestedUpdateRejectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestedUpdateRejectRequest {
    return new SuggestedUpdateRejectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestedUpdateRejectRequest {
    return new SuggestedUpdateRejectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestedUpdateRejectRequest | PlainMessage<SuggestedUpdateRejectRequest> | undefined, b: SuggestedUpdateRejectRequest | PlainMessage<SuggestedUpdateRejectRequest> | undefined): boolean {
    return proto3.util.equals(SuggestedUpdateRejectRequest, a, b);
  }
}

