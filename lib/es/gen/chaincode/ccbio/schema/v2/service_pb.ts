// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file chaincode/ccbio/schema/v2/service.proto (package ccbio.schema.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { Specimen, Specimen_HiddenTx, Specimen_History, Specimen_Id, SuggestedUpdate, SuggestedUpdate_Id } from "./state_pb.js";
import { Collection_Id } from "../../../../rbac/rbac_pb.js";

/**
 * Evaluate
 * GetSpecimen
 *
 * @generated from message ccbio.schema.v2.GetSpecimenRequest
 */
export class GetSpecimenRequest extends Message<GetSpecimenRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  constructor(data?: PartialMessage<GetSpecimenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSpecimenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpecimenRequest {
    return new GetSpecimenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpecimenRequest {
    return new GetSpecimenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpecimenRequest {
    return new GetSpecimenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpecimenRequest | PlainMessage<GetSpecimenRequest> | undefined, b: GetSpecimenRequest | PlainMessage<GetSpecimenRequest> | undefined): boolean {
    return proto3.util.equals(GetSpecimenRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetSpecimenResponse
 */
export class GetSpecimenResponse extends Message<GetSpecimenResponse> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<GetSpecimenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSpecimenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpecimenResponse {
    return new GetSpecimenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpecimenResponse {
    return new GetSpecimenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpecimenResponse {
    return new GetSpecimenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpecimenResponse | PlainMessage<GetSpecimenResponse> | undefined, b: GetSpecimenResponse | PlainMessage<GetSpecimenResponse> | undefined): boolean {
    return proto3.util.equals(GetSpecimenResponse, a, b);
  }
}

/**
 * GetSpecimenList
 *
 * @generated from message ccbio.schema.v2.GetSpecimenListResponse
 */
export class GetSpecimenListResponse extends Message<GetSpecimenListResponse> {
  /**
   * @generated from field: repeated ccbio.schema.v2.Specimen specimens = 1;
   */
  specimens: Specimen[] = [];

  constructor(data?: PartialMessage<GetSpecimenListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSpecimenListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimens", kind: "message", T: Specimen, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpecimenListResponse {
    return new GetSpecimenListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpecimenListResponse {
    return new GetSpecimenListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpecimenListResponse {
    return new GetSpecimenListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpecimenListResponse | PlainMessage<GetSpecimenListResponse> | undefined, b: GetSpecimenListResponse | PlainMessage<GetSpecimenListResponse> | undefined): boolean {
    return proto3.util.equals(GetSpecimenListResponse, a, b);
  }
}

/**
 * GetSpecimenByCollection
 *
 * @generated from message ccbio.schema.v2.GetSpecimenByCollectionRequest
 */
export class GetSpecimenByCollectionRequest extends Message<GetSpecimenByCollectionRequest> {
  /**
   * @generated from field: rbac.Collection.Id id = 1;
   */
  id?: Collection_Id;

  constructor(data?: PartialMessage<GetSpecimenByCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSpecimenByCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Collection_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpecimenByCollectionRequest {
    return new GetSpecimenByCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpecimenByCollectionRequest {
    return new GetSpecimenByCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpecimenByCollectionRequest {
    return new GetSpecimenByCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpecimenByCollectionRequest | PlainMessage<GetSpecimenByCollectionRequest> | undefined, b: GetSpecimenByCollectionRequest | PlainMessage<GetSpecimenByCollectionRequest> | undefined): boolean {
    return proto3.util.equals(GetSpecimenByCollectionRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetSpecimenByCollectionResponse
 */
export class GetSpecimenByCollectionResponse extends Message<GetSpecimenByCollectionResponse> {
  /**
   * @generated from field: repeated ccbio.schema.v2.Specimen specimens = 1;
   */
  specimens: Specimen[] = [];

  constructor(data?: PartialMessage<GetSpecimenByCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSpecimenByCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimens", kind: "message", T: Specimen, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpecimenByCollectionResponse {
    return new GetSpecimenByCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpecimenByCollectionResponse {
    return new GetSpecimenByCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpecimenByCollectionResponse {
    return new GetSpecimenByCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpecimenByCollectionResponse | PlainMessage<GetSpecimenByCollectionResponse> | undefined, b: GetSpecimenByCollectionResponse | PlainMessage<GetSpecimenByCollectionResponse> | undefined): boolean {
    return proto3.util.equals(GetSpecimenByCollectionResponse, a, b);
  }
}

/**
 * GetSpecimenHistory
 *
 * @generated from message ccbio.schema.v2.GetSpecimenHistoryRequest
 */
export class GetSpecimenHistoryRequest extends Message<GetSpecimenHistoryRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  /**
   * @generated from field: bool include_hidden = 2;
   */
  includeHidden = false;

  constructor(data?: PartialMessage<GetSpecimenHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSpecimenHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
    { no: 2, name: "include_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpecimenHistoryRequest {
    return new GetSpecimenHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpecimenHistoryRequest {
    return new GetSpecimenHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpecimenHistoryRequest {
    return new GetSpecimenHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpecimenHistoryRequest | PlainMessage<GetSpecimenHistoryRequest> | undefined, b: GetSpecimenHistoryRequest | PlainMessage<GetSpecimenHistoryRequest> | undefined): boolean {
    return proto3.util.equals(GetSpecimenHistoryRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetSpecimenHistoryResponse
 */
export class GetSpecimenHistoryResponse extends Message<GetSpecimenHistoryResponse> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.History history = 1;
   */
  history?: Specimen_History;

  constructor(data?: PartialMessage<GetSpecimenHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSpecimenHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "history", kind: "message", T: Specimen_History },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpecimenHistoryResponse {
    return new GetSpecimenHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpecimenHistoryResponse {
    return new GetSpecimenHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpecimenHistoryResponse {
    return new GetSpecimenHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpecimenHistoryResponse | PlainMessage<GetSpecimenHistoryResponse> | undefined, b: GetSpecimenHistoryResponse | PlainMessage<GetSpecimenHistoryResponse> | undefined): boolean {
    return proto3.util.equals(GetSpecimenHistoryResponse, a, b);
  }
}

/**
 * SpecimenCreate
 *
 * @generated from message ccbio.schema.v2.SpecimenCreateRequest
 */
export class SpecimenCreateRequest extends Message<SpecimenCreateRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenCreateRequest {
    return new SpecimenCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenCreateRequest {
    return new SpecimenCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenCreateRequest {
    return new SpecimenCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenCreateRequest | PlainMessage<SpecimenCreateRequest> | undefined, b: SpecimenCreateRequest | PlainMessage<SpecimenCreateRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenCreateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SpecimenCreateResponse
 */
export class SpecimenCreateResponse extends Message<SpecimenCreateResponse> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenCreateResponse {
    return new SpecimenCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenCreateResponse {
    return new SpecimenCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenCreateResponse {
    return new SpecimenCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenCreateResponse | PlainMessage<SpecimenCreateResponse> | undefined, b: SpecimenCreateResponse | PlainMessage<SpecimenCreateResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenCreateResponse, a, b);
  }
}

/**
 * SpecimenUpdate
 *
 * @generated from message ccbio.schema.v2.SpecimenUpdateRequest
 */
export class SpecimenUpdateRequest extends Message<SpecimenUpdateRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<SpecimenUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenUpdateRequest {
    return new SpecimenUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenUpdateRequest {
    return new SpecimenUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenUpdateRequest {
    return new SpecimenUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenUpdateRequest | PlainMessage<SpecimenUpdateRequest> | undefined, b: SpecimenUpdateRequest | PlainMessage<SpecimenUpdateRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenUpdateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SpecimenUpdateResponse
 */
export class SpecimenUpdateResponse extends Message<SpecimenUpdateResponse> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<SpecimenUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenUpdateResponse {
    return new SpecimenUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenUpdateResponse {
    return new SpecimenUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenUpdateResponse {
    return new SpecimenUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenUpdateResponse | PlainMessage<SpecimenUpdateResponse> | undefined, b: SpecimenUpdateResponse | PlainMessage<SpecimenUpdateResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenUpdateResponse, a, b);
  }
}

/**
 * SpecimenDelete
 *
 * @generated from message ccbio.schema.v2.SpecimenDeleteRequest
 */
export class SpecimenDeleteRequest extends Message<SpecimenDeleteRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  constructor(data?: PartialMessage<SpecimenDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDeleteRequest {
    return new SpecimenDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDeleteRequest {
    return new SpecimenDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDeleteRequest {
    return new SpecimenDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDeleteRequest | PlainMessage<SpecimenDeleteRequest> | undefined, b: SpecimenDeleteRequest | PlainMessage<SpecimenDeleteRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenDeleteRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SpecimenDeleteResponse
 */
export class SpecimenDeleteResponse extends Message<SpecimenDeleteResponse> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDeleteResponse {
    return new SpecimenDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDeleteResponse {
    return new SpecimenDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDeleteResponse {
    return new SpecimenDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDeleteResponse | PlainMessage<SpecimenDeleteResponse> | undefined, b: SpecimenDeleteResponse | PlainMessage<SpecimenDeleteResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenDeleteResponse, a, b);
  }
}

/**
 * SpecimenHideTx
 *
 * @generated from message ccbio.schema.v2.SpecimenHideTxRequest
 */
export class SpecimenHideTxRequest extends Message<SpecimenHideTxRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  /**
   * @generated from field: ccbio.schema.v2.Specimen.HiddenTx tx = 2;
   */
  tx?: Specimen_HiddenTx;

  constructor(data?: PartialMessage<SpecimenHideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenHideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
    { no: 2, name: "tx", kind: "message", T: Specimen_HiddenTx },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenHideTxRequest {
    return new SpecimenHideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenHideTxRequest {
    return new SpecimenHideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenHideTxRequest {
    return new SpecimenHideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenHideTxRequest | PlainMessage<SpecimenHideTxRequest> | undefined, b: SpecimenHideTxRequest | PlainMessage<SpecimenHideTxRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenHideTxRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SpecimenHideTxResponse
 */
export class SpecimenHideTxResponse extends Message<SpecimenHideTxResponse> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenHideTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenHideTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenHideTxResponse {
    return new SpecimenHideTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenHideTxResponse {
    return new SpecimenHideTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenHideTxResponse {
    return new SpecimenHideTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenHideTxResponse | PlainMessage<SpecimenHideTxResponse> | undefined, b: SpecimenHideTxResponse | PlainMessage<SpecimenHideTxResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenHideTxResponse, a, b);
  }
}

/**
 * SpecimenUnHideTx
 *
 * @generated from message ccbio.schema.v2.SpecimenUnHideTxRequest
 */
export class SpecimenUnHideTxRequest extends Message<SpecimenUnHideTxRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  /**
   * @generated from field: ccbio.schema.v2.Specimen.HiddenTx tx = 2;
   */
  tx?: Specimen_HiddenTx;

  constructor(data?: PartialMessage<SpecimenUnHideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenUnHideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
    { no: 2, name: "tx", kind: "message", T: Specimen_HiddenTx },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenUnHideTxRequest {
    return new SpecimenUnHideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenUnHideTxRequest {
    return new SpecimenUnHideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenUnHideTxRequest {
    return new SpecimenUnHideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenUnHideTxRequest | PlainMessage<SpecimenUnHideTxRequest> | undefined, b: SpecimenUnHideTxRequest | PlainMessage<SpecimenUnHideTxRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenUnHideTxRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SpecimenUnHideTxResponse
 */
export class SpecimenUnHideTxResponse extends Message<SpecimenUnHideTxResponse> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenUnHideTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SpecimenUnHideTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenUnHideTxResponse {
    return new SpecimenUnHideTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenUnHideTxResponse {
    return new SpecimenUnHideTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenUnHideTxResponse {
    return new SpecimenUnHideTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenUnHideTxResponse | PlainMessage<SpecimenUnHideTxResponse> | undefined, b: SpecimenUnHideTxResponse | PlainMessage<SpecimenUnHideTxResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenUnHideTxResponse, a, b);
  }
}

/**
 * GetSuggestedUpdate
 *
 * @generated from message ccbio.schema.v2.GetSuggestedUpdateRequest
 */
export class GetSuggestedUpdateRequest extends Message<GetSuggestedUpdateRequest> {
  /**
   * @generated from field: ccbio.schema.v2.SuggestedUpdate.Id id = 1;
   */
  id?: SuggestedUpdate_Id;

  constructor(data?: PartialMessage<GetSuggestedUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSuggestedUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: SuggestedUpdate_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedUpdateRequest {
    return new GetSuggestedUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedUpdateRequest {
    return new GetSuggestedUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedUpdateRequest {
    return new GetSuggestedUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedUpdateRequest | PlainMessage<GetSuggestedUpdateRequest> | undefined, b: GetSuggestedUpdateRequest | PlainMessage<GetSuggestedUpdateRequest> | undefined): boolean {
    return proto3.util.equals(GetSuggestedUpdateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetSuggestedUpdateResponse
 */
export class GetSuggestedUpdateResponse extends Message<GetSuggestedUpdateResponse> {
  /**
   * @generated from field: ccbio.schema.v2.SuggestedUpdate suggested_update = 1;
   */
  suggestedUpdate?: SuggestedUpdate;

  constructor(data?: PartialMessage<GetSuggestedUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSuggestedUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggested_update", kind: "message", T: SuggestedUpdate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedUpdateResponse {
    return new GetSuggestedUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedUpdateResponse {
    return new GetSuggestedUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedUpdateResponse {
    return new GetSuggestedUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedUpdateResponse | PlainMessage<GetSuggestedUpdateResponse> | undefined, b: GetSuggestedUpdateResponse | PlainMessage<GetSuggestedUpdateResponse> | undefined): boolean {
    return proto3.util.equals(GetSuggestedUpdateResponse, a, b);
  }
}

/**
 * GetSuggestedUpdateBySpecimen
 *
 * @generated from message ccbio.schema.v2.GetSuggestedUpdateBySpecimenRequest
 */
export class GetSuggestedUpdateBySpecimenRequest extends Message<GetSuggestedUpdateBySpecimenRequest> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen.Id id = 1;
   */
  id?: Specimen_Id;

  constructor(data?: PartialMessage<GetSuggestedUpdateBySpecimenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSuggestedUpdateBySpecimenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Specimen_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedUpdateBySpecimenRequest {
    return new GetSuggestedUpdateBySpecimenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedUpdateBySpecimenRequest {
    return new GetSuggestedUpdateBySpecimenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedUpdateBySpecimenRequest {
    return new GetSuggestedUpdateBySpecimenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedUpdateBySpecimenRequest | PlainMessage<GetSuggestedUpdateBySpecimenRequest> | undefined, b: GetSuggestedUpdateBySpecimenRequest | PlainMessage<GetSuggestedUpdateBySpecimenRequest> | undefined): boolean {
    return proto3.util.equals(GetSuggestedUpdateBySpecimenRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetSuggestedUpdateBySpecimenResponse
 */
export class GetSuggestedUpdateBySpecimenResponse extends Message<GetSuggestedUpdateBySpecimenResponse> {
  /**
   * @generated from field: repeated ccbio.schema.v2.SuggestedUpdate suggested_updates = 1;
   */
  suggestedUpdates: SuggestedUpdate[] = [];

  constructor(data?: PartialMessage<GetSuggestedUpdateBySpecimenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSuggestedUpdateBySpecimenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggested_updates", kind: "message", T: SuggestedUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedUpdateBySpecimenResponse {
    return new GetSuggestedUpdateBySpecimenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedUpdateBySpecimenResponse {
    return new GetSuggestedUpdateBySpecimenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedUpdateBySpecimenResponse {
    return new GetSuggestedUpdateBySpecimenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedUpdateBySpecimenResponse | PlainMessage<GetSuggestedUpdateBySpecimenResponse> | undefined, b: GetSuggestedUpdateBySpecimenResponse | PlainMessage<GetSuggestedUpdateBySpecimenResponse> | undefined): boolean {
    return proto3.util.equals(GetSuggestedUpdateBySpecimenResponse, a, b);
  }
}

/**
 * GetSuggestedUpdateByCollection
 *
 * @generated from message ccbio.schema.v2.GetSuggestedUpdateByCollectionRequest
 */
export class GetSuggestedUpdateByCollectionRequest extends Message<GetSuggestedUpdateByCollectionRequest> {
  /**
   * @generated from field: rbac.Collection.Id id = 1;
   */
  id?: Collection_Id;

  constructor(data?: PartialMessage<GetSuggestedUpdateByCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSuggestedUpdateByCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Collection_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedUpdateByCollectionRequest {
    return new GetSuggestedUpdateByCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedUpdateByCollectionRequest {
    return new GetSuggestedUpdateByCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedUpdateByCollectionRequest {
    return new GetSuggestedUpdateByCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedUpdateByCollectionRequest | PlainMessage<GetSuggestedUpdateByCollectionRequest> | undefined, b: GetSuggestedUpdateByCollectionRequest | PlainMessage<GetSuggestedUpdateByCollectionRequest> | undefined): boolean {
    return proto3.util.equals(GetSuggestedUpdateByCollectionRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.GetSuggestedUpdateByCollectionResponse
 */
export class GetSuggestedUpdateByCollectionResponse extends Message<GetSuggestedUpdateByCollectionResponse> {
  /**
   * @generated from field: repeated ccbio.schema.v2.SuggestedUpdate suggested_updates = 1;
   */
  suggestedUpdates: SuggestedUpdate[] = [];

  constructor(data?: PartialMessage<GetSuggestedUpdateByCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSuggestedUpdateByCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggested_updates", kind: "message", T: SuggestedUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedUpdateByCollectionResponse {
    return new GetSuggestedUpdateByCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedUpdateByCollectionResponse {
    return new GetSuggestedUpdateByCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedUpdateByCollectionResponse {
    return new GetSuggestedUpdateByCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedUpdateByCollectionResponse | PlainMessage<GetSuggestedUpdateByCollectionResponse> | undefined, b: GetSuggestedUpdateByCollectionResponse | PlainMessage<GetSuggestedUpdateByCollectionResponse> | undefined): boolean {
    return proto3.util.equals(GetSuggestedUpdateByCollectionResponse, a, b);
  }
}

/**
 * GetSuggestedUpdateListResponse
 *
 * @generated from message ccbio.schema.v2.GetSuggestedUpdateListResponse
 */
export class GetSuggestedUpdateListResponse extends Message<GetSuggestedUpdateListResponse> {
  /**
   * @generated from field: repeated ccbio.schema.v2.SuggestedUpdate suggested_updates = 1;
   */
  suggestedUpdates: SuggestedUpdate[] = [];

  constructor(data?: PartialMessage<GetSuggestedUpdateListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.GetSuggestedUpdateListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggested_updates", kind: "message", T: SuggestedUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedUpdateListResponse {
    return new GetSuggestedUpdateListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedUpdateListResponse {
    return new GetSuggestedUpdateListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedUpdateListResponse {
    return new GetSuggestedUpdateListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedUpdateListResponse | PlainMessage<GetSuggestedUpdateListResponse> | undefined, b: GetSuggestedUpdateListResponse | PlainMessage<GetSuggestedUpdateListResponse> | undefined): boolean {
    return proto3.util.equals(GetSuggestedUpdateListResponse, a, b);
  }
}

/**
 * SuggestedUpdateCreate
 *
 * @generated from message ccbio.schema.v2.SuggestedUpdateCreateRequest
 */
export class SuggestedUpdateCreateRequest extends Message<SuggestedUpdateCreateRequest> {
  /**
   * @generated from field: ccbio.schema.v2.SuggestedUpdate suggested_update = 1;
   */
  suggestedUpdate?: SuggestedUpdate;

  constructor(data?: PartialMessage<SuggestedUpdateCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SuggestedUpdateCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggested_update", kind: "message", T: SuggestedUpdate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestedUpdateCreateRequest {
    return new SuggestedUpdateCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestedUpdateCreateRequest {
    return new SuggestedUpdateCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestedUpdateCreateRequest {
    return new SuggestedUpdateCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestedUpdateCreateRequest | PlainMessage<SuggestedUpdateCreateRequest> | undefined, b: SuggestedUpdateCreateRequest | PlainMessage<SuggestedUpdateCreateRequest> | undefined): boolean {
    return proto3.util.equals(SuggestedUpdateCreateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SuggestedUpdateCreateResponse
 */
export class SuggestedUpdateCreateResponse extends Message<SuggestedUpdateCreateResponse> {
  /**
   * @generated from field: ccbio.schema.v2.SuggestedUpdate suggested_update = 1;
   */
  suggestedUpdate?: SuggestedUpdate;

  constructor(data?: PartialMessage<SuggestedUpdateCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SuggestedUpdateCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggested_update", kind: "message", T: SuggestedUpdate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestedUpdateCreateResponse {
    return new SuggestedUpdateCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestedUpdateCreateResponse {
    return new SuggestedUpdateCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestedUpdateCreateResponse {
    return new SuggestedUpdateCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestedUpdateCreateResponse | PlainMessage<SuggestedUpdateCreateResponse> | undefined, b: SuggestedUpdateCreateResponse | PlainMessage<SuggestedUpdateCreateResponse> | undefined): boolean {
    return proto3.util.equals(SuggestedUpdateCreateResponse, a, b);
  }
}

/**
 * SpecimenUpdateApprove
 *
 * @generated from message ccbio.schema.v2.SuggestedUpdateApproveRequest
 */
export class SuggestedUpdateApproveRequest extends Message<SuggestedUpdateApproveRequest> {
  /**
   * @generated from field: ccbio.schema.v2.SuggestedUpdate.Id id = 1;
   */
  id?: SuggestedUpdate_Id;

  /**
   * @generated from field: string comment = 2;
   */
  comment = "";

  constructor(data?: PartialMessage<SuggestedUpdateApproveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SuggestedUpdateApproveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: SuggestedUpdate_Id },
    { no: 2, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestedUpdateApproveRequest {
    return new SuggestedUpdateApproveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestedUpdateApproveRequest {
    return new SuggestedUpdateApproveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestedUpdateApproveRequest {
    return new SuggestedUpdateApproveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestedUpdateApproveRequest | PlainMessage<SuggestedUpdateApproveRequest> | undefined, b: SuggestedUpdateApproveRequest | PlainMessage<SuggestedUpdateApproveRequest> | undefined): boolean {
    return proto3.util.equals(SuggestedUpdateApproveRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SuggestedUpdateApproveResponse
 */
export class SuggestedUpdateApproveResponse extends Message<SuggestedUpdateApproveResponse> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SuggestedUpdateApproveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SuggestedUpdateApproveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestedUpdateApproveResponse {
    return new SuggestedUpdateApproveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestedUpdateApproveResponse {
    return new SuggestedUpdateApproveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestedUpdateApproveResponse {
    return new SuggestedUpdateApproveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestedUpdateApproveResponse | PlainMessage<SuggestedUpdateApproveResponse> | undefined, b: SuggestedUpdateApproveResponse | PlainMessage<SuggestedUpdateApproveResponse> | undefined): boolean {
    return proto3.util.equals(SuggestedUpdateApproveResponse, a, b);
  }
}

/**
 * SpecimenUpdateReject
 *
 * @generated from message ccbio.schema.v2.SuggestedUpdateRejectRequest
 */
export class SuggestedUpdateRejectRequest extends Message<SuggestedUpdateRejectRequest> {
  /**
   * @generated from field: ccbio.schema.v2.SuggestedUpdate.Id id = 1;
   */
  id?: SuggestedUpdate_Id;

  /**
   * @generated from field: string comment = 2;
   */
  comment = "";

  constructor(data?: PartialMessage<SuggestedUpdateRejectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SuggestedUpdateRejectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: SuggestedUpdate_Id },
    { no: 2, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestedUpdateRejectRequest {
    return new SuggestedUpdateRejectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestedUpdateRejectRequest {
    return new SuggestedUpdateRejectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestedUpdateRejectRequest {
    return new SuggestedUpdateRejectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestedUpdateRejectRequest | PlainMessage<SuggestedUpdateRejectRequest> | undefined, b: SuggestedUpdateRejectRequest | PlainMessage<SuggestedUpdateRejectRequest> | undefined): boolean {
    return proto3.util.equals(SuggestedUpdateRejectRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v2.SuggestedUpdateRejectResponse
 */
export class SuggestedUpdateRejectResponse extends Message<SuggestedUpdateRejectResponse> {
  /**
   * @generated from field: ccbio.schema.v2.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SuggestedUpdateRejectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v2.SuggestedUpdateRejectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestedUpdateRejectResponse {
    return new SuggestedUpdateRejectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestedUpdateRejectResponse {
    return new SuggestedUpdateRejectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestedUpdateRejectResponse {
    return new SuggestedUpdateRejectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestedUpdateRejectResponse | PlainMessage<SuggestedUpdateRejectResponse> | undefined, b: SuggestedUpdateRejectResponse | PlainMessage<SuggestedUpdateRejectResponse> | undefined): boolean {
    return proto3.util.equals(SuggestedUpdateRejectResponse, a, b);
  }
}
