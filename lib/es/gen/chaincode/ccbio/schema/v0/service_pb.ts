// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file chaincode/ccbio/schema/v0/service.proto (package ccbio.schema.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { Specimen } from "./state_pb.js";
import { StateActivity } from "../../../../auth/v1/auth_pb.js";

/**
 * Evaluate
 * SpecimenGet
 *
 * @generated from message ccbio.schema.v0.SpecimenGetRequest
 */
export class SpecimenGetRequest extends Message<SpecimenGetRequest> {
  /**
   * Specimen.Id id = 1 [(buf.validate.field).required = true];
   *
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string specimen_id = 2;
   */
  specimenId = "";

  constructor(data?: PartialMessage<SpecimenGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "specimen_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenGetRequest {
    return new SpecimenGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenGetRequest {
    return new SpecimenGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenGetRequest {
    return new SpecimenGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenGetRequest | PlainMessage<SpecimenGetRequest> | undefined, b: SpecimenGetRequest | PlainMessage<SpecimenGetRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenGetRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v0.SpecimenGetResponse
 */
export class SpecimenGetResponse extends Message<SpecimenGetResponse> {
  /**
   * @generated from field: ccbio.schema.v0.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenGetResponse {
    return new SpecimenGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenGetResponse {
    return new SpecimenGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenGetResponse {
    return new SpecimenGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenGetResponse | PlainMessage<SpecimenGetResponse> | undefined, b: SpecimenGetResponse | PlainMessage<SpecimenGetResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenGetResponse, a, b);
  }
}

/**
 * SpecimenGetList
 *
 * @generated from message ccbio.schema.v0.SpecimenGetListRequest
 */
export class SpecimenGetListRequest extends Message<SpecimenGetListRequest> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<SpecimenGetListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenGetListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenGetListRequest {
    return new SpecimenGetListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenGetListRequest {
    return new SpecimenGetListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenGetListRequest {
    return new SpecimenGetListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenGetListRequest | PlainMessage<SpecimenGetListRequest> | undefined, b: SpecimenGetListRequest | PlainMessage<SpecimenGetListRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenGetListRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v0.SpecimenGetListResponse
 */
export class SpecimenGetListResponse extends Message<SpecimenGetListResponse> {
  /**
   * @generated from field: string bookmark = 1;
   */
  bookmark = "";

  /**
   * @generated from field: repeated ccbio.schema.v0.Specimen specimens = 2;
   */
  specimens: Specimen[] = [];

  constructor(data?: PartialMessage<SpecimenGetListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenGetListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "specimens", kind: "message", T: Specimen, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenGetListResponse {
    return new SpecimenGetListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenGetListResponse {
    return new SpecimenGetListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenGetListResponse {
    return new SpecimenGetListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenGetListResponse | PlainMessage<SpecimenGetListResponse> | undefined, b: SpecimenGetListResponse | PlainMessage<SpecimenGetListResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenGetListResponse, a, b);
  }
}

/**
 * SpecimenGetByCollection
 *
 * @generated from message ccbio.schema.v0.SpecimenGetByCollectionRequest
 */
export class SpecimenGetByCollectionRequest extends Message<SpecimenGetByCollectionRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  constructor(data?: PartialMessage<SpecimenGetByCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenGetByCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenGetByCollectionRequest {
    return new SpecimenGetByCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenGetByCollectionRequest {
    return new SpecimenGetByCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenGetByCollectionRequest {
    return new SpecimenGetByCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenGetByCollectionRequest | PlainMessage<SpecimenGetByCollectionRequest> | undefined, b: SpecimenGetByCollectionRequest | PlainMessage<SpecimenGetByCollectionRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenGetByCollectionRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v0.SpecimenGetByCollectionResponse
 */
export class SpecimenGetByCollectionResponse extends Message<SpecimenGetByCollectionResponse> {
  /**
   * @generated from field: repeated ccbio.schema.v0.Specimen specimens = 1;
   */
  specimens: Specimen[] = [];

  constructor(data?: PartialMessage<SpecimenGetByCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenGetByCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimens", kind: "message", T: Specimen, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenGetByCollectionResponse {
    return new SpecimenGetByCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenGetByCollectionResponse {
    return new SpecimenGetByCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenGetByCollectionResponse {
    return new SpecimenGetByCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenGetByCollectionResponse | PlainMessage<SpecimenGetByCollectionResponse> | undefined, b: SpecimenGetByCollectionResponse | PlainMessage<SpecimenGetByCollectionResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenGetByCollectionResponse, a, b);
  }
}

/**
 * SpecimenGetHistory
 *
 * @generated from message ccbio.schema.v0.SpecimenGetHistoryRequest
 */
export class SpecimenGetHistoryRequest extends Message<SpecimenGetHistoryRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string specimen_id = 2;
   */
  specimenId = "";

  /**
   * @generated from field: bool include_hidden = 3;
   */
  includeHidden = false;

  constructor(data?: PartialMessage<SpecimenGetHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenGetHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "specimen_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "include_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenGetHistoryRequest {
    return new SpecimenGetHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenGetHistoryRequest {
    return new SpecimenGetHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenGetHistoryRequest {
    return new SpecimenGetHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenGetHistoryRequest | PlainMessage<SpecimenGetHistoryRequest> | undefined, b: SpecimenGetHistoryRequest | PlainMessage<SpecimenGetHistoryRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenGetHistoryRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v0.SpecimenGetHistoryResponse
 */
export class SpecimenGetHistoryResponse extends Message<SpecimenGetHistoryResponse> {
  /**
   * @generated from field: auth.StateActivity history = 1;
   */
  history?: StateActivity;

  constructor(data?: PartialMessage<SpecimenGetHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenGetHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "history", kind: "message", T: StateActivity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenGetHistoryResponse {
    return new SpecimenGetHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenGetHistoryResponse {
    return new SpecimenGetHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenGetHistoryResponse {
    return new SpecimenGetHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenGetHistoryResponse | PlainMessage<SpecimenGetHistoryResponse> | undefined, b: SpecimenGetHistoryResponse | PlainMessage<SpecimenGetHistoryResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenGetHistoryResponse, a, b);
  }
}

/**
 * SpecimenCreate
 *
 * @generated from message ccbio.schema.v0.SpecimenCreateRequest
 */
export class SpecimenCreateRequest extends Message<SpecimenCreateRequest> {
  /**
   * @generated from field: ccbio.schema.v0.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenCreateRequest {
    return new SpecimenCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenCreateRequest {
    return new SpecimenCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenCreateRequest {
    return new SpecimenCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenCreateRequest | PlainMessage<SpecimenCreateRequest> | undefined, b: SpecimenCreateRequest | PlainMessage<SpecimenCreateRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenCreateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v0.SpecimenCreateResponse
 */
export class SpecimenCreateResponse extends Message<SpecimenCreateResponse> {
  /**
   * @generated from field: ccbio.schema.v0.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenCreateResponse {
    return new SpecimenCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenCreateResponse {
    return new SpecimenCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenCreateResponse {
    return new SpecimenCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenCreateResponse | PlainMessage<SpecimenCreateResponse> | undefined, b: SpecimenCreateResponse | PlainMessage<SpecimenCreateResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenCreateResponse, a, b);
  }
}

/**
 * SpecimenUpdate
 *
 * @generated from message ccbio.schema.v0.SpecimenUpdateRequest
 */
export class SpecimenUpdateRequest extends Message<SpecimenUpdateRequest> {
  /**
   * @generated from field: ccbio.schema.v0.Specimen specimen = 1;
   */
  specimen?: Specimen;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<SpecimenUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenUpdateRequest {
    return new SpecimenUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenUpdateRequest {
    return new SpecimenUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenUpdateRequest {
    return new SpecimenUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenUpdateRequest | PlainMessage<SpecimenUpdateRequest> | undefined, b: SpecimenUpdateRequest | PlainMessage<SpecimenUpdateRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenUpdateRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v0.SpecimenUpdateResponse
 */
export class SpecimenUpdateResponse extends Message<SpecimenUpdateResponse> {
  /**
   * @generated from field: ccbio.schema.v0.Specimen specimen = 1;
   */
  specimen?: Specimen;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<SpecimenUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenUpdateResponse {
    return new SpecimenUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenUpdateResponse {
    return new SpecimenUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenUpdateResponse {
    return new SpecimenUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenUpdateResponse | PlainMessage<SpecimenUpdateResponse> | undefined, b: SpecimenUpdateResponse | PlainMessage<SpecimenUpdateResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenUpdateResponse, a, b);
  }
}

/**
 * SpecimenDelete
 *
 * @generated from message ccbio.schema.v0.SpecimenDeleteRequest
 */
export class SpecimenDeleteRequest extends Message<SpecimenDeleteRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string specimen_id = 2;
   */
  specimenId = "";

  constructor(data?: PartialMessage<SpecimenDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "specimen_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDeleteRequest {
    return new SpecimenDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDeleteRequest {
    return new SpecimenDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDeleteRequest {
    return new SpecimenDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDeleteRequest | PlainMessage<SpecimenDeleteRequest> | undefined, b: SpecimenDeleteRequest | PlainMessage<SpecimenDeleteRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenDeleteRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v0.SpecimenDeleteResponse
 */
export class SpecimenDeleteResponse extends Message<SpecimenDeleteResponse> {
  /**
   * @generated from field: ccbio.schema.v0.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDeleteResponse {
    return new SpecimenDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDeleteResponse {
    return new SpecimenDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDeleteResponse {
    return new SpecimenDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDeleteResponse | PlainMessage<SpecimenDeleteResponse> | undefined, b: SpecimenDeleteResponse | PlainMessage<SpecimenDeleteResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenDeleteResponse, a, b);
  }
}

/**
 * SpecimenHideTx
 *
 * @generated from message ccbio.schema.v0.SpecimenHideTxRequest
 */
export class SpecimenHideTxRequest extends Message<SpecimenHideTxRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string specimen_id = 2;
   */
  specimenId = "";

  /**
   * @generated from field: auth.StateActivity tx = 3;
   */
  tx?: StateActivity;

  constructor(data?: PartialMessage<SpecimenHideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenHideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "specimen_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tx", kind: "message", T: StateActivity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenHideTxRequest {
    return new SpecimenHideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenHideTxRequest {
    return new SpecimenHideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenHideTxRequest {
    return new SpecimenHideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenHideTxRequest | PlainMessage<SpecimenHideTxRequest> | undefined, b: SpecimenHideTxRequest | PlainMessage<SpecimenHideTxRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenHideTxRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v0.SpecimenHideTxResponse
 */
export class SpecimenHideTxResponse extends Message<SpecimenHideTxResponse> {
  /**
   * @generated from field: ccbio.schema.v0.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenHideTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenHideTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenHideTxResponse {
    return new SpecimenHideTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenHideTxResponse {
    return new SpecimenHideTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenHideTxResponse {
    return new SpecimenHideTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenHideTxResponse | PlainMessage<SpecimenHideTxResponse> | undefined, b: SpecimenHideTxResponse | PlainMessage<SpecimenHideTxResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenHideTxResponse, a, b);
  }
}

/**
 * SpecimenUnHideTx
 *
 * @generated from message ccbio.schema.v0.SpecimenUnHideTxRequest
 */
export class SpecimenUnHideTxRequest extends Message<SpecimenUnHideTxRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string specimen_id = 2;
   */
  specimenId = "";

  /**
   * @generated from field: auth.StateActivity tx = 3;
   */
  tx?: StateActivity;

  constructor(data?: PartialMessage<SpecimenUnHideTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenUnHideTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "specimen_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tx", kind: "message", T: StateActivity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenUnHideTxRequest {
    return new SpecimenUnHideTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenUnHideTxRequest {
    return new SpecimenUnHideTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenUnHideTxRequest {
    return new SpecimenUnHideTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenUnHideTxRequest | PlainMessage<SpecimenUnHideTxRequest> | undefined, b: SpecimenUnHideTxRequest | PlainMessage<SpecimenUnHideTxRequest> | undefined): boolean {
    return proto3.util.equals(SpecimenUnHideTxRequest, a, b);
  }
}

/**
 * @generated from message ccbio.schema.v0.SpecimenUnHideTxResponse
 */
export class SpecimenUnHideTxResponse extends Message<SpecimenUnHideTxResponse> {
  /**
   * @generated from field: ccbio.schema.v0.Specimen specimen = 1;
   */
  specimen?: Specimen;

  constructor(data?: PartialMessage<SpecimenUnHideTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ccbio.schema.v0.SpecimenUnHideTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specimen", kind: "message", T: Specimen },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenUnHideTxResponse {
    return new SpecimenUnHideTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenUnHideTxResponse {
    return new SpecimenUnHideTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenUnHideTxResponse {
    return new SpecimenUnHideTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenUnHideTxResponse | PlainMessage<SpecimenUnHideTxResponse> | undefined, b: SpecimenUnHideTxResponse | PlainMessage<SpecimenUnHideTxResponse> | undefined): boolean {
    return proto3.util.equals(SpecimenUnHideTxResponse, a, b);
  }
}

