// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file chaincode/rbac/schema/v1/auth_service.proto (package rbac.schema.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ACL, Collection, Collection_Id, History, User, User_Id } from "../../../../rbac/rbac_pb.js";

/**
 * User
 * Query
 * UserGetCurrent
 *
 * @generated from message rbac.schema.v1.UserGetCurrentResponse
 */
export class UserGetCurrentResponse extends Message<UserGetCurrentResponse> {
  /**
   * @generated from field: rbac.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserGetCurrentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserGetCurrentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetCurrentResponse {
    return new UserGetCurrentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetCurrentResponse {
    return new UserGetCurrentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetCurrentResponse {
    return new UserGetCurrentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetCurrentResponse | PlainMessage<UserGetCurrentResponse> | undefined, b: UserGetCurrentResponse | PlainMessage<UserGetCurrentResponse> | undefined): boolean {
    return proto3.util.equals(UserGetCurrentResponse, a, b);
  }
}

/**
 * UserGetCurrentId
 *
 * @generated from message rbac.schema.v1.UserGetCurrentIdResponse
 */
export class UserGetCurrentIdResponse extends Message<UserGetCurrentIdResponse> {
  /**
   * @generated from field: rbac.User.Id user_id = 1;
   */
  userId?: User_Id;

  constructor(data?: PartialMessage<UserGetCurrentIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserGetCurrentIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "message", T: User_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetCurrentIdResponse {
    return new UserGetCurrentIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetCurrentIdResponse {
    return new UserGetCurrentIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetCurrentIdResponse {
    return new UserGetCurrentIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetCurrentIdResponse | PlainMessage<UserGetCurrentIdResponse> | undefined, b: UserGetCurrentIdResponse | PlainMessage<UserGetCurrentIdResponse> | undefined): boolean {
    return proto3.util.equals(UserGetCurrentIdResponse, a, b);
  }
}

/**
 * UserGetList
 *
 * @generated from message rbac.schema.v1.UserGetListResponse
 */
export class UserGetListResponse extends Message<UserGetListResponse> {
  /**
   * @generated from field: repeated rbac.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<UserGetListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserGetListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetListResponse {
    return new UserGetListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetListResponse {
    return new UserGetListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetListResponse {
    return new UserGetListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetListResponse | PlainMessage<UserGetListResponse> | undefined, b: UserGetListResponse | PlainMessage<UserGetListResponse> | undefined): boolean {
    return proto3.util.equals(UserGetListResponse, a, b);
  }
}

/**
 * UserGet
 *
 * @generated from message rbac.schema.v1.UserGetRequest
 */
export class UserGetRequest extends Message<UserGetRequest> {
  /**
   * @generated from field: rbac.User.Id id = 1;
   */
  id?: User_Id;

  constructor(data?: PartialMessage<UserGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: User_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetRequest {
    return new UserGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetRequest {
    return new UserGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetRequest {
    return new UserGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetRequest | PlainMessage<UserGetRequest> | undefined, b: UserGetRequest | PlainMessage<UserGetRequest> | undefined): boolean {
    return proto3.util.equals(UserGetRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.UserGetResponse
 */
export class UserGetResponse extends Message<UserGetResponse> {
  /**
   * @generated from field: rbac.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetResponse {
    return new UserGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetResponse {
    return new UserGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetResponse {
    return new UserGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetResponse | PlainMessage<UserGetResponse> | undefined, b: UserGetResponse | PlainMessage<UserGetResponse> | undefined): boolean {
    return proto3.util.equals(UserGetResponse, a, b);
  }
}

/**
 * UserGetHistory
 *
 * @generated from message rbac.schema.v1.UserGetHistoryRequest
 */
export class UserGetHistoryRequest extends Message<UserGetHistoryRequest> {
  /**
   * @generated from field: rbac.User.Id id = 1;
   */
  id?: User_Id;

  constructor(data?: PartialMessage<UserGetHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserGetHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: User_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetHistoryRequest {
    return new UserGetHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetHistoryRequest {
    return new UserGetHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetHistoryRequest {
    return new UserGetHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetHistoryRequest | PlainMessage<UserGetHistoryRequest> | undefined, b: UserGetHistoryRequest | PlainMessage<UserGetHistoryRequest> | undefined): boolean {
    return proto3.util.equals(UserGetHistoryRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.UserGetHistoryResponse
 */
export class UserGetHistoryResponse extends Message<UserGetHistoryResponse> {
  /**
   * @generated from field: rbac.User.Id user_id = 1;
   */
  userId?: User_Id;

  /**
   * @generated from field: rbac.History history = 2;
   */
  history?: History;

  constructor(data?: PartialMessage<UserGetHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserGetHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "message", T: User_Id },
    { no: 2, name: "history", kind: "message", T: History },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetHistoryResponse {
    return new UserGetHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetHistoryResponse {
    return new UserGetHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetHistoryResponse {
    return new UserGetHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetHistoryResponse | PlainMessage<UserGetHistoryResponse> | undefined, b: UserGetHistoryResponse | PlainMessage<UserGetHistoryResponse> | undefined): boolean {
    return proto3.util.equals(UserGetHistoryResponse, a, b);
  }
}

/**
 * Invoke
 *
 * UserRegister
 *
 * @generated from message rbac.schema.v1.UserRegisterRequest
 */
export class UserRegisterRequest extends Message<UserRegisterRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<UserRegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserRegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserRegisterRequest {
    return new UserRegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserRegisterRequest {
    return new UserRegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserRegisterRequest {
    return new UserRegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserRegisterRequest | PlainMessage<UserRegisterRequest> | undefined, b: UserRegisterRequest | PlainMessage<UserRegisterRequest> | undefined): boolean {
    return proto3.util.equals(UserRegisterRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.UserRegisterResponse
 */
export class UserRegisterResponse extends Message<UserRegisterResponse> {
  /**
   * @generated from field: rbac.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserRegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserRegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserRegisterResponse {
    return new UserRegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserRegisterResponse {
    return new UserRegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserRegisterResponse {
    return new UserRegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserRegisterResponse | PlainMessage<UserRegisterResponse> | undefined, b: UserRegisterResponse | PlainMessage<UserRegisterResponse> | undefined): boolean {
    return proto3.util.equals(UserRegisterResponse, a, b);
  }
}

/**
 * UserUpdateMembership
 *
 * @generated from message rbac.schema.v1.UserUpdateMembershipRequest
 */
export class UserUpdateMembershipRequest extends Message<UserUpdateMembershipRequest> {
  /**
   * @generated from field: rbac.User.Id id = 1;
   */
  id?: User_Id;

  /**
   * @generated from field: rbac.Collection.Id collection_id = 2;
   */
  collectionId?: Collection_Id;

  /**
   * @generated from field: int32 role = 3;
   */
  role = 0;

  constructor(data?: PartialMessage<UserUpdateMembershipRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserUpdateMembershipRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: User_Id },
    { no: 2, name: "collection_id", kind: "message", T: Collection_Id },
    { no: 3, name: "role", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUpdateMembershipRequest {
    return new UserUpdateMembershipRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUpdateMembershipRequest {
    return new UserUpdateMembershipRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUpdateMembershipRequest {
    return new UserUpdateMembershipRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserUpdateMembershipRequest | PlainMessage<UserUpdateMembershipRequest> | undefined, b: UserUpdateMembershipRequest | PlainMessage<UserUpdateMembershipRequest> | undefined): boolean {
    return proto3.util.equals(UserUpdateMembershipRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.UserUpdateMembershipResponse
 */
export class UserUpdateMembershipResponse extends Message<UserUpdateMembershipResponse> {
  /**
   * @generated from field: rbac.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserUpdateMembershipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserUpdateMembershipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUpdateMembershipResponse {
    return new UserUpdateMembershipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUpdateMembershipResponse {
    return new UserUpdateMembershipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUpdateMembershipResponse {
    return new UserUpdateMembershipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserUpdateMembershipResponse | PlainMessage<UserUpdateMembershipResponse> | undefined, b: UserUpdateMembershipResponse | PlainMessage<UserUpdateMembershipResponse> | undefined): boolean {
    return proto3.util.equals(UserUpdateMembershipResponse, a, b);
  }
}

/**
 * UserUpdate
 *
 * @generated from message rbac.schema.v1.UserUpdateRequest
 */
export class UserUpdateRequest extends Message<UserUpdateRequest> {
  /**
   * @generated from field: rbac.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserUpdateRequest | PlainMessage<UserUpdateRequest> | undefined, b: UserUpdateRequest | PlainMessage<UserUpdateRequest> | undefined): boolean {
    return proto3.util.equals(UserUpdateRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.UserUpdateResponse
 */
export class UserUpdateResponse extends Message<UserUpdateResponse> {
  /**
   * @generated from field: rbac.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.UserUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserUpdateResponse | PlainMessage<UserUpdateResponse> | undefined, b: UserUpdateResponse | PlainMessage<UserUpdateResponse> | undefined): boolean {
    return proto3.util.equals(UserUpdateResponse, a, b);
  }
}

/**
 * Collection
 * Query
 * CollectionGetList
 *
 * @generated from message rbac.schema.v1.CollectionGetListResponse
 */
export class CollectionGetListResponse extends Message<CollectionGetListResponse> {
  /**
   * @generated from field: repeated rbac.Collection collections = 1;
   */
  collections: Collection[] = [];

  constructor(data?: PartialMessage<CollectionGetListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.CollectionGetListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collections", kind: "message", T: Collection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionGetListResponse {
    return new CollectionGetListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionGetListResponse {
    return new CollectionGetListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionGetListResponse {
    return new CollectionGetListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionGetListResponse | PlainMessage<CollectionGetListResponse> | undefined, b: CollectionGetListResponse | PlainMessage<CollectionGetListResponse> | undefined): boolean {
    return proto3.util.equals(CollectionGetListResponse, a, b);
  }
}

/**
 * CollectionGet
 *
 * @generated from message rbac.schema.v1.CollectionGetRequest
 */
export class CollectionGetRequest extends Message<CollectionGetRequest> {
  /**
   * @generated from field: rbac.Collection.Id collection_id = 1;
   */
  collectionId?: Collection_Id;

  constructor(data?: PartialMessage<CollectionGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.CollectionGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "message", T: Collection_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionGetRequest {
    return new CollectionGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionGetRequest {
    return new CollectionGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionGetRequest {
    return new CollectionGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionGetRequest | PlainMessage<CollectionGetRequest> | undefined, b: CollectionGetRequest | PlainMessage<CollectionGetRequest> | undefined): boolean {
    return proto3.util.equals(CollectionGetRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.CollectionGetResponse
 */
export class CollectionGetResponse extends Message<CollectionGetResponse> {
  /**
   * @generated from field: rbac.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.CollectionGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionGetResponse {
    return new CollectionGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionGetResponse {
    return new CollectionGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionGetResponse {
    return new CollectionGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionGetResponse | PlainMessage<CollectionGetResponse> | undefined, b: CollectionGetResponse | PlainMessage<CollectionGetResponse> | undefined): boolean {
    return proto3.util.equals(CollectionGetResponse, a, b);
  }
}

/**
 * CollectionGetHistory
 *
 * @generated from message rbac.schema.v1.CollectionGetHistoryRequest
 */
export class CollectionGetHistoryRequest extends Message<CollectionGetHistoryRequest> {
  /**
   * @generated from field: rbac.Collection.Id collection_id = 1;
   */
  collectionId?: Collection_Id;

  constructor(data?: PartialMessage<CollectionGetHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.CollectionGetHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "message", T: Collection_Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionGetHistoryRequest {
    return new CollectionGetHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionGetHistoryRequest {
    return new CollectionGetHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionGetHistoryRequest {
    return new CollectionGetHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionGetHistoryRequest | PlainMessage<CollectionGetHistoryRequest> | undefined, b: CollectionGetHistoryRequest | PlainMessage<CollectionGetHistoryRequest> | undefined): boolean {
    return proto3.util.equals(CollectionGetHistoryRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.CollectionGetHistoryResponse
 */
export class CollectionGetHistoryResponse extends Message<CollectionGetHistoryResponse> {
  /**
   * @generated from field: repeated rbac.Collection collections = 1;
   */
  collections: Collection[] = [];

  constructor(data?: PartialMessage<CollectionGetHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.CollectionGetHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collections", kind: "message", T: Collection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionGetHistoryResponse {
    return new CollectionGetHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionGetHistoryResponse {
    return new CollectionGetHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionGetHistoryResponse {
    return new CollectionGetHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionGetHistoryResponse | PlainMessage<CollectionGetHistoryResponse> | undefined, b: CollectionGetHistoryResponse | PlainMessage<CollectionGetHistoryResponse> | undefined): boolean {
    return proto3.util.equals(CollectionGetHistoryResponse, a, b);
  }
}

/**
 * Invoke
 * CollectionCreate
 *
 * @generated from message rbac.schema.v1.CollectionCreateRequest
 */
export class CollectionCreateRequest extends Message<CollectionCreateRequest> {
  /**
   * @generated from field: rbac.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.CollectionCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionCreateRequest {
    return new CollectionCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionCreateRequest {
    return new CollectionCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionCreateRequest {
    return new CollectionCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionCreateRequest | PlainMessage<CollectionCreateRequest> | undefined, b: CollectionCreateRequest | PlainMessage<CollectionCreateRequest> | undefined): boolean {
    return proto3.util.equals(CollectionCreateRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.CollectionCreateResponse
 */
export class CollectionCreateResponse extends Message<CollectionCreateResponse> {
  /**
   * @generated from field: rbac.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.CollectionCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionCreateResponse {
    return new CollectionCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionCreateResponse {
    return new CollectionCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionCreateResponse {
    return new CollectionCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionCreateResponse | PlainMessage<CollectionCreateResponse> | undefined, b: CollectionCreateResponse | PlainMessage<CollectionCreateResponse> | undefined): boolean {
    return proto3.util.equals(CollectionCreateResponse, a, b);
  }
}

/**
 * CollectionRolesUpdate
 *
 * @generated from message rbac.schema.v1.CollectionUpdateRolesRequest
 */
export class CollectionUpdateRolesRequest extends Message<CollectionUpdateRolesRequest> {
  /**
   * @generated from field: rbac.Collection.Id collection_id = 1;
   */
  collectionId?: Collection_Id;

  /**
   * @generated from field: map<int32, string> roles = 2;
   */
  roles: { [key: number]: string } = {};

  constructor(data?: PartialMessage<CollectionUpdateRolesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.CollectionUpdateRolesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "message", T: Collection_Id },
    { no: 2, name: "roles", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionUpdateRolesRequest {
    return new CollectionUpdateRolesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionUpdateRolesRequest {
    return new CollectionUpdateRolesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionUpdateRolesRequest {
    return new CollectionUpdateRolesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionUpdateRolesRequest | PlainMessage<CollectionUpdateRolesRequest> | undefined, b: CollectionUpdateRolesRequest | PlainMessage<CollectionUpdateRolesRequest> | undefined): boolean {
    return proto3.util.equals(CollectionUpdateRolesRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.CollectionUpdateRolesResponse
 */
export class CollectionUpdateRolesResponse extends Message<CollectionUpdateRolesResponse> {
  /**
   * @generated from field: rbac.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionUpdateRolesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.CollectionUpdateRolesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionUpdateRolesResponse {
    return new CollectionUpdateRolesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionUpdateRolesResponse {
    return new CollectionUpdateRolesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionUpdateRolesResponse {
    return new CollectionUpdateRolesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionUpdateRolesResponse | PlainMessage<CollectionUpdateRolesResponse> | undefined, b: CollectionUpdateRolesResponse | PlainMessage<CollectionUpdateRolesResponse> | undefined): boolean {
    return proto3.util.equals(CollectionUpdateRolesResponse, a, b);
  }
}

/**
 * CollectionPermissionsUpdate
 *
 * @generated from message rbac.schema.v1.CollectionUpdatePermissionRequest
 */
export class CollectionUpdatePermissionRequest extends Message<CollectionUpdatePermissionRequest> {
  /**
   * @generated from field: rbac.Collection.Id collection_id = 1;
   */
  collectionId?: Collection_Id;

  /**
   * @generated from field: map<int32, rbac.ACL> acl = 5;
   */
  acl: { [key: number]: ACL } = {};

  constructor(data?: PartialMessage<CollectionUpdatePermissionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.CollectionUpdatePermissionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "message", T: Collection_Id },
    { no: 5, name: "acl", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: ACL} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionUpdatePermissionRequest {
    return new CollectionUpdatePermissionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionUpdatePermissionRequest {
    return new CollectionUpdatePermissionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionUpdatePermissionRequest {
    return new CollectionUpdatePermissionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionUpdatePermissionRequest | PlainMessage<CollectionUpdatePermissionRequest> | undefined, b: CollectionUpdatePermissionRequest | PlainMessage<CollectionUpdatePermissionRequest> | undefined): boolean {
    return proto3.util.equals(CollectionUpdatePermissionRequest, a, b);
  }
}

/**
 * @generated from message rbac.schema.v1.CollectionUpdatePermissionResponse
 */
export class CollectionUpdatePermissionResponse extends Message<CollectionUpdatePermissionResponse> {
  /**
   * @generated from field: rbac.Collection collection = 1;
   */
  collection?: Collection;

  constructor(data?: PartialMessage<CollectionUpdatePermissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rbac.schema.v1.CollectionUpdatePermissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: Collection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionUpdatePermissionResponse {
    return new CollectionUpdatePermissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionUpdatePermissionResponse {
    return new CollectionUpdatePermissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionUpdatePermissionResponse {
    return new CollectionUpdatePermissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionUpdatePermissionResponse | PlainMessage<CollectionUpdatePermissionResponse> | undefined, b: CollectionUpdatePermissionResponse | PlainMessage<CollectionUpdatePermissionResponse> | undefined): boolean {
    return proto3.util.equals(CollectionUpdatePermissionResponse, a, b);
  }
}
