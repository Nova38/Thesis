// @generated by protoc-gen-reg v1 with parameter "target=ts"
// @generated from file chaincode/ccbio/schema/v0/service.proto (package ccbio.schema.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Contract } from "@hyperledger/fabric-gateway";
import type { JsonValue } from "@bufbuild/protobuf";
import { IMessageTypeRegistry, JsonWriteStringOptions } from "@bufbuild/protobuf";
import { SpecimenCreateRequest, SpecimenCreateResponse, SpecimenDeleteRequest, SpecimenDeleteResponse, SpecimenGetByCollectionRequest, SpecimenGetByCollectionResponse, SpecimenGetHistoryRequest, SpecimenGetHistoryResponse, SpecimenGetListRequest, SpecimenGetListResponse, SpecimenGetRequest, SpecimenGetResponse, SpecimenHideTxRequest, SpecimenHideTxResponse, SpecimenUnHideTxRequest, SpecimenUnHideTxResponse, SpecimenUpdateRequest, SpecimenUpdateResponse } from "./service_pb.js";

/**
 *  // Specimen functions
 *
 * @generated from service ccbio.schema.v0.SpecimenService
 */
export class SpecimenServiceClient {
    private contract: Contract;
    private jsonWriteOptions:Partial<JsonWriteStringOptions> = {};

    constructor(contract: Contract, registry: IMessageTypeRegistry) {
        this.contract = contract;
    }


    /**
     * @generated from rpc ccbio.schema.v0.SpecimenService.SpecimenGet
     */
    async specimenGet(request: SpecimenGetRequest, evaluate: boolean ): Promise< SpecimenGetResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SpecimenGet",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SpecimenGet",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SpecimenGetResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc ccbio.schema.v0.SpecimenService.SpecimenGetList
     */
    async specimenGetList(request: SpecimenGetListRequest, evaluate: boolean ): Promise< SpecimenGetListResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SpecimenGetList",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SpecimenGetList",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SpecimenGetListResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc ccbio.schema.v0.SpecimenService.SpecimenGetByCollection
     */
    async specimenGetByCollection(request: SpecimenGetByCollectionRequest, evaluate: boolean ): Promise< SpecimenGetByCollectionResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SpecimenGetByCollection",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SpecimenGetByCollection",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SpecimenGetByCollectionResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc ccbio.schema.v0.SpecimenService.SpecimenGetHistory
     */
    async specimenGetHistory(request: SpecimenGetHistoryRequest, evaluate: boolean ): Promise< SpecimenGetHistoryResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SpecimenGetHistory",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SpecimenGetHistory",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SpecimenGetHistoryResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc ccbio.schema.v0.SpecimenService.SpecimenCreate
     */
    async specimenCreate(request: SpecimenCreateRequest, evaluate: boolean ): Promise< SpecimenCreateResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SpecimenCreate",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SpecimenCreate",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SpecimenCreateResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc ccbio.schema.v0.SpecimenService.SpecimenUpdate
     */
    async specimenUpdate(request: SpecimenUpdateRequest, evaluate: boolean ): Promise< SpecimenUpdateResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SpecimenUpdate",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SpecimenUpdate",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SpecimenUpdateResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc ccbio.schema.v0.SpecimenService.SpecimenDelete
     */
    async specimenDelete(request: SpecimenDeleteRequest, evaluate: boolean ): Promise< SpecimenDeleteResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SpecimenDelete",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SpecimenDelete",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SpecimenDeleteResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc ccbio.schema.v0.SpecimenService.SpecimenHideTx
     */
    async specimenHideTx(request: SpecimenHideTxRequest, evaluate: boolean ): Promise< SpecimenHideTxResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SpecimenHideTx",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SpecimenHideTx",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SpecimenHideTxResponse.fromJson(data as JsonValue)
        );
    }

    /**
     * @generated from rpc ccbio.schema.v0.SpecimenService.SpecimenUnHideTx
     */
    async specimenUnHideTx(request: SpecimenUnHideTxRequest, evaluate: boolean ): Promise< SpecimenUnHideTxResponse> {
        if (evaluate) {
            const promise = this.contract.evaluate(
                "SpecimenUnHideTx",
                $request.toJsonString(this.jsonWriteOptions)
            )
        } else {
            const promise = this.contract.submit(
                "SpecimenUnHideTx",
                $request.toJsonString(this.jsonWriteOptions)
            )
        }
        return promise.then(async (data) =>
             SpecimenUnHideTxResponse.fromJson(data as JsonValue)
        );
    }
}
