// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lib/fabric/rbac/StateObject.proto

package rbac

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Collection with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Collection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Collection with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollectionMultiError, or
// nil if none found.
func (m *Collection) ValidateAll() error {
	return m.validate(true)
}

func (m *Collection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ObjectNamespace

	if all {
		switch v := interface{}(m.GetObjectDescriptor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "ObjectDescriptor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "ObjectDescriptor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObjectDescriptor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionValidationError{
				field:  "ObjectDescriptor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Roles

	{
		sorted_keys := make([]int32, len(m.GetAclRolePermissions()))
		i := 0
		for key := range m.GetAclRolePermissions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAclRolePermissions()[key]
			_ = val

			// no validation rules for AclRolePermissions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CollectionValidationError{
							field:  fmt.Sprintf("AclRolePermissions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CollectionValidationError{
							field:  fmt.Sprintf("AclRolePermissions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CollectionValidationError{
						field:  fmt.Sprintf("AclRolePermissions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int32, len(m.GetAclMemberships()))
		i := 0
		for key := range m.GetAclMemberships() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAclMemberships()[key]
			_ = val

			// no validation rules for AclMemberships[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CollectionValidationError{
							field:  fmt.Sprintf("AclMemberships[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CollectionValidationError{
							field:  fmt.Sprintf("AclMemberships[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CollectionValidationError{
						field:  fmt.Sprintf("AclMemberships[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int32, len(m.GetAclObject()))
		i := 0
		for key := range m.GetAclObject() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAclObject()[key]
			_ = val

			// no validation rules for AclObject[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CollectionValidationError{
							field:  fmt.Sprintf("AclObject[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CollectionValidationError{
							field:  fmt.Sprintf("AclObject[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CollectionValidationError{
						field:  fmt.Sprintf("AclObject[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetAclObjectField()))
		i := 0
		for key := range m.GetAclObjectField() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAclObjectField()[key]
			_ = val

			// no validation rules for AclObjectField[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CollectionValidationError{
							field:  fmt.Sprintf("AclObjectField[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CollectionValidationError{
							field:  fmt.Sprintf("AclObjectField[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CollectionValidationError{
						field:  fmt.Sprintf("AclObjectField[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CollectionMultiError(errors)
	}

	return nil
}

// CollectionMultiError is an error wrapping multiple validation errors
// returned by Collection.ValidateAll() if the designated constraints aren't met.
type CollectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionMultiError) AllErrors() []error { return m }

// CollectionValidationError is the validation error returned by
// Collection.Validate if the designated constraints aren't met.
type CollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionValidationError) ErrorName() string { return "CollectionValidationError" }

// Error satisfies the builtin error interface
func (e CollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Affiliation

	// no validation rules for Roles

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Collection_Operations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Collection_Operations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Collection_Operations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Collection_OperationsMultiError, or nil if none found.
func (m *Collection_Operations) ValidateAll() error {
	return m.validate(true)
}

func (m *Collection_Operations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Collection_OperationsMultiError(errors)
	}

	return nil
}

// Collection_OperationsMultiError is an error wrapping multiple validation
// errors returned by Collection_Operations.ValidateAll() if the designated
// constraints aren't met.
type Collection_OperationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Collection_OperationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Collection_OperationsMultiError) AllErrors() []error { return m }

// Collection_OperationsValidationError is the validation error returned by
// Collection_Operations.Validate if the designated constraints aren't met.
type Collection_OperationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Collection_OperationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Collection_OperationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Collection_OperationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Collection_OperationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Collection_OperationsValidationError) ErrorName() string {
	return "Collection_OperationsValidationError"
}

// Error satisfies the builtin error interface
func (e Collection_OperationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollection_Operations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Collection_OperationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Collection_OperationsValidationError{}

// Validate checks the field values on Collection_ObjectFieldPermission with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Collection_ObjectFieldPermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Collection_ObjectFieldPermission with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Collection_ObjectFieldPermissionMultiError, or nil if none found.
func (m *Collection_ObjectFieldPermission) ValidateAll() error {
	return m.validate(true)
}

func (m *Collection_ObjectFieldPermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]int32, len(m.GetAclObjectField()))
		i := 0
		for key := range m.GetAclObjectField() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAclObjectField()[key]
			_ = val

			// no validation rules for AclObjectField[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Collection_ObjectFieldPermissionValidationError{
							field:  fmt.Sprintf("AclObjectField[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Collection_ObjectFieldPermissionValidationError{
							field:  fmt.Sprintf("AclObjectField[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Collection_ObjectFieldPermissionValidationError{
						field:  fmt.Sprintf("AclObjectField[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return Collection_ObjectFieldPermissionMultiError(errors)
	}

	return nil
}

// Collection_ObjectFieldPermissionMultiError is an error wrapping multiple
// validation errors returned by
// Collection_ObjectFieldPermission.ValidateAll() if the designated
// constraints aren't met.
type Collection_ObjectFieldPermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Collection_ObjectFieldPermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Collection_ObjectFieldPermissionMultiError) AllErrors() []error { return m }

// Collection_ObjectFieldPermissionValidationError is the validation error
// returned by Collection_ObjectFieldPermission.Validate if the designated
// constraints aren't met.
type Collection_ObjectFieldPermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Collection_ObjectFieldPermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Collection_ObjectFieldPermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Collection_ObjectFieldPermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Collection_ObjectFieldPermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Collection_ObjectFieldPermissionValidationError) ErrorName() string {
	return "Collection_ObjectFieldPermissionValidationError"
}

// Error satisfies the builtin error interface
func (e Collection_ObjectFieldPermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollection_ObjectFieldPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Collection_ObjectFieldPermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Collection_ObjectFieldPermissionValidationError{}

// Validate checks the field values on Collection_Operations_Membership with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Collection_Operations_Membership) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Collection_Operations_Membership with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Collection_Operations_MembershipMultiError, or nil if none found.
func (m *Collection_Operations_Membership) ValidateAll() error {
	return m.validate(true)
}

func (m *Collection_Operations_Membership) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for View

	// no validation rules for Edit

	if len(errors) > 0 {
		return Collection_Operations_MembershipMultiError(errors)
	}

	return nil
}

// Collection_Operations_MembershipMultiError is an error wrapping multiple
// validation errors returned by
// Collection_Operations_Membership.ValidateAll() if the designated
// constraints aren't met.
type Collection_Operations_MembershipMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Collection_Operations_MembershipMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Collection_Operations_MembershipMultiError) AllErrors() []error { return m }

// Collection_Operations_MembershipValidationError is the validation error
// returned by Collection_Operations_Membership.Validate if the designated
// constraints aren't met.
type Collection_Operations_MembershipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Collection_Operations_MembershipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Collection_Operations_MembershipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Collection_Operations_MembershipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Collection_Operations_MembershipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Collection_Operations_MembershipValidationError) ErrorName() string {
	return "Collection_Operations_MembershipValidationError"
}

// Error satisfies the builtin error interface
func (e Collection_Operations_MembershipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollection_Operations_Membership.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Collection_Operations_MembershipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Collection_Operations_MembershipValidationError{}

// Validate checks the field values on Collection_Operations_Object with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Collection_Operations_Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Collection_Operations_Object with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Collection_Operations_ObjectMultiError, or nil if none found.
func (m *Collection_Operations_Object) ValidateAll() error {
	return m.validate(true)
}

func (m *Collection_Operations_Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for View

	// no validation rules for Create

	// no validation rules for Delete

	// no validation rules for HiddenTxs

	if len(errors) > 0 {
		return Collection_Operations_ObjectMultiError(errors)
	}

	return nil
}

// Collection_Operations_ObjectMultiError is an error wrapping multiple
// validation errors returned by Collection_Operations_Object.ValidateAll() if
// the designated constraints aren't met.
type Collection_Operations_ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Collection_Operations_ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Collection_Operations_ObjectMultiError) AllErrors() []error { return m }

// Collection_Operations_ObjectValidationError is the validation error returned
// by Collection_Operations_Object.Validate if the designated constraints
// aren't met.
type Collection_Operations_ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Collection_Operations_ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Collection_Operations_ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Collection_Operations_ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Collection_Operations_ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Collection_Operations_ObjectValidationError) ErrorName() string {
	return "Collection_Operations_ObjectValidationError"
}

// Error satisfies the builtin error interface
func (e Collection_Operations_ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollection_Operations_Object.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Collection_Operations_ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Collection_Operations_ObjectValidationError{}

// Validate checks the field values on Collection_Operations_ObjectField with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Collection_Operations_ObjectField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Collection_Operations_ObjectField
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Collection_Operations_ObjectFieldMultiError, or nil if none found.
func (m *Collection_Operations_ObjectField) ValidateAll() error {
	return m.validate(true)
}

func (m *Collection_Operations_ObjectField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for View

	// no validation rules for Edit

	// no validation rules for SuggestEdit

	// no validation rules for SuggestApprove

	// no validation rules for SuggestReject

	if len(errors) > 0 {
		return Collection_Operations_ObjectFieldMultiError(errors)
	}

	return nil
}

// Collection_Operations_ObjectFieldMultiError is an error wrapping multiple
// validation errors returned by
// Collection_Operations_ObjectField.ValidateAll() if the designated
// constraints aren't met.
type Collection_Operations_ObjectFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Collection_Operations_ObjectFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Collection_Operations_ObjectFieldMultiError) AllErrors() []error { return m }

// Collection_Operations_ObjectFieldValidationError is the validation error
// returned by Collection_Operations_ObjectField.Validate if the designated
// constraints aren't met.
type Collection_Operations_ObjectFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Collection_Operations_ObjectFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Collection_Operations_ObjectFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Collection_Operations_ObjectFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Collection_Operations_ObjectFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Collection_Operations_ObjectFieldValidationError) ErrorName() string {
	return "Collection_Operations_ObjectFieldValidationError"
}

// Error satisfies the builtin error interface
func (e Collection_Operations_ObjectFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollection_Operations_ObjectField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Collection_Operations_ObjectFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Collection_Operations_ObjectFieldValidationError{}

// Validate checks the field values on User_Id with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *User_Id) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_Id with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in User_IdMultiError, or nil if none found.
func (m *User_Id) ValidateAll() error {
	return m.validate(true)
}

func (m *User_Id) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for Id

	if len(errors) > 0 {
		return User_IdMultiError(errors)
	}

	return nil
}

// User_IdMultiError is an error wrapping multiple validation errors returned
// by User_Id.ValidateAll() if the designated constraints aren't met.
type User_IdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_IdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_IdMultiError) AllErrors() []error { return m }

// User_IdValidationError is the validation error returned by User_Id.Validate
// if the designated constraints aren't met.
type User_IdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_IdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_IdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_IdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_IdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_IdValidationError) ErrorName() string { return "User_IdValidationError" }

// Error satisfies the builtin error interface
func (e User_IdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_Id.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_IdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_IdValidationError{}

// Validate checks the field values on User_List with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *User_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_List with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in User_ListMultiError, or nil
// if none found.
func (m *User_List) ValidateAll() error {
	return m.validate(true)
}

func (m *User_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, User_ListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, User_ListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return User_ListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return User_ListMultiError(errors)
	}

	return nil
}

// User_ListMultiError is an error wrapping multiple validation errors returned
// by User_List.ValidateAll() if the designated constraints aren't met.
type User_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_ListMultiError) AllErrors() []error { return m }

// User_ListValidationError is the validation error returned by
// User_List.Validate if the designated constraints aren't met.
type User_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_ListValidationError) ErrorName() string { return "User_ListValidationError" }

// Error satisfies the builtin error interface
func (e User_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_ListValidationError{}
