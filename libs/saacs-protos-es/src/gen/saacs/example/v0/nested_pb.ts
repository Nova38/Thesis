// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file saacs/example/v0/nested.proto (package saacs.sample.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message saacs.sample.v0.ItemWithNestedKey
 */
export class ItemWithNestedKey extends Message<ItemWithNestedKey> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: saacs.sample.v0.Nested nested = 4;
   */
  nested?: Nested;

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<ItemWithNestedKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.sample.v0.ItemWithNestedKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nested", kind: "message", T: Nested },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ItemWithNestedKey {
    return new ItemWithNestedKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ItemWithNestedKey {
    return new ItemWithNestedKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ItemWithNestedKey {
    return new ItemWithNestedKey().fromJsonString(jsonString, options);
  }

  static equals(a: ItemWithNestedKey | PlainMessage<ItemWithNestedKey> | undefined, b: ItemWithNestedKey | PlainMessage<ItemWithNestedKey> | undefined): boolean {
    return proto3.util.equals(ItemWithNestedKey, a, b);
  }
}

/**
 * @generated from message saacs.sample.v0.Nested
 */
export class Nested extends Message<Nested> {
  /**
   * @generated from field: string part1 = 1;
   */
  part1 = "";

  /**
   * @generated from field: string part2 = 2;
   */
  part2 = "";

  constructor(data?: PartialMessage<Nested>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "saacs.sample.v0.Nested";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "part1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "part2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Nested {
    return new Nested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Nested {
    return new Nested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Nested {
    return new Nested().fromJsonString(jsonString, options);
  }

  static equals(a: Nested | PlainMessage<Nested> | undefined, b: Nested | PlainMessage<Nested> | undefined): boolean {
    return proto3.util.equals(Nested, a, b);
  }
}
