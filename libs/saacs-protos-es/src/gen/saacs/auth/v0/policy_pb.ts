// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file saacs/auth/v0/policy.proto (package saacs.auth.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { Action } from '../../common/v0/enums_pb.js'

/**
 * @generated from message saacs.auth.v0.Polices
 */
export class Polices extends Message<Polices> {
  /**
   * key is the item type
   *
   * @generated from field: map<string, saacs.auth.v0.PathPolicy> item_policies = 1;
   */
  itemPolicies: { [key: string]: PathPolicy } = {}

  /**
   * Default policy for all items
   *
   * @generated from field: saacs.auth.v0.PathPolicy default_policy = 2;
   */
  defaultPolicy?: PathPolicy

  /**
   * The types that are excluded from the default policy
   *
   * @generated from field: repeated string default_excluded_types = 3;
   */
  defaultExcludedTypes: string[] = []

  constructor(data?: PartialMessage<Polices>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.auth.v0.Polices'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'item_policies',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: PathPolicy },
    },
    { no: 2, name: 'default_policy', kind: 'message', T: PathPolicy },
    {
      no: 3,
      name: 'default_excluded_types',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Polices {
    return new Polices().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Polices {
    return new Polices().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Polices {
    return new Polices().fromJsonString(jsonString, options)
  }

  static equals(
    a: Polices | PlainMessage<Polices> | undefined,
    b: Polices | PlainMessage<Polices> | undefined,
  ): boolean {
    return proto3.util.equals(Polices, a, b)
  }
}

/**
 * This message is the tree node for operations on the state item
 *
 * @generated from message saacs.auth.v0.PathPolicy
 */
export class PathPolicy extends Message<PathPolicy> {
  /**
   * The path is a sub path of a field mask
   *
   * @generated from field: string path = 1;
   */
  path = ''

  /**
   * @generated from field: string full_path = 2;
   */
  fullPath = ''

  /**
   * @generated from field: bool allow_sub_paths = 3;
   */
  allowSubPaths = false

  /**
   * The key is a valid sub path in the type of state item
   *
   * @generated from field: map<string, saacs.auth.v0.PathPolicy> sub_paths = 4;
   */
  subPaths: { [key: string]: PathPolicy } = {}

  /**
   * If the policy is not set than use a parent policy unless nested policy is set
   *
   * @generated from field: repeated saacs.common.v0.Action actions = 5;
   */
  actions: Action[] = []

  constructor(data?: PartialMessage<PathPolicy>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.auth.v0.PathPolicy'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'path', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'full_path', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'allow_sub_paths',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
    {
      no: 4,
      name: 'sub_paths',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: PathPolicy },
    },
    {
      no: 5,
      name: 'actions',
      kind: 'enum',
      T: proto3.getEnumType(Action),
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PathPolicy {
    return new PathPolicy().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PathPolicy {
    return new PathPolicy().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PathPolicy {
    return new PathPolicy().fromJsonString(jsonString, options)
  }

  static equals(
    a: PathPolicy | PlainMessage<PathPolicy> | undefined,
    b: PathPolicy | PlainMessage<PathPolicy> | undefined,
  ): boolean {
    return proto3.util.equals(PathPolicy, a, b)
  }
}
