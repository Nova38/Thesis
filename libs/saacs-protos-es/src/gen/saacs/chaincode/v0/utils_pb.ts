// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file saacs/chaincode/v0/utils.proto (package saacs.chaincode.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { User } from '../../common/v0/user_pb.js'
import { UserCollectionRoles } from '../../auth/v0/roles_pb.js'
import { UserDirectMembership } from '../../auth/v0/identity_pb.js'
import { Operation } from '../../common/v0/operation_pb.js'
import { Collection } from '../../auth/v0/collection_pb.js'

/**
 * @generated from message saacs.chaincode.v0.GetCurrentUserRequest
 */
export class GetCurrentUserRequest extends Message<GetCurrentUserRequest> {
  /**
   * @generated from field: bool empty = 1;
   */
  empty = false

  constructor(data?: PartialMessage<GetCurrentUserRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.chaincode.v0.GetCurrentUserRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'empty', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetCurrentUserRequest | PlainMessage<GetCurrentUserRequest> | undefined,
    b: GetCurrentUserRequest | PlainMessage<GetCurrentUserRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetCurrentUserRequest, a, b)
  }
}

/**
 * @generated from message saacs.chaincode.v0.GetCurrentUserResponse
 */
export class GetCurrentUserResponse extends Message<GetCurrentUserResponse> {
  /**
   * @generated from field: saacs.common.v0.User user = 1;
   */
  user?: User

  /**
   * @generated from field: bool registered = 2;
   */
  registered = false

  constructor(data?: PartialMessage<GetCurrentUserResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.chaincode.v0.GetCurrentUserResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user', kind: 'message', T: User },
    { no: 2, name: 'registered', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetCurrentUserResponse
      | PlainMessage<GetCurrentUserResponse>
      | undefined,
    b:
      | GetCurrentUserResponse
      | PlainMessage<GetCurrentUserResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetCurrentUserResponse, a, b)
  }
}

/**
 * @generated from message saacs.chaincode.v0.GetCurrentFullUserResponse
 */
export class GetCurrentFullUserResponse extends Message<GetCurrentFullUserResponse> {
  /**
   * @generated from field: saacs.common.v0.User user = 1;
   */
  user?: User

  /**
   * @generated from field: bool registered = 2;
   */
  registered = false

  /**
   * @generated from field: repeated saacs.auth.v0.UserCollectionRoles user_collection_roles = 3;
   */
  userCollectionRoles: UserCollectionRoles[] = []

  /**
   * @generated from field: repeated saacs.auth.v0.UserDirectMembership user_memberships = 4;
   */
  userMemberships: UserDirectMembership[] = []

  constructor(data?: PartialMessage<GetCurrentFullUserResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.chaincode.v0.GetCurrentFullUserResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user', kind: 'message', T: User },
    { no: 2, name: 'registered', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 3,
      name: 'user_collection_roles',
      kind: 'message',
      T: UserCollectionRoles,
      repeated: true,
    },
    {
      no: 4,
      name: 'user_memberships',
      kind: 'message',
      T: UserDirectMembership,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetCurrentFullUserResponse {
    return new GetCurrentFullUserResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetCurrentFullUserResponse {
    return new GetCurrentFullUserResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetCurrentFullUserResponse {
    return new GetCurrentFullUserResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetCurrentFullUserResponse
      | PlainMessage<GetCurrentFullUserResponse>
      | undefined,
    b:
      | GetCurrentFullUserResponse
      | PlainMessage<GetCurrentFullUserResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetCurrentFullUserResponse, a, b)
  }
}

/**
 * @generated from message saacs.chaincode.v0.AuthorizeOperationRequest
 */
export class AuthorizeOperationRequest extends Message<AuthorizeOperationRequest> {
  /**
   * @generated from field: saacs.common.v0.Operation operation = 1;
   */
  operation?: Operation

  constructor(data?: PartialMessage<AuthorizeOperationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.chaincode.v0.AuthorizeOperationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'operation', kind: 'message', T: Operation },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AuthorizeOperationRequest {
    return new AuthorizeOperationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AuthorizeOperationRequest {
    return new AuthorizeOperationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AuthorizeOperationRequest {
    return new AuthorizeOperationRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | AuthorizeOperationRequest
      | PlainMessage<AuthorizeOperationRequest>
      | undefined,
    b:
      | AuthorizeOperationRequest
      | PlainMessage<AuthorizeOperationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(AuthorizeOperationRequest, a, b)
  }
}

/**
 * @generated from message saacs.chaincode.v0.AuthorizeOperationResponse
 */
export class AuthorizeOperationResponse extends Message<AuthorizeOperationResponse> {
  /**
   * @generated from field: bool authorized = 1;
   */
  authorized = false

  constructor(data?: PartialMessage<AuthorizeOperationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.chaincode.v0.AuthorizeOperationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'authorized', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AuthorizeOperationResponse {
    return new AuthorizeOperationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AuthorizeOperationResponse {
    return new AuthorizeOperationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AuthorizeOperationResponse {
    return new AuthorizeOperationResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | AuthorizeOperationResponse
      | PlainMessage<AuthorizeOperationResponse>
      | undefined,
    b:
      | AuthorizeOperationResponse
      | PlainMessage<AuthorizeOperationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(AuthorizeOperationResponse, a, b)
  }
}

/**
 * @generated from message saacs.chaincode.v0.GetCollectionsListRequest
 */
export class GetCollectionsListRequest extends Message<GetCollectionsListRequest> {
  /**
   * @generated from field: bool empty = 1;
   */
  empty = false

  constructor(data?: PartialMessage<GetCollectionsListRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.chaincode.v0.GetCollectionsListRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'empty', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetCollectionsListRequest {
    return new GetCollectionsListRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetCollectionsListRequest {
    return new GetCollectionsListRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetCollectionsListRequest {
    return new GetCollectionsListRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetCollectionsListRequest
      | PlainMessage<GetCollectionsListRequest>
      | undefined,
    b:
      | GetCollectionsListRequest
      | PlainMessage<GetCollectionsListRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetCollectionsListRequest, a, b)
  }
}

/**
 * @generated from message saacs.chaincode.v0.GetCollectionsListResponse
 */
export class GetCollectionsListResponse extends Message<GetCollectionsListResponse> {
  /**
   * @generated from field: repeated saacs.auth.v0.Collection collections = 1;
   */
  collections: Collection[] = []

  constructor(data?: PartialMessage<GetCollectionsListResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.chaincode.v0.GetCollectionsListResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'collections',
      kind: 'message',
      T: Collection,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetCollectionsListResponse {
    return new GetCollectionsListResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetCollectionsListResponse {
    return new GetCollectionsListResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetCollectionsListResponse {
    return new GetCollectionsListResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetCollectionsListResponse
      | PlainMessage<GetCollectionsListResponse>
      | undefined,
    b:
      | GetCollectionsListResponse
      | PlainMessage<GetCollectionsListResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetCollectionsListResponse, a, b)
  }
}

/**
 * @generated from message saacs.chaincode.v0.BootstrapRequest
 */
export class BootstrapRequest extends Message<BootstrapRequest> {
  /**
   * @generated from field: saacs.auth.v0.Collection collection = 1;
   */
  collection?: Collection

  constructor(data?: PartialMessage<BootstrapRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.chaincode.v0.BootstrapRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'collection', kind: 'message', T: Collection },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): BootstrapRequest {
    return new BootstrapRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): BootstrapRequest {
    return new BootstrapRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): BootstrapRequest {
    return new BootstrapRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: BootstrapRequest | PlainMessage<BootstrapRequest> | undefined,
    b: BootstrapRequest | PlainMessage<BootstrapRequest> | undefined,
  ): boolean {
    return proto3.util.equals(BootstrapRequest, a, b)
  }
}

/**
 * @generated from message saacs.chaincode.v0.BootstrapResponse
 */
export class BootstrapResponse extends Message<BootstrapResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  /**
   * @generated from field: saacs.auth.v0.Collection collection = 2;
   */
  collection?: Collection

  constructor(data?: PartialMessage<BootstrapResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.chaincode.v0.BootstrapResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'collection', kind: 'message', T: Collection },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): BootstrapResponse {
    return new BootstrapResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): BootstrapResponse {
    return new BootstrapResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): BootstrapResponse {
    return new BootstrapResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: BootstrapResponse | PlainMessage<BootstrapResponse> | undefined,
    b: BootstrapResponse | PlainMessage<BootstrapResponse> | undefined,
  ): boolean {
    return proto3.util.equals(BootstrapResponse, a, b)
  }
}

/**
 * @generated from message saacs.chaincode.v0.GetCollectionAuthModelRequest
 */
export class GetCollectionAuthModelRequest extends Message<GetCollectionAuthModelRequest> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = ''

  constructor(data?: PartialMessage<GetCollectionAuthModelRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'saacs.chaincode.v0.GetCollectionAuthModelRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'collection_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetCollectionAuthModelRequest {
    return new GetCollectionAuthModelRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetCollectionAuthModelRequest {
    return new GetCollectionAuthModelRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetCollectionAuthModelRequest {
    return new GetCollectionAuthModelRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetCollectionAuthModelRequest
      | PlainMessage<GetCollectionAuthModelRequest>
      | undefined,
    b:
      | GetCollectionAuthModelRequest
      | PlainMessage<GetCollectionAuthModelRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetCollectionAuthModelRequest, a, b)
  }
}
