package generators

import (
	"github.com/nova38/thesis/lib/go/gen/key"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"

	"google.golang.org/protobuf/types/dynamicpb"
	"strings"
)

type KeyGenerator struct{}

func (kg *KeyGenerator) GenerateFile(
	gen *protogen.Plugin,
	file *protogen.File,
) (*protogen.GeneratedFile, error) {

	filename := file.GeneratedFilenamePrefix + ".cc.key.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	// Generate the header
	g.P("// Code generated by protoc-gen-go-hlf. DO NOT EDIT.")
	g.P("// versions:")

	g.P("// - protoc-gen-cckey v0.0.1")
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	for _, msg := range file.Messages {
		kg.GenerateMessage(gen, g, msg)
	}

	return g, nil
}

// Handle the messages
func (kg *KeyGenerator) GenerateMessage(
	gen *protogen.Plugin,
	g *protogen.GeneratedFile,
	msg *protogen.Message,
) {

	keySchema := KeySchemaOptions(msg)
	if keySchema == nil {
		return
	}

	ns := keySchema.GetNamespace()
	kp := keySchema.GetKeyPaths()

	// Add the imports
	g.QualifiedGoIdent(protogen.GoIdent{GoName: "errors", GoImportPath: "errors"})
	g.QualifiedGoIdent(protogen.GoIdent{GoName: "lo", GoImportPath: "github.com/samber/lo"})

	// function for namespace
	g.P("// ", ns, " is the namespace for ", msg.GoIdent.GoName)
	g.P("func (m *", msg.GoIdent.GoName, ") Namespace() string {")
	g.P("	return \"", ns, "\"")
	g.P("}")

	// function for key
	new_msg := dynamicpb.NewMessage(msg.Desc)

	if kp.IsValid(new_msg) {
		raw_paths := kp.GetPaths()

		g.QualifiedGoIdent(protogen.GoIdent{GoName: "errors", GoImportPath: "errors"})
		g.QualifiedGoIdent(protogen.GoIdent{GoName: "lo", GoImportPath: "github.com/samber/lo"})

		g.P("func (m *", msg.GoIdent.GoName, ") ", "Key()", "([]string, error) {")
		g.P("attr := []string{}")

		g.P("ok := lo.Try(func () error {")

		for _, f := range raw_paths {
			g.P("attr = append(attr, m.", PathToGetter(f), ")")
		}
		g.P("return nil")
		g.P("})")

		g.P("if !ok {")
		g.P("return nil, errors.New(\"Key is nil\")}")
		g.P("return attr, nil")
		g.P("}")
	}

}

func PathToGetter(path string) string {
	subPaths := toSubPaths(path)

	first_time := true
	str := ""
	for _, subPath := range subPaths {
		if !first_time {
			str += "."
		}
		str += "Get"

		// Convert the string from snake case to camel case
		sections := strings.Split(subPath, "_")

		for _, section := range sections {
			str += cases.Title(language.Und).String(section)
		}
		str += "()"
		first_time = false
	}
	return str
}

// paths split by their dot notation
func toSubPaths(rawPaths string) []string {
	var p []string
	subPaths := strings.Split(rawPaths, ".")
	for _, path := range subPaths {
		sections := strings.Split(path, ".")
		p = append(p, sections...)
	}
	return p
}
func KeySchemaOptions(m *protogen.Message) *key.KeySchema {
	v, ok := proto.GetExtension(m.Desc.Options(), key.E_KeySchema).(*key.KeySchema)
	if !ok {
		return nil
	}
	return v
}
