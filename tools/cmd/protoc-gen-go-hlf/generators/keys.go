package generators

import (
	"strings"

	authpb "github.com/nova38/thesis/lib/go/gen/auth/v1"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"

	"google.golang.org/protobuf/types/dynamicpb"
)

const (
	errorsPackage  = protogen.GoImportPath("errors")
	loPackage      = protogen.GoImportPath("github.com/samber/lo")
	stringsPackage = protogen.GoImportPath("strings")
)

type KeyGenerator struct{}

func (kg *KeyGenerator) GenerateFile(
	gen *protogen.Plugin,
	file *protogen.File,
) (*protogen.GeneratedFile, error) {
	filename := file.GeneratedFilenamePrefix + ".cc.key.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	// Generate the header
	g.P("// Code generated by protoc-gen-go-hlf. DO NOT EDIT.")
	g.P("// versions:")

	g.P("// - protoc-gen-cckey v0.0.1")
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	v := true
	for _, msg := range file.Messages {
		b := kg.GenerateMessage(gen, g, msg)
		v = v && b
	}

	if v {
		g.P("// No key schema found. Skipping file.")
		g.Skip()
	}

	return g, nil
}

// Handle the messages
func (kg *KeyGenerator) GenerateMessage(
	gen *protogen.Plugin,
	g *protogen.GeneratedFile,
	msg *protogen.Message,
) (notUsed bool) {
	keySchema := KeySchemaOptions(msg)
	if keySchema == nil {
		return true
	}

	ns := keySchema.GetNamespace()
	if ns == "" {

		g.P("func (m *", msg.GoIdent.GoName, ") Namespace() string {")
		g.P("	return \"", msg.Desc.FullName(), "\"")
		g.P("}")
	} else {
		g.P("func (m *", msg.GoIdent.GoName, ") Namespace() string {")
		g.P("	return \"", ns, "\"")
	}

	kp := keySchema.GetKeys()
	// dCol := keySchema.GetDefaultCollectionId()
	// ObjectDomain := GetObjectDomain()

	// sub := keySchema.GetSubObject()
	// function for key
	newMsg := dynamicpb.NewMessage(msg.Desc)

	if kp.IsValid(newMsg) {
		rawPaths := kp.GetPaths()
		// g.QualifiedGoIdent(stringsPackage.Ident("strings"))
		// g.QualifiedGoIdent(errorsPackage.Ident("errors"))
		// g.QualifiedGoIdent(protogen.GoIdent{GoName: "lo", GoImportPath: "github.com/samber/lo"})

		g.P("func (m *", msg.GoIdent.GoName, ") ", "Key()", "[]string {")

		g.P("attr := []string{m.Namespace()}")

		// g.P("ok := lo.Try(func () error {")

		for _, f := range rawPaths {
			field := msg.Desc.Fields().ByName(protoreflect.Name(f))

			if field == nil {
				continue
			}
			if field.IsList() {
				g.P("//", f, "is a list")
				g.P("attr = append(attr, m.", PathToGetter(f), "...)")
			} else {
				g.P("attr = append(attr, m.", PathToGetter(f), ")")
			}

		}

		g.P("return attr")
		g.P("}")

		//g.P("func (m *", msg.GoIdent.GoName, ") ", "FlatKey()", "(string) {")
		//g.P("attr, err := m.Key()")
		//g.P("if err != nil {")
		//g.P("return \"\"")
		//g.P("}")
		//// remove the first element which is the collection id
		//g.P("attr = attr[1:]")
		//g.P("return strings.Join(attr, \"-\")")
		//g.P("}")

		return false
	}
	return true
}

func PathToGetter(path string) string {
	subPaths := toSubPaths(path)

	firstTime := true
	str := ""
	for _, subPath := range subPaths {
		if !firstTime {
			str += "."
		}
		str += "Get"

		// Convert the string from snake case to camel case
		sections := strings.Split(subPath, "_")

		for _, section := range sections {
			str += cases.Title(language.Und).String(section)
		}
		str += "()"
		firstTime = false
	}
	return str
}

// paths split by their dot notation
func toSubPaths(rawPaths string) []string {
	var p []string
	subPaths := strings.Split(rawPaths, ".")
	for _, path := range subPaths {
		sections := strings.Split(path, ".")
		p = append(p, sections...)
	}
	return p
}

func KeySchemaOptions(m *protogen.Message) *authpb.KeySchema {
	v, ok := proto.GetExtension(m.Desc.Options(), authpb.E_KeySchema).(*authpb.KeySchema)
	if !ok {
		return nil
	}
	return v
}

//func GetObjectDomain(m *protogen.Message) *authpb.ObjectDomain {
//	v, ok := proto.GetExtension(authpb.E_ObjectType, authpb.E_ObjectDomain).(*authpb.ObjectDomain)
//
//    return v
//}
