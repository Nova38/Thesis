syntax = "proto3";

package rbac.schema.v1;

import "auth/v1/auth.proto";
import "buf/validate/validate.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";






service AuthService {
  // buf:lint:ignore RPC_NO_DELETE
  /*
       * UserGetCurrent: Returns the current user.
       *
       * Returns the current user.
       * # Requires:
       *  - User submitting the transaction is a registered user.
   */
    rpc UserGetCurrent(google.protobuf.Empty) returns (UserGetCurrentResponse) {
      option (auth.transaction_type) = TRANSACTION_TYPE_QUERY;
      option (auth.operation) = {
        action: ACTION_OBJECT_VIEW
      };
    }
  ;

    /*
         * Returns the current user id.
         *
         * # Requires:
         *  - User submitting the transaction is a registered user.
     */
    rpc UserGetCurrentId(google.protobuf.Empty) returns (UserGetCurrentIdResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_QUERY;
      option (auth.operation) = {
        action: ACTION_OBJECT_VIEW
      };
    };

    /*
         * UserGetList: Returns the list of users.
         *
         * # Requires:
         *  - Non-register users can call this method.
     */
    rpc UserGetList(google.protobuf.Empty) returns (UserGetListResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_QUERY;
      option (auth.operation) = {
        action: ACTION_OBJECT_VIEW
      };
    };

//    rpc UserGetListByCollection(UserGetListByCollectionRequest) returns (UserGetListByCollectionResponse){
//      option (auth.transaction_type) = TRANSACTION_TYPE_QUERY;
//      option (auth.operation) = {
//        action: ACTION_VIEW
//        domain: DOMAIN_USER
//      };
//    };
//
    /*
         * UserGet: Returns the user.
         *
         * # Requires:
         *  - Non-register users can call this method.
     */
    rpc UserGet(UserGetRequest) returns (UserGetResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_QUERY;
      option (auth.operation) = {
        action: ACTION_OBJECT_VIEW
      };
    };

    /*
         * UserGetHistory: Returns the user history.
         *
         * # Requires:
         *  - Non-register users can call this method.
     */
    rpc UserGetHistory(UserGetHistoryRequest) returns (UserGetHistoryResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_QUERY;
      option (auth.operation) = {
        action: ACTION_OBJECT_VIEW_HISTORY
      };
    };

    /*
         * UserRegister: Registers the user.
         *
         * # Requires:
         *  - The certificate for the user submitting this request must not be already registered as a user.
     */
    rpc UserRegister(UserRegisterRequest) returns (UserRegisterResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_INVOKE;
      option (auth.operation) = {
        action: ACTION_REGISTER_USER
      };
    };

    // rpc UserUpdate(UserUpdateRequest) returns (UserUpdateResponse){
    //   option (auth.transaction_type) = TRANSACTION_TYPE_INVOKE;
    //   option (auth.operation) = {
    //     action: ACTION_EDIT
    //     domain: DOMAIN_USER
    //   };
    // };


    /*
        * UserUpdateMembership: Updates the user's membership.
        *
        * # Requires:
        *  - User submitting the transaction is a registered user.
        *  - The specified user id is a registered user.
        *  - The specified collection id is a registered collection.
        *  - The user submitting the transaction is a member of the specified collection.
        *  - The user submitting the transaction the a role who has permission
        *     to update the membership of the specified collection.
     */
    rpc UserUpdateMembership(UserUpdateMembershipRequest) returns (UserUpdateMembershipResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_INVOKE;

      option (auth.operation) = {
        action: ACTION_OBJECT_EDIT
      };
    };




    // Collection

    /*
        * CollectionGetList: Returns the list of collections.
        *
        * # Requires:
        *  - Non-register users can call this method.
     */
    rpc CollectionGetList(google.protobuf.Empty) returns (CollectionGetListResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_QUERY;
      option (auth.operation) = {
        action: ACTION_OBJECT_VIEW
      };
    };

    /*
        * CollectionGet: Returns the collection.
        *
        * # Requires:
        *  - Non-register users can call this method.
     */
    rpc CollectionGet(CollectionGetRequest) returns (CollectionGetResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_QUERY;
      option (auth.operation) = {
        action: ACTION_OBJECT_VIEW
      };
    };

    /*
        * CollectionGetHistory: Returns the collection history.
        *
        * # Requires:
        *  - Non-register users can call this method.
     */
    rpc CollectionGetHistory(CollectionGetHistoryRequest) returns (CollectionGetHistoryResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_QUERY;
      option (auth.operation) = {
        action: ACTION_OBJECT_VIEW_HISTORY
      };
    };

    /*
        * CollectionCreate: Creates the collection.
        *
        * # Requires:
        *  - User submitting the transaction is a registered user.
     */
    rpc CollectionCreate(CollectionCreateRequest) returns (CollectionCreateResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_INVOKE;
      option (auth.operation) = {
        action: ACTION_REGISTER_COLLECTION
      };
    };


    rpc CollectionUpdateRoles(CollectionUpdateRolesRequest) returns (CollectionUpdateRolesResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_INVOKE;
      option (auth.operation) = {
        action: ACTION_OBJECT_EDIT
      };
    };

    rpc CollectionUpdatePermission(CollectionUpdatePermissionRequest) returns (CollectionUpdatePermissionResponse){
      option (auth.transaction_type) = TRANSACTION_TYPE_INVOKE;
      option (auth.operation) = {
        action: ACTION_OBJECT_EDIT
      };
    };



    /*
    * Test Helpers
    */

    // rpc TestOperation(TestOperationRequest) returns (TestOperationResponse){
    //   option (auth.transaction_type) = TRANSACTION_TYPE_QUERY;
    //   option (auth.operation) = {
    //     action: ACTION_TEST
    //     domain: DOMAIN_TEST
    //   };
    // };


}


  // Test Helpers
    message TestOperationRequest {
      string collection_id = 1;
      auth.Operation operation = 2;
    }

    message TestOperationResponse {
      bool result = 1;
    }

// Auth

// User
  // Query
    // UserGetCurrent
      message UserGetCurrentResponse {
          auth.User user = 1;
      }

    // UserGetCurrentId
      message UserGetCurrentIdResponse {
        string msp_id   = 1;
        string user_id  = 2;
      }

    // UserGetList
      // message UserGetListRequest{
      //   string bookmark = 1;
      //   int32 page_size = 2;
      // }
      message UserGetListResponse {
          repeated auth.User users = 1;
          // string bookmark = 2;
      }

    // UserGet
      message UserGetRequest {
        string msp_id   = 1;
        string user_id  = 2;

          option (buf.validate.message).cel = {
            id: "UserGetRequest.UserId",
            message: "The User id must have both id and msp_id defined",
            expression: "has(id.msp_id) && has(id.id)"
          };
      }
      message UserGetResponse {
        auth.User user = 1;
      }

    // UserGetHistory
      message UserGetHistoryRequest {
          string msp_id   = 1;
          string user_id  = 2;

      }
      message UserGetHistoryResponse {
        string msp_id   = 1;
        string user_id  = 2;
        auth.StateActivity history = 3;
      }


  // Invoke
    //
    // UserRegister
      message UserRegisterRequest {
        string name = 1 [
            (buf.validate.field).string.min_len = 1,
            (buf.validate.field).string.max_len = 150
          ];
      }
      message UserRegisterResponse{
        auth.User user = 1;
      }

    // UserUpdateMembership
      message UserUpdateMembershipRequest {
          string msp_id   = 1;
          string user_id  = 2;
          string collection_id = 3;
          string role_id = 4;

//          option (buf.validate.message).cel = {
//            id: "UserUpdateMembershipRequest.UserId",
//            message: "The User id must have both id and msp_id defined",
//            expression: "has(id.msp_id) && has(id.id)"
//          };
//          option (buf.validate.message).cel = {
//            id: "UserUpdateMembershipRequest.CollectionId",
//            message: "The Collection id must have be defined",
//            expression: "has(collection_id.collection_id)"
//          };



      }
      message UserUpdateMembershipResponse {
        auth.User user = 1;
      }

    // UserUpdate
      // message UserUpdateRequest {
      //     User user = 1;
      // }
      // message UserUpdateResponse {
      //     User user = 1;
      // }

// Collection
  // Query
    // CollectionGetList
      // message CollectionGetListRequest{
      //   string bookmark = 1;
      //   int32 page_size = 2;
      // }
      message CollectionGetListResponse {
          repeated auth.Collection collections = 1;
          // string bookmark = 2;
      }

    // CollectionGet
      message CollectionGetRequest {
          string collection_id = 1;
      }
      message CollectionGetResponse {
          auth.Collection collection = 1;
      }

    // CollectionGetHistory
      message CollectionGetHistoryRequest {
          string collection_id = 1;
      }
      message CollectionGetHistoryResponse {
          repeated auth.Collection collections = 1;
      }

  // Invoke
    // CollectionCreate
      message CollectionCreateRequest {
        auth.Collection collection = 1;
      }
      message CollectionCreateResponse {
        auth.Collection collection = 1;
      }

    // CollectionRolesUpdate
      message CollectionUpdateRolesRequest {
          string collection_id = 1;
          map<string, string> roles_to_add = 2;
          map<string, string> roles_to_remove = 3;
      }
      message CollectionUpdateRolesResponse {
          auth.Collection collection = 1;
          map<string, string> roles_added = 2
            [(buf.validate.field).map.values = {string: {min_len: 1}}];
          map<string, string> roles_removed = 3
            [(buf.validate.field).map.values = {string: {min_len: 1}}];
      }

    // CollectionPermissionsUpdate
      message CollectionUpdatePermissionRequest {
          string collection_id = 1;
          // map<string, ACL> acl = 5;
      }
      message CollectionUpdatePermissionResponse {
        auth.Collection collection = 1;
      }
