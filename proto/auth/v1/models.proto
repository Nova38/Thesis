syntax = "proto3";

package auth;

import "auth/v1/auth.proto";
import "buf/validate/validate.proto";
import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

// ═════════════════════════════════════════════════════════════════════════════════
// Auth Objects
// ═════════════════════════════════════════════════════════════════════════════════

// Identity Auth Object
message UserDirectMembership {
  option (auth_type)             = AUTH_TYPE_IDENTITY;
  option (key_schema).item_kind  = ITEM_KIND_PRIMARY_ITEM;
  option (key_schema).properties = {
    paths: [ "msp_id", "user_id" ]
  };

  // The collection that the user is a member of
  string collection_id = 1 [(buf.validate.field).string.min_len = 1];
  // The msp of the organization that the user's certificate is from
  string msp_id = 2 [(buf.validate.field).string.min_len = 1];
  // The id of the user from the certificate
  string user_id = 3 [(buf.validate.field).string.min_len = 1];
  // The Permissions that the user will have
  Polices polices = 4 [(buf.validate.field).required = true];

  string note = 6;
}

// ═════════════════════════════════════════════════════════════════════════════════

// Shared Auth Object for Role Based Authentication
message Role {
  option (key_schema).item_kind  = ITEM_KIND_PRIMARY_ITEM;
  option (key_schema).properties = {
    paths: [ "role_id" ]
  };

  string collection_id = 1 [(buf.validate.field).string.min_len = 1];
  string role_id       = 2 [(buf.validate.field).string.min_len = 1];

  Polices polices = 4 [(buf.validate.field).required = true];

  string note                     = 5;
  repeated string parent_role_ids = 6;
}

message RoleIDList {
  repeated string role_id = 1;
}

// Auth Object For RBAC
message UserCollectionRoles {
  option (auth_type)             = AUTH_TYPE_ROLE;
  option (key_schema).item_kind  = ITEM_KIND_PRIMARY_ITEM;
  option (key_schema).properties = {
    paths: [ "msp_id", "user_id" ]
  };

  // The collection that the user is a member of
  string collection_id = 1 [(buf.validate.field).string.min_len = 1];
  // The msp of the organization that the user's certificate is from
  string msp_id = 2 [(buf.validate.field).string.min_len = 1];
  // The id of the user from the certificate
  string user_id = 3 [(buf.validate.field).string.min_len = 1];

  // The roles that the user has in the collection
  repeated string role_ids = 4
      [(buf.validate.field).repeated = { unique: true, min_items: 1 }];

  string note = 6;
}

// ─────────────────────────────────────────────────────────────────────────────────

// Auth Object For Embedded RBAC
message UserEmbeddedRoles {
  option (auth_type)             = AUTH_TYPE_EMBEDDED_ROLE;
  option (key_schema).item_kind  = ITEM_KIND_PRIMARY_ITEM;
  option (key_schema).properties = {
    paths: [ "msp_id", "user_id" ]
  };

  string collection_id = 1 [(buf.validate.field).string.const = "global"];
  // The msp of the organization that the user's certificate is from
  string msp_id = 2 [(buf.validate.field).string.min_len = 1];
  // The id of the user from the certificate
  string user_id = 3 [(buf.validate.field).string.min_len = 1];

  // The roles that the user has in the collection
  // key is the collection id
  // value is the list of rolesIds
  map<string, RoleIDList> roles = 4;
}

// ─────────────────────────────────────────────────────────────────────────────────
// An attribute is used to define permissions via the value of the attribute in
// the users certificate for a given msp
message Attribute {
  option (auth_type)             = AUTH_TYPE_ATTRIBUTE;
  option (key_schema).item_kind  = ITEM_KIND_PRIMARY_ITEM;
  option (key_schema).properties = {
    paths: [
      "msp_id",
      "oid"
      "value"
    ]
  };
  string collection_id = 1 [(buf.validate.field).string.min_len = 1];

  // The msp of the organization that this attribute applies to
  string msp_id = 2 [(buf.validate.field).string.min_len = 1];
  // The oid of the attribute
  string oid = 3 [(buf.validate.field).string.min_len = 1];
  // The value of the attribute required to be satisfied by the user to have the
  // role
  string value = 4 [(buf.validate.field).string.min_len = 1];

  // The Permission that the user will have if they have the attribute
  Polices polices = 5 [(buf.validate.field).required = true];
}
