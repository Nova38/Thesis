syntax = "proto3";

package auth;

import "buf/validate/validate.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";


// =============================================
// Message Options
// =============================================


enum TransactionType{
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  TRANSACTION_TYPE_INVOKE = 1;
  TRANSACTION_TYPE_QUERY = 2;
}
enum ObjectDomain {
  OBJECT_DOMAIN_UNSPECIFIED  = 0;
  OBJECT_DOMAIN_STATE_OBJECT = 1;
  OBJECT_DOMAIN_COLLECTION_INDEX  = 2;
  OBJECT_DOMAIN_COLLECTION_OBJECT = 3;
}

message KeySchema {
  google.protobuf.FieldMask prefix_paths = 1;
  google.protobuf.FieldMask key_paths = 2;
  google.protobuf.FieldMask suffix_paths = 3; //!TODO: Add support for indexes

  // The value for the real key is stored in a sub message
  google.protobuf.FieldMask sub_messages = 4;
}

// Example is membership //!TODO
message Index {
  google.protobuf.FieldMask key_1 = 1;
  string type_1 = 2;

  google.protobuf.FieldMask key_2 = 3;
  string type_2 = 4;
}


// Define method options
extend google.protobuf.MethodOptions {
  Operation operation = 57775;
  TransactionType transaction_type  = 50556;
}
extend google.protobuf.MessageOptions {
  KeySchema key_schema = 54599;
  ObjectDomain object_type = 54600;
  Index index = 54601;
}




// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// Misc message options

message StateActivity {
  string tx_id = 1 [(buf.validate.field).string.min_len = 1];
  User.Id user_id = 2;
  google.protobuf.Timestamp timestamp = 3 [(buf.validate.field).required = true];
  string note = 4;

  google.protobuf.Any state = 5;
  // When it is a History Entry it can contain if the entry is deleted or hidden
  map<string, bool> metadata = 6;
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


// =============================================
// Access Control
// =============================================

message Operation {
  Action action = 1;
  string object_type = 2;
  google.protobuf.FieldMask paths = 3;

}


// Action - The action to be performed during the operation
//
// # Action Groups
//   - UNSPECIFIED: null or not set
//   - REGISTER:    Used to register a new user or collection (always allowed)
//   - COLLECTION:  Used to manage collections permissions
//   - MEMBERSHIP:  Used to manage membership of a collection
//   - OBJECT:      Used to manage objects in a collection
enum Action {
  ACTION_UNSPECIFIED                = 0;
  ACTION_REGISTER_USER              = 1; // Used to register
  ACTION_REGISTER_COLLECTION        = 2; // Used to register
  ACTION_MODIFY_DEFAULT_PERMISSIONS = 3; // Used to modify the default permissions of a collection


  ACTION_OBJECT_VIEW                = 10;
  ACTION_OBJECT_CREATE              = 11;
  ACTION_OBJECT_EDIT                = 12;
  ACTION_OBJECT_DELETE              = 13;
  ACTION_OBJECT_SUGGEST_VIEW        = 14;
  ACTION_OBJECT_SUGGEST_CREATE      = 15;
  ACTION_OBJECT_SUGGEST_DELETE      = 16;
  ACTION_OBJECT_SUGGEST_APPROVE     = 17;
  ACTION_OBJECT_VIEW_HISTORY        = 18;
  ACTION_OBJECT_HIDE_HISTORY        = 19;
}

message PathPolicy {
  string path = 1 [(buf.validate.field).required = true];
  repeated Action actions = 2;
}

message ObjectPolicy {
  string object_type = 1 [(buf.validate.field).required = true];
  string object_namespace = 2;
  repeated PathPolicy policies = 3;
}

message ACEntry {
  repeated Action actions = 1;
  repeated ObjectPolicy object = 4 [(buf.validate.field).required = true];
  google.protobuf.FieldMask view_mask = 6 [(buf.validate.field).required = true];
}




// =============================================
// State Objects
// =============================================


// Note that the types of objects are stored in the default ACEntry
message Collection {
  option (object_type) = OBJECT_DOMAIN_STATE_OBJECT;
  option (key_schema).key_paths = {paths: ["collection_id"]};


  // The key for the ledger
  string collection_id = 1 [(buf.validate.field).string.min_len = 1];
  string name = 2 [(buf.validate.field).string.min_len = 1];
  string description = 3 [(buf.validate.field).string.min_len = 1];
  ACEntry default = 4 [(buf.validate.field).required = true];
}

message User {
  option (object_type) = OBJECT_DOMAIN_STATE_OBJECT;
  option (key_schema).key_paths = {
    paths: [
      "id.msp_id",
      "id.id"
    ]
  };

  message Id {
    string msp_id = 1 [(buf.validate.field).string.min_len = 1];
    string id     = 2 [(buf.validate.field).string.min_len = 1];
  }

  Id id       = 1 [(buf.validate.field).required = true];
  string name = 2 [(buf.validate.field).string.min_len = 1];


//  !!TODO: Make this an index
//  repeated Membership memberships = 3; // Indexed to the Roles domain
}



// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

// =============================================
// Collection Object Wrapper Types
// =============================================

message ObjectMetadata {
  repeated StateActivity hidden_txs = 2;
  StateActivity last_activity = 3;
}

message Suggestions {
  option (key_schema).key_paths = { paths: ["collection_id"] };
  option (key_schema).sub_messages = { paths: ["value"] };

  string collection_id = 1;
  google.protobuf.FieldMask paths = 2;
  google.protobuf.Any value = 4;
}



// ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
// Role Collection Objects
// ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

// Used for setting Role Permissions
message Role {
  option (object_type)              = OBJECT_DOMAIN_COLLECTION_OBJECT;
  option (key_schema).prefix_paths  = {paths: ["collection_id"]};
  option (key_schema).key_paths     = {paths: ["role_id.id"]};

  message Id {
    string collection_id = 1 [(buf.validate.field).string.min_len = 1];
    string id = 2 [(buf.validate.field).string.min_len = 1];
  }

  Id role_id = 1 [(buf.validate.field).required = true];

  ObjectMetadata metadata = 2;
  ACEntry ac              = 3 [(buf.validate.field).required = true];
  string name             = 4 [(buf.validate.field).string.min_len = 1];
  string description      = 5 [(buf.validate.field).string.min_len = 1];

  repeated Id parents = 6;

  option (buf.validate.message).cel = {
    id: "Role.RoleID.Empty"
    message: "Role Id cannot be empty for a defined role"
    expression: ""
  };

}

// Used for Assigning Roles to Users
message Membership {
  option (object_type)              = OBJECT_DOMAIN_COLLECTION_INDEX;
  option (key_schema).prefix_paths  = {paths: ["role_id.collection_id"]};
  option (key_schema).key_paths     = {paths: ["role_id.id"]};
  option (key_schema).suffix_paths  = {paths: ["user_id.msp_id", "user_id.id"]};

  Role.Id role_id = 1;
  User.Id user_id = 2;

  // For use in Collections Without Roles; role.ID must be an empty string
  ACEntry fallback_ac = 3;
}


// ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈





// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

enum TxError {
  TX_ERROR_UNSPECIFIED = 0;
  TX_ERROR_REQUEST_INVALID = 1;
  TX_ERROR_RUNTIME = 2;
  TX_ERROR_RUNTIME_BAD_OPS = 3;

  /* Collection Errors */

  // The collection id is invalid
  TX_ERROR_COLLECTION_INVALID_ID = 11;
  // The collection is not registered
  TX_ERROR_COLLECTION_UNREGISTERED = 12;
  // The collection is already registered
  TX_ERROR_COLLECTION_ALREADY_REGISTERED = 13;
  // The Collection is invalid
  TX_ERROR_COLLECTION_INVALID = 14;
  // The object type name is invalid
  TX_ERROR_COLLECTION_INVALID_OBJECT_TYPE = 15;
  // The role id is invalid
  TX_ERROR_COLLECTION_INVALID_ROLE_ID = 16;


  // User Errors

  // The user does not have permission to perform the operation
  TX_ERROR_USER_INVALID_ID = 20;
  // The user is not registered
  TX_ERROR_USER_UNREGISTERED = 21;
  // The user is already registered
  TX_ERROR_USER_ALREADY_REGISTERED = 22;
  // The user is invalid
  TX_ERROR_USER_INVALID = 23;
  // The user does not have a role in the collection
  TX_ERROR_USER_NO_ROLE = 24;
  // The user has a deleted role in the collection
  TX_ERROR_USER_DELETED_ROLE = 25;
  // The user does not have permission to perform the operation
  TX_ERROR_USER_PERMISSION_DENIED = 26;



  // The object id is invalid
  TX_ERROR_OBJECT_INVALID_ID = 31;
  // The object is not registered
  TX_ERROR_OBJECT_UNREGISTERED = 32;
  // The object is already registered
  TX_ERROR_OBJECT_ALREADY_REGISTERED = 33;
  // The object is invalid
  TX_ERROR_OBJECT_INVALID = 34;

  //
  TX_ERROR_INVALID_OBJECT_FIELD_PATH = 35;
  TX_ERROR_INVALID_OBJECT_FIELD_VALUE = 36;
  //
}
