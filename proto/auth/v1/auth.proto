syntax = "proto3";

package auth;

import "buf/validate/validate.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

// import "auth/options/options.proto";

// ═════════════════════════════════════════════
// Message Options
// ═════════════════════════════════════════════

// Define method options
extend google.protobuf.MethodOptions {
  Operation operation = 57775;
  TransactionType transaction_type = 50556;
}
extend google.protobuf.MessageOptions {
  KeySchema key_schema = 54599;
}


// ═════════════════════════════════════════════
// Enums
// ═════════════════════════════════════════════

enum TransactionType {
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  TRANSACTION_TYPE_INVOKE = 1;
  TRANSACTION_TYPE_QUERY = 2;
}

enum AuthType {
  AUTH_TYPE_UNSPECIFIED = 0;
  AUTH_TYPE_NONE = 1;
  AUTH_TYPE_ROLE = 2;
  AUTH_TYPE_IDENTITY = 3;
}

enum ItemKind {
  ITEM_KIND_UNSPECIFIED = 0;
  // ITEM_KIND_GLOBAL_ITEM = 1;
  // Item's key := {COLLECTION_ID}{TYPE}[...key_paths]
  ITEM_KIND_PRIMARY_ITEM = 2;
  // Item's key := {COLLECTION_ID}{TYPE}<PrimaryKey>{...key_paths}
  ITEM_KIND_SUB_ITEM = 3;
  ITEM_KIND_REFERENCE = 4;
}

enum Action {
  // Should throw an error if used
  ACTION_UNSPECIFIED = 0;
  ACTION_UTILITY = 1;

  // View the contents of an item
  ACTION_VIEW = 10;
  // Create a new item
  //  - key must not already exist
  ACTION_CREATE = 11;
  // Update an existing item
  //   - key must already exist
  //   - potential has paths
  ACTION_UPDATE = 12;
  // Delete an existing item, key must already exist
  ACTION_DELETE = 13;

  // Suggest a change to an item, key must already exist
  ACTION_SUGGEST_VIEW = 14;

  // Suggest a change to an item, key must already exist
  ACTION_SUGGEST_CREATE = 15;
  // Delete a suggestion, key must already exist
  ACTION_SUGGEST_DELETE = 16;
  // Approve a suggestion and apply it to the item, key must already exist
  ACTION_SUGGEST_APPROVE = 17;

  // View the history of an item

  ACTION_VIEW_HISTORY = 18;
  ACTION_VIEW_HIDDEN_TXS = 19;
  ACTION_HIDE_TX = 20;
  ACTION_UNHIDE_TX = 21;

  ACTION_REFERENCE_CREATE = 30;
  ACTION_REFERENCE_DELETE = 31;
  ACTION_REFERENCE_VIEW = 32;
}

enum TxError {
  UNSPECIFIED = 0;
  REQUEST_INVALID = 1;
  RUNTIME = 2;
  RUNTIME_BAD_OPS = 3;
  // The provided key is not in the world state
  KEY_NOT_FOUND = 4;
  // The provided key is already in the world state
  KEY_ALREADY_EXISTS = 5;

  /* Collection Errors */

  // The collection id is invalid
  COLLECTION_INVALID_ID = 11;
  // The collection is not registered and thus cannot be accessed
  COLLECTION_UNREGISTERED = 12;
  // The collection is already registered and thus cannot be registered again
  COLLECTION_ALREADY_REGISTERED = 13;
  // The collection is invalid (e.g. the collection does not have a default ACLEntry)
  COLLECTION_INVALID = 14;

  // The item type in the collection is invalid
  COLLECTION_INVALID_ITEM_TYPE = 15;
  // The role id in the collection is invalid
  COLLECTION_INVALID_ROLE_ID = 16;

  /* User Errors */

  // The user does not have permission to perform the operation
  USER_INVALID_ID = 20;
  // The certificate is not registered as a user and thus cannot be used
  USER_UNREGISTERED = 21;
  // The certificate is already registered as a user and thus cannot be registered again
  USER_ALREADY_REGISTERED = 22;
  // The user is invalid
  USER_INVALID = 23;
  // The user does not have a role
  USER_NO_ROLE = 24;
  // USER_DELETED_ROLE          = 25;
  // The user does not have permission to perform the operation
  USER_PERMISSION_DENIED = 26;
  // The Item's key is invalid
  ITEM_INVALID_ID = 31;
  // The Item is not registered and thus cannot be accessed
  ITEM_UNREGISTERED = 32;
  // The Item is already registered and thus cannot be registered again
  ITEM_ALREADY_REGISTERED = 33;
  // The Item is invalid
  ITEM_INVALID = 34;

  // The item field path is invalid for the item type
  INVALID_ITEM_FIELD_PATH = 35;
  // The value at the item field path is invalid for the item type
  INVALID_ITEM_FIELD_VALUE = 36;
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// Misc message options
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

message User {
  string msp_id = 1 [(buf.validate.field).string.min_len = 1];
  string user_id = 2;
}

message KeySchema {
  // The item type of the key
  string item_type = 1 [(buf.validate.field).string.min_len = 1];
  // The kind of item that the key is for
  ItemKind item_kind = 2;
  // The paths that make up the key
  google.protobuf.FieldMask properties   = 3;
}

// Can be used as the history entry
message StateActivity {
  // The transaction id that caused the change
  string tx_id = 1 [(buf.validate.field).string.min_len = 1];
  // The msp of the user that caused the change
  string msp_id = 2 [(buf.validate.field).string.min_len = 1];
  // The id of the user that caused the change
  string user_id = 3 [(buf.validate.field).string.min_len = 1];
  // The timestamp of the change
  google.protobuf.Timestamp timestamp = 4 [(buf.validate.field).required = true];
  // A note about the change
  string note = 5;
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

// ═════════════════════════════════════════════
// Access Control
// ═════════════════════════════════════════════

message Operation {
  Action action = 1 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
  string collection_id = 2 [(buf.validate.field).string.min_len = 1];
  string item_type = 3 [(buf.validate.field).string.min_len = 1];
  google.protobuf.FieldMask paths = 5;
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━








// ═════════════════════════════════════════════════════════════════════════════════
// Global Items
// ═════════════════════════════════════════════════════════════════════════════════


// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━




// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
