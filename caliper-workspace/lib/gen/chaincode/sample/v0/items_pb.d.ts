// @generated by protoc-gen-es v1.3.1
// @generated from file chaincode/sample/v0/items.proto (package sample, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message sample.Item
 */
export declare class Item extends Message<Item> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: int32 quantity = 3;
   */
  quantity: number;

  constructor(data?: PartialMessage<Item>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sample.Item";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item;

  static equals(a: Item | PlainMessage<Item> | undefined, b: Item | PlainMessage<Item> | undefined): boolean;
}

/**
 * @generated from message sample.Group
 */
export declare class Group extends Message<Group> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: repeated sample.Item items = 2;
   */
  items: Item[];

  constructor(data?: PartialMessage<Group>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sample.Group";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Group;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Group;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Group;

  static equals(a: Group | PlainMessage<Group> | undefined, b: Group | PlainMessage<Group> | undefined): boolean;
}

/**
 * @generated from message sample.Person
 */
export declare class Person extends Message<Person> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: int32 age = 2;
   */
  age: number;

  /**
   * @generated from field: repeated string friends = 3;
   */
  friends: string[];

  /**
   * @generated from field: repeated sample.Group groups = 4;
   */
  groups: Group[];

  constructor(data?: PartialMessage<Person>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sample.Person";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Person;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Person;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Person;

  static equals(a: Person | PlainMessage<Person> | undefined, b: Person | PlainMessage<Person> | undefined): boolean;
}

/**
 * @generated from message sample.Book
 */
export declare class Book extends Message<Book> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId: string;

  /**
   * @generated from field: string isbn = 2;
   */
  isbn: string;

  /**
   * @generated from field: string book_title = 3;
   */
  bookTitle: string;

  /**
   * @generated from field: string author = 4;
   */
  author: string;

  /**
   * @generated from field: int32 year = 5;
   */
  year: number;

  /**
   * @generated from field: string publisher = 6;
   */
  publisher: string;

  /**
   * @generated from field: string language = 7;
   */
  language: string;

  /**
   * @generated from field: string description = 8;
   */
  description: string;

  constructor(data?: PartialMessage<Book>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sample.Book";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Book;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Book;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Book;

  static equals(a: Book | PlainMessage<Book> | undefined, b: Book | PlainMessage<Book> | undefined): boolean;
}

/**
 * @generated from message sample.Degree
 */
export declare class Degree extends Message<Degree> {
  /**
   * @generated from field: string degree_name = 1;
   */
  degreeName: string;

  /**
   * @generated from field: string institute = 2;
   */
  institute: string;

  /**
   * @generated from field: google.protobuf.Timestamp degree_date = 3;
   */
  degreeDate?: Timestamp;

  constructor(data?: PartialMessage<Degree>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sample.Degree";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Degree;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Degree;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Degree;

  static equals(a: Degree | PlainMessage<Degree> | undefined, b: Degree | PlainMessage<Degree> | undefined): boolean;
}

/**
 * @generated from message sample.Awards
 */
export declare class Awards extends Message<Awards> {
  /**
   * @generated from field: string award_name = 1;
   */
  awardName: string;

  /**
   * @generated from field: google.protobuf.Timestamp award_date = 2;
   */
  awardDate?: Timestamp;

  /**
   * @generated from field: string award_description = 3;
   */
  awardDescription: string;

  constructor(data?: PartialMessage<Awards>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sample.Awards";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Awards;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Awards;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Awards;

  static equals(a: Awards | PlainMessage<Awards> | undefined, b: Awards | PlainMessage<Awards> | undefined): boolean;
}

/**
 * @generated from message sample.Author
 */
export declare class Author extends Message<Author> {
  /**
   * @generated from field: string author_id = 1;
   */
  authorId: string;

  /**
   * @generated from field: string author_name = 2;
   */
  authorName: string;

  /**
   * @generated from field: repeated sample.Book books = 3;
   */
  books: Book[];

  /**
   * Key: degree_name
   *
   * @generated from field: map<string, sample.Degree> degrees = 4;
   */
  degrees: { [key: string]: Degree };

  constructor(data?: PartialMessage<Author>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sample.Author";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Author;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Author;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Author;

  static equals(a: Author | PlainMessage<Author> | undefined, b: Author | PlainMessage<Author> | undefined): boolean;
}

