// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: ccbio/schema/v1/state.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nova38/thesis/gen/go/key"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Role int32

const (
	Role_ROLE_PUBLIC_UNSPECIFIED Role = 0
	Role_ROLE_STUDENT            Role = 1
	Role_ROLE_ASSISTANT          Role = 2
	Role_ROLE_CURATOR            Role = 3
	Role_ROLE_MANAGER            Role = 4
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_PUBLIC_UNSPECIFIED",
		1: "ROLE_STUDENT",
		2: "ROLE_ASSISTANT",
		3: "ROLE_CURATOR",
		4: "ROLE_MANAGER",
	}
	Role_value = map[string]int32{
		"ROLE_PUBLIC_UNSPECIFIED": 0,
		"ROLE_STUDENT":            1,
		"ROLE_ASSISTANT":          2,
		"ROLE_CURATOR":            3,
		"ROLE_MANAGER":            4,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_ccbio_schema_v1_state_proto_enumTypes[0].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_ccbio_schema_v1_state_proto_enumTypes[0]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{0}
}

type Action_Level int32

const (
	Action_LEVEL_UNSPECIFIED     Action_Level = 0
	Action_LEVEL_VIEW            Action_Level = 1
	Action_LEVEL_EDIT            Action_Level = 2
	Action_LEVEL_SUGGEST_EDIT    Action_Level = 3
	Action_LEVEL_SUGGEST_APPROVE Action_Level = 4
	Action_LEVEL_SUGGEST_REJECT  Action_Level = 5
	Action_LEVEL_CREATE          Action_Level = 6
	Action_LEVEL_DELETE          Action_Level = 7
	Action_LEVEL_HIDE_TX         Action_Level = 8
	Action_LEVEL_INIT            Action_Level = 9
)

// Enum value maps for Action_Level.
var (
	Action_Level_name = map[int32]string{
		0: "LEVEL_UNSPECIFIED",
		1: "LEVEL_VIEW",
		2: "LEVEL_EDIT",
		3: "LEVEL_SUGGEST_EDIT",
		4: "LEVEL_SUGGEST_APPROVE",
		5: "LEVEL_SUGGEST_REJECT",
		6: "LEVEL_CREATE",
		7: "LEVEL_DELETE",
		8: "LEVEL_HIDE_TX",
		9: "LEVEL_INIT",
	}
	Action_Level_value = map[string]int32{
		"LEVEL_UNSPECIFIED":     0,
		"LEVEL_VIEW":            1,
		"LEVEL_EDIT":            2,
		"LEVEL_SUGGEST_EDIT":    3,
		"LEVEL_SUGGEST_APPROVE": 4,
		"LEVEL_SUGGEST_REJECT":  5,
		"LEVEL_CREATE":          6,
		"LEVEL_DELETE":          7,
		"LEVEL_HIDE_TX":         8,
		"LEVEL_INIT":            9,
	}
)

func (x Action_Level) Enum() *Action_Level {
	p := new(Action_Level)
	*p = x
	return p
}

func (x Action_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_ccbio_schema_v1_state_proto_enumTypes[1].Descriptor()
}

func (Action_Level) Type() protoreflect.EnumType {
	return &file_ccbio_schema_v1_state_proto_enumTypes[1]
}

func (x Action_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_Level.Descriptor instead.
func (Action_Level) EnumDescriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{1, 0}
}

type Action_Domain int32

const (
	Action_DOMAIN_UNSPECIFIED  Action_Domain = 0
	Action_DOMAIN_ROLES        Action_Domain = 1
	Action_DOMAIN_USERS        Action_Domain = 2
	Action_DOMAIN_SPECIMEN     Action_Domain = 3
	Action_DOMAIN_PRIMARY      Action_Domain = 4
	Action_DOMAIN_SECONDARY    Action_Domain = 5
	Action_DOMAIN_TAXON        Action_Domain = 6
	Action_DOMAIN_GEOREFERENCE Action_Domain = 7
	Action_DOMAIN_IMAGES       Action_Domain = 8
	Action_DOMAIN_LOANS        Action_Domain = 9
	Action_DOMAIN_GRANTS       Action_Domain = 10
	Action_DOMAIN_COLLECTION   Action_Domain = 11
)

// Enum value maps for Action_Domain.
var (
	Action_Domain_name = map[int32]string{
		0:  "DOMAIN_UNSPECIFIED",
		1:  "DOMAIN_ROLES",
		2:  "DOMAIN_USERS",
		3:  "DOMAIN_SPECIMEN",
		4:  "DOMAIN_PRIMARY",
		5:  "DOMAIN_SECONDARY",
		6:  "DOMAIN_TAXON",
		7:  "DOMAIN_GEOREFERENCE",
		8:  "DOMAIN_IMAGES",
		9:  "DOMAIN_LOANS",
		10: "DOMAIN_GRANTS",
		11: "DOMAIN_COLLECTION",
	}
	Action_Domain_value = map[string]int32{
		"DOMAIN_UNSPECIFIED":  0,
		"DOMAIN_ROLES":        1,
		"DOMAIN_USERS":        2,
		"DOMAIN_SPECIMEN":     3,
		"DOMAIN_PRIMARY":      4,
		"DOMAIN_SECONDARY":    5,
		"DOMAIN_TAXON":        6,
		"DOMAIN_GEOREFERENCE": 7,
		"DOMAIN_IMAGES":       8,
		"DOMAIN_LOANS":        9,
		"DOMAIN_GRANTS":       10,
		"DOMAIN_COLLECTION":   11,
	}
)

func (x Action_Domain) Enum() *Action_Domain {
	p := new(Action_Domain)
	*p = x
	return p
}

func (x Action_Domain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_Domain) Descriptor() protoreflect.EnumDescriptor {
	return file_ccbio_schema_v1_state_proto_enumTypes[2].Descriptor()
}

func (Action_Domain) Type() protoreflect.EnumType {
	return &file_ccbio_schema_v1_state_proto_enumTypes[2]
}

func (x Action_Domain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_Domain.Descriptor instead.
func (Action_Domain) EnumDescriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{1, 1}
}

type LastModified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    *User_Id               `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName  string                 `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	TxId      string                 `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *LastModified) Reset() {
	*x = LastModified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastModified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastModified) ProtoMessage() {}

func (x *LastModified) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastModified.ProtoReflect.Descriptor instead.
func (*LastModified) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{0}
}

func (x *LastModified) GetUserId() *User_Id {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *LastModified) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LastModified) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *LastModified) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   Action_Level    `protobuf:"varint,1,opt,name=level,proto3,enum=ccbio.schemav1.Action_Level" json:"level,omitempty"`
	Domains []Action_Domain `protobuf:"varint,2,rep,packed,name=domains,proto3,enum=ccbio.schemav1.Action_Domain" json:"domains,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{1}
}

func (x *Action) GetLevel() Action_Level {
	if x != nil {
		return x.Level
	}
	return Action_LEVEL_UNSPECIFIED
}

func (x *Action) GetDomains() []Action_Domain {
	if x != nil {
		return x.Domains
	}
	return nil
}

// --------------------------------------------------
// Collection
// --------------------------------------------------
type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// buf:lint:ignore FIELD_SAME_JSON_NAME
	Id            *Collection_Id            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessControl *Collection_AccessControl `protobuf:"bytes,2,opt,name=access_control,json=accessControl,proto3" json:"access_control,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{2}
}

func (x *Collection) GetId() *Collection_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Collection) GetAccessControl() *Collection_AccessControl {
	if x != nil {
		return x.AccessControl
	}
	return nil
}

type CollectionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Collection `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CollectionList) Reset() {
	*x = CollectionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionList) ProtoMessage() {}

func (x *CollectionList) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionList.ProtoReflect.Descriptor instead.
func (*CollectionList) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{3}
}

func (x *CollectionList) GetItems() []*Collection {
	if x != nil {
		return x.Items
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *User_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email       string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Affiliation string   `protobuf:"bytes,4,opt,name=affiliation,proto3" json:"affiliation,omitempty"`
	// Key is the collectionID
	Memberships map[string]Role `protobuf:"bytes,5,rep,name=memberships,proto3" json:"memberships,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ccbio.schemav1.Role"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{4}
}

func (x *User) GetId() *User_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetAffiliation() string {
	if x != nil {
		return x.Affiliation
	}
	return ""
}

func (x *User) GetMemberships() map[string]Role {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type Specimen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *Specimen_Id               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Primary      *Specimen_Primary          `protobuf:"bytes,3,opt,name=primary,proto3" json:"primary,omitempty"`
	Secondary    *Specimen_Secondary        `protobuf:"bytes,4,opt,name=secondary,proto3" json:"secondary,omitempty"`
	Taxon        *Specimen_Taxon            `protobuf:"bytes,5,opt,name=taxon,proto3" json:"taxon,omitempty"`
	Georeference *Specimen_Georeference     `protobuf:"bytes,6,opt,name=georeference,proto3" json:"georeference,omitempty"`
	Images       map[string]*Specimen_Image `protobuf:"bytes,7,rep,name=images,proto3" json:"images,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Loans        string                     `protobuf:"bytes,8,opt,name=loans,proto3" json:"loans,omitempty"`
	Grants       string                     `protobuf:"bytes,9,opt,name=grants,proto3" json:"grants,omitempty"`
	// map<string, Loan> loans = 8;
	// map<string, Grant> grants = 9;
	HiddenTxs    map[string]*Specimen_HiddenTx `protobuf:"bytes,10,rep,name=hidden_txs,json=hiddenTxs,proto3" json:"hidden_txs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastModified *LastModified                 `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen) Reset() {
	*x = Specimen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen) ProtoMessage() {}

func (x *Specimen) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen.ProtoReflect.Descriptor instead.
func (*Specimen) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{5}
}

func (x *Specimen) GetId() *Specimen_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Specimen) GetPrimary() *Specimen_Primary {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *Specimen) GetSecondary() *Specimen_Secondary {
	if x != nil {
		return x.Secondary
	}
	return nil
}

func (x *Specimen) GetTaxon() *Specimen_Taxon {
	if x != nil {
		return x.Taxon
	}
	return nil
}

func (x *Specimen) GetGeoreference() *Specimen_Georeference {
	if x != nil {
		return x.Georeference
	}
	return nil
}

func (x *Specimen) GetImages() map[string]*Specimen_Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Specimen) GetLoans() string {
	if x != nil {
		return x.Loans
	}
	return ""
}

func (x *Specimen) GetGrants() string {
	if x != nil {
		return x.Grants
	}
	return ""
}

func (x *Specimen) GetHiddenTxs() map[string]*Specimen_HiddenTx {
	if x != nil {
		return x.HiddenTxs
	}
	return nil
}

func (x *Specimen) GetLastModified() *LastModified {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type SuggestedUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *SuggestedUpdate_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SuggestedBy *User_Id            `protobuf:"bytes,3,opt,name=suggested_by,json=suggestedBy,proto3" json:"suggested_by,omitempty"`
	// set in the chaincode
	SuggestedDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=suggested_date,json=suggestedDate,proto3" json:"suggested_date,omitempty"`
	SuggestedReason string                 `protobuf:"bytes,5,opt,name=suggested_reason,json=suggestedReason,proto3" json:"suggested_reason,omitempty"`
	Primary         *Specimen_Primary      `protobuf:"bytes,6,opt,name=primary,proto3" json:"primary,omitempty"`
	Secondary       *Specimen_Secondary    `protobuf:"bytes,7,opt,name=secondary,proto3" json:"secondary,omitempty"`
	Taxon           *Specimen_Taxon        `protobuf:"bytes,8,opt,name=taxon,proto3" json:"taxon,omitempty"`
	Georeference    *Specimen_Georeference `protobuf:"bytes,9,opt,name=georeference,proto3" json:"georeference,omitempty"`
	Loans           string                 `protobuf:"bytes,10,opt,name=loans,proto3" json:"loans,omitempty"`
	Grants          string                 `protobuf:"bytes,11,opt,name=grants,proto3" json:"grants,omitempty"`
}

func (x *SuggestedUpdate) Reset() {
	*x = SuggestedUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedUpdate) ProtoMessage() {}

func (x *SuggestedUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedUpdate.ProtoReflect.Descriptor instead.
func (*SuggestedUpdate) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{6}
}

func (x *SuggestedUpdate) GetId() *SuggestedUpdate_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SuggestedUpdate) GetSuggestedBy() *User_Id {
	if x != nil {
		return x.SuggestedBy
	}
	return nil
}

func (x *SuggestedUpdate) GetSuggestedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SuggestedDate
	}
	return nil
}

func (x *SuggestedUpdate) GetSuggestedReason() string {
	if x != nil {
		return x.SuggestedReason
	}
	return ""
}

func (x *SuggestedUpdate) GetPrimary() *Specimen_Primary {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *SuggestedUpdate) GetSecondary() *Specimen_Secondary {
	if x != nil {
		return x.Secondary
	}
	return nil
}

func (x *SuggestedUpdate) GetTaxon() *Specimen_Taxon {
	if x != nil {
		return x.Taxon
	}
	return nil
}

func (x *SuggestedUpdate) GetGeoreference() *Specimen_Georeference {
	if x != nil {
		return x.Georeference
	}
	return nil
}

func (x *SuggestedUpdate) GetLoans() string {
	if x != nil {
		return x.Loans
	}
	return ""
}

func (x *SuggestedUpdate) GetGrants() string {
	if x != nil {
		return x.Grants
	}
	return ""
}

type SuggestedStateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SuggestedUpdate `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SuggestedStateList) Reset() {
	*x = SuggestedStateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedStateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedStateList) ProtoMessage() {}

func (x *SuggestedStateList) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedStateList.ProtoReflect.Descriptor instead.
func (*SuggestedStateList) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{7}
}

func (x *SuggestedStateList) GetItems() []*SuggestedUpdate {
	if x != nil {
		return x.Items
	}
	return nil
}

type Collection_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *Collection_Id) Reset() {
	*x = Collection_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_Id) ProtoMessage() {}

func (x *Collection_Id) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_Id.ProtoReflect.Descriptor instead.
func (*Collection_Id) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Collection_Id) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type Collection_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Collection `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Collection_List) Reset() {
	*x = Collection_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_List) ProtoMessage() {}

func (x *Collection_List) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_List.ProtoReflect.Descriptor instead.
func (*Collection_List) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Collection_List) GetItems() []*Collection {
	if x != nil {
		return x.Items
	}
	return nil
}

type Collection_AccessControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @property {array} The roles that can edit the privileges of the roles.
	Roles *Collection_AccessControl_AccessControlActions `protobuf:"bytes,1,opt,name=roles,proto3" json:"roles,omitempty"`
	// @property {array} The roles that can edit the roles of the users.
	Users *Collection_AccessControl_AccessControlActions `protobuf:"bytes,2,opt,name=users,proto3" json:"users,omitempty"`
	// @property {array} The roles that can edit the specimens entries.
	Specimen *Collection_AccessControl_SpecimenActions `protobuf:"bytes,3,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// @property {array} The roles that can edit the primary section.
	Primary *Collection_AccessControl_SectionActions `protobuf:"bytes,4,opt,name=primary,proto3" json:"primary,omitempty"`
	// @property {array} The roles that can edit the secondary section.
	Secondary *Collection_AccessControl_SectionActions `protobuf:"bytes,5,opt,name=secondary,proto3" json:"secondary,omitempty"`
	// @property {array} The roles that can edit the taxon section.
	Taxon *Collection_AccessControl_SectionActions `protobuf:"bytes,6,opt,name=taxon,proto3" json:"taxon,omitempty"`
	// @property {array} The roles that can edit the georeference section.
	Georeference *Collection_AccessControl_SectionActions `protobuf:"bytes,7,opt,name=georeference,proto3" json:"georeference,omitempty"`
	// @property {array} The roles that can edit the images section.
	Images *Collection_AccessControl_SectionActions `protobuf:"bytes,8,opt,name=images,proto3" json:"images,omitempty"`
	// @property {array} The roles that can edit the loans section.
	Loans *Collection_AccessControl_SectionActions `protobuf:"bytes,9,opt,name=loans,proto3" json:"loans,omitempty"`
	// @property {array} The roles that can edit the grants section.
	Grants *Collection_AccessControl_SectionActions `protobuf:"bytes,10,opt,name=grants,proto3" json:"grants,omitempty"`
}

func (x *Collection_AccessControl) Reset() {
	*x = Collection_AccessControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_AccessControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_AccessControl) ProtoMessage() {}

func (x *Collection_AccessControl) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_AccessControl.ProtoReflect.Descriptor instead.
func (*Collection_AccessControl) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Collection_AccessControl) GetRoles() *Collection_AccessControl_AccessControlActions {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Collection_AccessControl) GetUsers() *Collection_AccessControl_AccessControlActions {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Collection_AccessControl) GetSpecimen() *Collection_AccessControl_SpecimenActions {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Collection_AccessControl) GetPrimary() *Collection_AccessControl_SectionActions {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *Collection_AccessControl) GetSecondary() *Collection_AccessControl_SectionActions {
	if x != nil {
		return x.Secondary
	}
	return nil
}

func (x *Collection_AccessControl) GetTaxon() *Collection_AccessControl_SectionActions {
	if x != nil {
		return x.Taxon
	}
	return nil
}

func (x *Collection_AccessControl) GetGeoreference() *Collection_AccessControl_SectionActions {
	if x != nil {
		return x.Georeference
	}
	return nil
}

func (x *Collection_AccessControl) GetImages() *Collection_AccessControl_SectionActions {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Collection_AccessControl) GetLoans() *Collection_AccessControl_SectionActions {
	if x != nil {
		return x.Loans
	}
	return nil
}

func (x *Collection_AccessControl) GetGrants() *Collection_AccessControl_SectionActions {
	if x != nil {
		return x.Grants
	}
	return nil
}

type Collection_AccessControl_AccessControlActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View []Role `protobuf:"varint,1,rep,packed,name=view,proto3,enum=ccbio.schemav1.Role" json:"view,omitempty"`
	Edit []Role `protobuf:"varint,2,rep,packed,name=edit,proto3,enum=ccbio.schemav1.Role" json:"edit,omitempty"`
}

func (x *Collection_AccessControl_AccessControlActions) Reset() {
	*x = Collection_AccessControl_AccessControlActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_AccessControl_AccessControlActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_AccessControl_AccessControlActions) ProtoMessage() {}

func (x *Collection_AccessControl_AccessControlActions) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_AccessControl_AccessControlActions.ProtoReflect.Descriptor instead.
func (*Collection_AccessControl_AccessControlActions) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{2, 2, 0}
}

func (x *Collection_AccessControl_AccessControlActions) GetView() []Role {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *Collection_AccessControl_AccessControlActions) GetEdit() []Role {
	if x != nil {
		return x.Edit
	}
	return nil
}

type Collection_AccessControl_SpecimenActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View   []Role `protobuf:"varint,1,rep,packed,name=view,proto3,enum=ccbio.schemav1.Role" json:"view,omitempty"`
	Create []Role `protobuf:"varint,2,rep,packed,name=create,proto3,enum=ccbio.schemav1.Role" json:"create,omitempty"`
	Delete []Role `protobuf:"varint,3,rep,packed,name=delete,proto3,enum=ccbio.schemav1.Role" json:"delete,omitempty"`
	HideTx []Role `protobuf:"varint,4,rep,packed,name=hide_tx,json=hideTx,proto3,enum=ccbio.schemav1.Role" json:"hide_tx,omitempty"` //      repeated Role suggest = 4 [(buf.validate.field).repeated.min_items = 1];
}

func (x *Collection_AccessControl_SpecimenActions) Reset() {
	*x = Collection_AccessControl_SpecimenActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_AccessControl_SpecimenActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_AccessControl_SpecimenActions) ProtoMessage() {}

func (x *Collection_AccessControl_SpecimenActions) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_AccessControl_SpecimenActions.ProtoReflect.Descriptor instead.
func (*Collection_AccessControl_SpecimenActions) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{2, 2, 1}
}

func (x *Collection_AccessControl_SpecimenActions) GetView() []Role {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *Collection_AccessControl_SpecimenActions) GetCreate() []Role {
	if x != nil {
		return x.Create
	}
	return nil
}

func (x *Collection_AccessControl_SpecimenActions) GetDelete() []Role {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *Collection_AccessControl_SpecimenActions) GetHideTx() []Role {
	if x != nil {
		return x.HideTx
	}
	return nil
}

type Collection_AccessControl_SectionActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View           []Role `protobuf:"varint,1,rep,packed,name=view,proto3,enum=ccbio.schemav1.Role" json:"view,omitempty"`
	Edit           []Role `protobuf:"varint,2,rep,packed,name=edit,proto3,enum=ccbio.schemav1.Role" json:"edit,omitempty"`
	SuggestEdit    []Role `protobuf:"varint,3,rep,packed,name=suggest_edit,json=suggestEdit,proto3,enum=ccbio.schemav1.Role" json:"suggest_edit,omitempty"`
	SuggestApprove []Role `protobuf:"varint,4,rep,packed,name=suggest_approve,json=suggestApprove,proto3,enum=ccbio.schemav1.Role" json:"suggest_approve,omitempty"`
	SuggestReject  []Role `protobuf:"varint,5,rep,packed,name=suggest_reject,json=suggestReject,proto3,enum=ccbio.schemav1.Role" json:"suggest_reject,omitempty"`
}

func (x *Collection_AccessControl_SectionActions) Reset() {
	*x = Collection_AccessControl_SectionActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection_AccessControl_SectionActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection_AccessControl_SectionActions) ProtoMessage() {}

func (x *Collection_AccessControl_SectionActions) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection_AccessControl_SectionActions.ProtoReflect.Descriptor instead.
func (*Collection_AccessControl_SectionActions) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{2, 2, 2}
}

func (x *Collection_AccessControl_SectionActions) GetView() []Role {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *Collection_AccessControl_SectionActions) GetEdit() []Role {
	if x != nil {
		return x.Edit
	}
	return nil
}

func (x *Collection_AccessControl_SectionActions) GetSuggestEdit() []Role {
	if x != nil {
		return x.SuggestEdit
	}
	return nil
}

func (x *Collection_AccessControl_SectionActions) GetSuggestApprove() []Role {
	if x != nil {
		return x.SuggestApprove
	}
	return nil
}

func (x *Collection_AccessControl_SectionActions) GetSuggestReject() []Role {
	if x != nil {
		return x.SuggestReject
	}
	return nil
}

// The key for the ledger
type User_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *User_Id) Reset() {
	*x = User_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Id) ProtoMessage() {}

func (x *User_Id) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Id.ProtoReflect.Descriptor instead.
func (*User_Id) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{4, 0}
}

func (x *User_Id) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *User_Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type User_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*User `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *User_List) Reset() {
	*x = User_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_List) ProtoMessage() {}

func (x *User_List) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_List.ProtoReflect.Descriptor instead.
func (*User_List) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{4, 1}
}

func (x *User_List) GetItems() []*User {
	if x != nil {
		return x.Items
	}
	return nil
}

type Specimen_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Id           string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Specimen_Id) Reset() {
	*x = Specimen_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Id) ProtoMessage() {}

func (x *Specimen_Id) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Id.ProtoReflect.Descriptor instead.
func (*Specimen_Id) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Specimen_Id) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Specimen_Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Specimen_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Specimen `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Specimen_List) Reset() {
	*x = Specimen_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_List) ProtoMessage() {}

func (x *Specimen_List) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_List.ProtoReflect.Descriptor instead.
func (*Specimen_List) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Specimen_List) GetItems() []*Specimen {
	if x != nil {
		return x.Items
	}
	return nil
}

type Specimen_History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *Specimen_Id              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Entries []*Specimen_History_Entry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *Specimen_History) Reset() {
	*x = Specimen_History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_History) ProtoMessage() {}

func (x *Specimen_History) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_History.ProtoReflect.Descriptor instead.
func (*Specimen_History) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Specimen_History) GetId() *Specimen_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Specimen_History) GetEntries() []*Specimen_History_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type Specimen_Primary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogNumber   string                 `protobuf:"bytes,1,opt,name=catalog_number,json=catalogNumber,proto3" json:"catalog_number,omitempty"`
	AccessionNumber string                 `protobuf:"bytes,2,opt,name=accession_number,json=accessionNumber,proto3" json:"accession_number,omitempty"`
	FieldNumber     string                 `protobuf:"bytes,3,opt,name=field_number,json=fieldNumber,proto3" json:"field_number,omitempty"`
	TissueNumber    string                 `protobuf:"bytes,4,opt,name=tissue_number,json=tissueNumber,proto3" json:"tissue_number,omitempty"`
	Cataloger       string                 `protobuf:"bytes,5,opt,name=cataloger,proto3" json:"cataloger,omitempty"`
	Collector       string                 `protobuf:"bytes,6,opt,name=collector,proto3" json:"collector,omitempty"`
	Determiner      string                 `protobuf:"bytes,7,opt,name=determiner,proto3" json:"determiner,omitempty"`
	FieldDate       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=field_date,json=fieldDate,proto3" json:"field_date,omitempty"`
	CatalogDate     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=catalog_date,json=catalogDate,proto3" json:"catalog_date,omitempty"`
	DeterminedDate  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=determined_date,json=determinedDate,proto3" json:"determined_date,omitempty"`
	// string collection_date = 4;
	DeterminedReason string        `protobuf:"bytes,11,opt,name=determined_reason,json=determinedReason,proto3" json:"determined_reason,omitempty"`
	LastModified     *LastModified `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Primary) Reset() {
	*x = Specimen_Primary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Primary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Primary) ProtoMessage() {}

func (x *Specimen_Primary) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Primary.ProtoReflect.Descriptor instead.
func (*Specimen_Primary) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{5, 3}
}

func (x *Specimen_Primary) GetCatalogNumber() string {
	if x != nil {
		return x.CatalogNumber
	}
	return ""
}

func (x *Specimen_Primary) GetAccessionNumber() string {
	if x != nil {
		return x.AccessionNumber
	}
	return ""
}

func (x *Specimen_Primary) GetFieldNumber() string {
	if x != nil {
		return x.FieldNumber
	}
	return ""
}

func (x *Specimen_Primary) GetTissueNumber() string {
	if x != nil {
		return x.TissueNumber
	}
	return ""
}

func (x *Specimen_Primary) GetCataloger() string {
	if x != nil {
		return x.Cataloger
	}
	return ""
}

func (x *Specimen_Primary) GetCollector() string {
	if x != nil {
		return x.Collector
	}
	return ""
}

func (x *Specimen_Primary) GetDeterminer() string {
	if x != nil {
		return x.Determiner
	}
	return ""
}

func (x *Specimen_Primary) GetFieldDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FieldDate
	}
	return nil
}

func (x *Specimen_Primary) GetCatalogDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CatalogDate
	}
	return nil
}

func (x *Specimen_Primary) GetDeterminedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeterminedDate
	}
	return nil
}

func (x *Specimen_Primary) GetDeterminedReason() string {
	if x != nil {
		return x.DeterminedReason
	}
	return ""
}

func (x *Specimen_Primary) GetLastModified() *LastModified {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Secondary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preparation  string        `protobuf:"bytes,3,opt,name=preparation,proto3" json:"preparation,omitempty"`
	Condition    string        `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	Notes        string        `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	LastModified *LastModified `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Secondary) Reset() {
	*x = Specimen_Secondary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Secondary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Secondary) ProtoMessage() {}

func (x *Specimen_Secondary) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Secondary.ProtoReflect.Descriptor instead.
func (*Specimen_Secondary) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{5, 4}
}

func (x *Specimen_Secondary) GetPreparation() string {
	if x != nil {
		return x.Preparation
	}
	return ""
}

func (x *Specimen_Secondary) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Specimen_Secondary) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Specimen_Secondary) GetLastModified() *LastModified {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Taxon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kingdom      string        `protobuf:"bytes,1,opt,name=kingdom,proto3" json:"kingdom,omitempty"`
	Phylum       string        `protobuf:"bytes,2,opt,name=phylum,proto3" json:"phylum,omitempty"`
	Class        string        `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
	Order        string        `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	Family       string        `protobuf:"bytes,5,opt,name=family,proto3" json:"family,omitempty"`
	Genus        string        `protobuf:"bytes,6,opt,name=genus,proto3" json:"genus,omitempty"`
	Species      string        `protobuf:"bytes,7,opt,name=species,proto3" json:"species,omitempty"`
	Subspecies   string        `protobuf:"bytes,8,opt,name=subspecies,proto3" json:"subspecies,omitempty"`
	LastModified *LastModified `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Taxon) Reset() {
	*x = Specimen_Taxon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Taxon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Taxon) ProtoMessage() {}

func (x *Specimen_Taxon) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Taxon.ProtoReflect.Descriptor instead.
func (*Specimen_Taxon) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{5, 5}
}

func (x *Specimen_Taxon) GetKingdom() string {
	if x != nil {
		return x.Kingdom
	}
	return ""
}

func (x *Specimen_Taxon) GetPhylum() string {
	if x != nil {
		return x.Phylum
	}
	return ""
}

func (x *Specimen_Taxon) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Specimen_Taxon) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *Specimen_Taxon) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *Specimen_Taxon) GetGenus() string {
	if x != nil {
		return x.Genus
	}
	return ""
}

func (x *Specimen_Taxon) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *Specimen_Taxon) GetSubspecies() string {
	if x != nil {
		return x.Subspecies
	}
	return ""
}

func (x *Specimen_Taxon) GetLastModified() *LastModified {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_Georeference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country       string        `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	StateProvince string        `protobuf:"bytes,2,opt,name=state_province,json=stateProvince,proto3" json:"state_province,omitempty"`
	County        string        `protobuf:"bytes,3,opt,name=county,proto3" json:"county,omitempty"`
	Locality      string        `protobuf:"bytes,4,opt,name=locality,proto3" json:"locality,omitempty"`
	Latitude      string        `protobuf:"bytes,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     string        `protobuf:"bytes,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Habitat       string        `protobuf:"bytes,7,opt,name=habitat,proto3" json:"habitat,omitempty"`
	Notes         []string      `protobuf:"bytes,8,rep,name=notes,proto3" json:"notes,omitempty"`
	LastModified  *LastModified `protobuf:"bytes,10,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Georeference) Reset() {
	*x = Specimen_Georeference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Georeference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Georeference) ProtoMessage() {}

func (x *Specimen_Georeference) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Georeference.ProtoReflect.Descriptor instead.
func (*Specimen_Georeference) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{5, 6}
}

func (x *Specimen_Georeference) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Specimen_Georeference) GetStateProvince() string {
	if x != nil {
		return x.StateProvince
	}
	return ""
}

func (x *Specimen_Georeference) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *Specimen_Georeference) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *Specimen_Georeference) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *Specimen_Georeference) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *Specimen_Georeference) GetHabitat() string {
	if x != nil {
		return x.Habitat
	}
	return ""
}

func (x *Specimen_Georeference) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Specimen_Georeference) GetLastModified() *LastModified {
	if x != nil {
		return x.LastModified
	}
	return nil
}

// Mapped Types
type Specimen_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url          string        `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Notes        string        `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	Hash         string        `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	LastModified *LastModified `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_Image) Reset() {
	*x = Specimen_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Image) ProtoMessage() {}

func (x *Specimen_Image) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Image.ProtoReflect.Descriptor instead.
func (*Specimen_Image) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{5, 7}
}

func (x *Specimen_Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Specimen_Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Specimen_Image) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Specimen_Image) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Specimen_Image) GetLastModified() *LastModified {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_HiddenTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId  string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Notes string `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	// @prop Set this to a cleared struct to ignore this field in updates
	LastModified *LastModified `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Specimen_HiddenTx) Reset() {
	*x = Specimen_HiddenTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_HiddenTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_HiddenTx) ProtoMessage() {}

func (x *Specimen_HiddenTx) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_HiddenTx.ProtoReflect.Descriptor instead.
func (*Specimen_HiddenTx) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{5, 8}
}

func (x *Specimen_HiddenTx) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *Specimen_HiddenTx) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Specimen_HiddenTx) GetLastModified() *LastModified {
	if x != nil {
		return x.LastModified
	}
	return nil
}

type Specimen_History_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId      string                 `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsDeleted bool                   `protobuf:"varint,3,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	IsHidden  bool                   `protobuf:"varint,4,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	State     *Specimen              `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Specimen_History_Entry) Reset() {
	*x = Specimen_History_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_History_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_History_Entry) ProtoMessage() {}

func (x *Specimen_History_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_History_Entry.ProtoReflect.Descriptor instead.
func (*Specimen_History_Entry) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{5, 2, 0}
}

func (x *Specimen_History_Entry) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *Specimen_History_Entry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Specimen_History_Entry) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Specimen_History_Entry) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *Specimen_History_Entry) GetState() *Specimen {
	if x != nil {
		return x.State
	}
	return nil
}

type SuggestedUpdate_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecimenId *Specimen_Id `protobuf:"bytes,1,opt,name=specimen_id,json=specimenId,proto3" json:"specimen_id,omitempty"`
	Id         string       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SuggestedUpdate_Id) Reset() {
	*x = SuggestedUpdate_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccbio_schema_v1_state_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedUpdate_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedUpdate_Id) ProtoMessage() {}

func (x *SuggestedUpdate_Id) ProtoReflect() protoreflect.Message {
	mi := &file_ccbio_schema_v1_state_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedUpdate_Id.ProtoReflect.Descriptor instead.
func (*SuggestedUpdate_Id) Descriptor() ([]byte, []int) {
	return file_ccbio_schema_v1_state_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SuggestedUpdate_Id) GetSpecimenId() *Specimen_Id {
	if x != nil {
		return x.SpecimenId
	}
	return nil
}

func (x *SuggestedUpdate_Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_ccbio_schema_v1_state_proto protoreflect.FileDescriptor

var file_ccbio_schema_v1_state_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63,
	0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6b, 0x65, 0x79,
	0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xca, 0x04, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x63, 0x62,
	0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x11,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x56, 0x49, 0x45,
	0x57, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x44, 0x49,
	0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x47,
	0x47, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x48, 0x49,
	0x44, 0x45, 0x5f, 0x54, 0x58, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x09, 0x22, 0xfd, 0x01, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x4d, 0x45,
	0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x05, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x58, 0x4f, 0x4e, 0x10, 0x06, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x45, 0x4f, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x53, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4c, 0x4f, 0x41, 0x4e, 0x53, 0x10, 0x09, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x53, 0x10, 0x0a,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x22, 0xea, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x32,
	0x0a, 0x02, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x1a, 0x38, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x63, 0x62, 0x69,
	0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xe5, 0x0c, 0x0a,
	0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x5b,
	0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x63, 0x62,
	0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x63, 0x62,
	0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x5d, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x12, 0x55, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c,
	0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63,
	0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x05, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x06,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63,
	0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x7e, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x63,
	0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x32, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x04, 0x65, 0x64, 0x69, 0x74, 0x1a, 0xee, 0x01, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x36, 0x0a,
	0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x68, 0x69, 0x64, 0x65, 0x54, 0x78, 0x1a, 0xcb, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a,
	0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x63,
	0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x04, 0x65, 0x64, 0x69,
	0x74, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x45, 0x64, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x45, 0x0a,
	0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x42, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb2, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x1a, 0x3d, 0x0a, 0x02, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x32, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x54, 0x0a, 0x10,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x09, 0xba, 0xd4, 0x1a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xa7, 0x16,
	0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x42, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x3c, 0x0a,
	0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0c, 0x67,
	0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0c, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3c,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x61,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54,
	0x78, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54,
	0x78, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62, 0x69,
	0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x4c, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x1a, 0x36, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x63, 0x62,
	0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xc5, 0x02, 0x0a, 0x07,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x64,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xc2,
	0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xae, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x43, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x1a, 0xa4, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31,
	0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x90, 0x02, 0x0a, 0x05,
	0x54, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x68, 0x79, 0x6c, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x68, 0x79, 0x6c, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x65, 0x6e, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0xb0,
	0x02, 0x0a, 0x0c, 0x47, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x1a, 0x96, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x80, 0x01, 0x0a, 0x08, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x78, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x63, 0x62, 0x69,
	0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x59, 0x0a,
	0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0e, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x54, 0x78, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x63,
	0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x54, 0x78, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x0c, 0xba, 0xd4, 0x1a, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x22, 0x8a, 0x05, 0x0a, 0x0f, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x40, 0x0a,
	0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x52, 0x05,
	0x74, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x63,
	0x62, 0x69, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x64,
	0x0a, 0x02, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x63, 0x62, 0x69,
	0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x12, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x63, 0x62, 0x69,
	0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x2a, 0x6d, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53,
	0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x04,
	0x42, 0xaa, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x42, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6e, 0x6f, 0x76, 0x61, 0x33, 0x38, 0x2f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x63, 0x62, 0x69, 0x6f, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x0e, 0x43,
	0x63, 0x62, 0x69, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0xca, 0x02, 0x0e,
	0x43, 0x63, 0x62, 0x69, 0x6f, 0x5c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0xe2, 0x02,
	0x1a, 0x43, 0x63, 0x62, 0x69, 0x6f, 0x5c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x43, 0x63,
	0x62, 0x69, 0x6f, 0x3a, 0x3a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ccbio_schema_v1_state_proto_rawDescOnce sync.Once
	file_ccbio_schema_v1_state_proto_rawDescData = file_ccbio_schema_v1_state_proto_rawDesc
)

func file_ccbio_schema_v1_state_proto_rawDescGZIP() []byte {
	file_ccbio_schema_v1_state_proto_rawDescOnce.Do(func() {
		file_ccbio_schema_v1_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_ccbio_schema_v1_state_proto_rawDescData)
	})
	return file_ccbio_schema_v1_state_proto_rawDescData
}

var file_ccbio_schema_v1_state_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ccbio_schema_v1_state_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_ccbio_schema_v1_state_proto_goTypes = []interface{}{
	(Role)(0),                        // 0: ccbio.schemav1.Role
	(Action_Level)(0),                // 1: ccbio.schemav1.Action.Level
	(Action_Domain)(0),               // 2: ccbio.schemav1.Action.Domain
	(*LastModified)(nil),             // 3: ccbio.schemav1.LastModified
	(*Action)(nil),                   // 4: ccbio.schemav1.Action
	(*Collection)(nil),               // 5: ccbio.schemav1.Collection
	(*CollectionList)(nil),           // 6: ccbio.schemav1.CollectionList
	(*User)(nil),                     // 7: ccbio.schemav1.User
	(*Specimen)(nil),                 // 8: ccbio.schemav1.Specimen
	(*SuggestedUpdate)(nil),          // 9: ccbio.schemav1.SuggestedUpdate
	(*SuggestedStateList)(nil),       // 10: ccbio.schemav1.SuggestedStateList
	(*Collection_Id)(nil),            // 11: ccbio.schemav1.Collection.Id
	(*Collection_List)(nil),          // 12: ccbio.schemav1.Collection.List
	(*Collection_AccessControl)(nil), // 13: ccbio.schemav1.Collection.AccessControl
	(*Collection_AccessControl_AccessControlActions)(nil), // 14: ccbio.schemav1.Collection.AccessControl.AccessControlActions
	(*Collection_AccessControl_SpecimenActions)(nil),      // 15: ccbio.schemav1.Collection.AccessControl.SpecimenActions
	(*Collection_AccessControl_SectionActions)(nil),       // 16: ccbio.schemav1.Collection.AccessControl.SectionActions
	(*User_Id)(nil),                // 17: ccbio.schemav1.User.Id
	(*User_List)(nil),              // 18: ccbio.schemav1.User.List
	nil,                            // 19: ccbio.schemav1.User.MembershipsEntry
	(*Specimen_Id)(nil),            // 20: ccbio.schemav1.Specimen.Id
	(*Specimen_List)(nil),          // 21: ccbio.schemav1.Specimen.List
	(*Specimen_History)(nil),       // 22: ccbio.schemav1.Specimen.History
	(*Specimen_Primary)(nil),       // 23: ccbio.schemav1.Specimen.Primary
	(*Specimen_Secondary)(nil),     // 24: ccbio.schemav1.Specimen.Secondary
	(*Specimen_Taxon)(nil),         // 25: ccbio.schemav1.Specimen.Taxon
	(*Specimen_Georeference)(nil),  // 26: ccbio.schemav1.Specimen.Georeference
	(*Specimen_Image)(nil),         // 27: ccbio.schemav1.Specimen.Image
	(*Specimen_HiddenTx)(nil),      // 28: ccbio.schemav1.Specimen.HiddenTx
	nil,                            // 29: ccbio.schemav1.Specimen.ImagesEntry
	nil,                            // 30: ccbio.schemav1.Specimen.HiddenTxsEntry
	(*Specimen_History_Entry)(nil), // 31: ccbio.schemav1.Specimen.History.Entry
	(*SuggestedUpdate_Id)(nil),     // 32: ccbio.schemav1.SuggestedUpdate.Id
	(*timestamppb.Timestamp)(nil),  // 33: google.protobuf.Timestamp
}
var file_ccbio_schema_v1_state_proto_depIdxs = []int32{
	17, // 0: ccbio.schemav1.LastModified.user_id:type_name -> ccbio.schemav1.User.Id
	33, // 1: ccbio.schemav1.LastModified.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 2: ccbio.schemav1.Action.level:type_name -> ccbio.schemav1.Action.Level
	2,  // 3: ccbio.schemav1.Action.domains:type_name -> ccbio.schemav1.Action.Domain
	11, // 4: ccbio.schemav1.Collection.id:type_name -> ccbio.schemav1.Collection.Id
	13, // 5: ccbio.schemav1.Collection.access_control:type_name -> ccbio.schemav1.Collection.AccessControl
	5,  // 6: ccbio.schemav1.CollectionList.items:type_name -> ccbio.schemav1.Collection
	17, // 7: ccbio.schemav1.User.id:type_name -> ccbio.schemav1.User.Id
	19, // 8: ccbio.schemav1.User.memberships:type_name -> ccbio.schemav1.User.MembershipsEntry
	20, // 9: ccbio.schemav1.Specimen.id:type_name -> ccbio.schemav1.Specimen.Id
	23, // 10: ccbio.schemav1.Specimen.primary:type_name -> ccbio.schemav1.Specimen.Primary
	24, // 11: ccbio.schemav1.Specimen.secondary:type_name -> ccbio.schemav1.Specimen.Secondary
	25, // 12: ccbio.schemav1.Specimen.taxon:type_name -> ccbio.schemav1.Specimen.Taxon
	26, // 13: ccbio.schemav1.Specimen.georeference:type_name -> ccbio.schemav1.Specimen.Georeference
	29, // 14: ccbio.schemav1.Specimen.images:type_name -> ccbio.schemav1.Specimen.ImagesEntry
	30, // 15: ccbio.schemav1.Specimen.hidden_txs:type_name -> ccbio.schemav1.Specimen.HiddenTxsEntry
	3,  // 16: ccbio.schemav1.Specimen.last_modified:type_name -> ccbio.schemav1.LastModified
	32, // 17: ccbio.schemav1.SuggestedUpdate.id:type_name -> ccbio.schemav1.SuggestedUpdate.Id
	17, // 18: ccbio.schemav1.SuggestedUpdate.suggested_by:type_name -> ccbio.schemav1.User.Id
	33, // 19: ccbio.schemav1.SuggestedUpdate.suggested_date:type_name -> google.protobuf.Timestamp
	23, // 20: ccbio.schemav1.SuggestedUpdate.primary:type_name -> ccbio.schemav1.Specimen.Primary
	24, // 21: ccbio.schemav1.SuggestedUpdate.secondary:type_name -> ccbio.schemav1.Specimen.Secondary
	25, // 22: ccbio.schemav1.SuggestedUpdate.taxon:type_name -> ccbio.schemav1.Specimen.Taxon
	26, // 23: ccbio.schemav1.SuggestedUpdate.georeference:type_name -> ccbio.schemav1.Specimen.Georeference
	9,  // 24: ccbio.schemav1.SuggestedStateList.items:type_name -> ccbio.schemav1.SuggestedUpdate
	5,  // 25: ccbio.schemav1.Collection.List.items:type_name -> ccbio.schemav1.Collection
	14, // 26: ccbio.schemav1.Collection.AccessControl.roles:type_name -> ccbio.schemav1.Collection.AccessControl.AccessControlActions
	14, // 27: ccbio.schemav1.Collection.AccessControl.users:type_name -> ccbio.schemav1.Collection.AccessControl.AccessControlActions
	15, // 28: ccbio.schemav1.Collection.AccessControl.specimen:type_name -> ccbio.schemav1.Collection.AccessControl.SpecimenActions
	16, // 29: ccbio.schemav1.Collection.AccessControl.primary:type_name -> ccbio.schemav1.Collection.AccessControl.SectionActions
	16, // 30: ccbio.schemav1.Collection.AccessControl.secondary:type_name -> ccbio.schemav1.Collection.AccessControl.SectionActions
	16, // 31: ccbio.schemav1.Collection.AccessControl.taxon:type_name -> ccbio.schemav1.Collection.AccessControl.SectionActions
	16, // 32: ccbio.schemav1.Collection.AccessControl.georeference:type_name -> ccbio.schemav1.Collection.AccessControl.SectionActions
	16, // 33: ccbio.schemav1.Collection.AccessControl.images:type_name -> ccbio.schemav1.Collection.AccessControl.SectionActions
	16, // 34: ccbio.schemav1.Collection.AccessControl.loans:type_name -> ccbio.schemav1.Collection.AccessControl.SectionActions
	16, // 35: ccbio.schemav1.Collection.AccessControl.grants:type_name -> ccbio.schemav1.Collection.AccessControl.SectionActions
	0,  // 36: ccbio.schemav1.Collection.AccessControl.AccessControlActions.view:type_name -> ccbio.schemav1.Role
	0,  // 37: ccbio.schemav1.Collection.AccessControl.AccessControlActions.edit:type_name -> ccbio.schemav1.Role
	0,  // 38: ccbio.schemav1.Collection.AccessControl.SpecimenActions.view:type_name -> ccbio.schemav1.Role
	0,  // 39: ccbio.schemav1.Collection.AccessControl.SpecimenActions.create:type_name -> ccbio.schemav1.Role
	0,  // 40: ccbio.schemav1.Collection.AccessControl.SpecimenActions.delete:type_name -> ccbio.schemav1.Role
	0,  // 41: ccbio.schemav1.Collection.AccessControl.SpecimenActions.hide_tx:type_name -> ccbio.schemav1.Role
	0,  // 42: ccbio.schemav1.Collection.AccessControl.SectionActions.view:type_name -> ccbio.schemav1.Role
	0,  // 43: ccbio.schemav1.Collection.AccessControl.SectionActions.edit:type_name -> ccbio.schemav1.Role
	0,  // 44: ccbio.schemav1.Collection.AccessControl.SectionActions.suggest_edit:type_name -> ccbio.schemav1.Role
	0,  // 45: ccbio.schemav1.Collection.AccessControl.SectionActions.suggest_approve:type_name -> ccbio.schemav1.Role
	0,  // 46: ccbio.schemav1.Collection.AccessControl.SectionActions.suggest_reject:type_name -> ccbio.schemav1.Role
	7,  // 47: ccbio.schemav1.User.List.items:type_name -> ccbio.schemav1.User
	0,  // 48: ccbio.schemav1.User.MembershipsEntry.value:type_name -> ccbio.schemav1.Role
	8,  // 49: ccbio.schemav1.Specimen.List.items:type_name -> ccbio.schemav1.Specimen
	20, // 50: ccbio.schemav1.Specimen.History.id:type_name -> ccbio.schemav1.Specimen.Id
	31, // 51: ccbio.schemav1.Specimen.History.entries:type_name -> ccbio.schemav1.Specimen.History.Entry
	33, // 52: ccbio.schemav1.Specimen.Primary.field_date:type_name -> google.protobuf.Timestamp
	33, // 53: ccbio.schemav1.Specimen.Primary.catalog_date:type_name -> google.protobuf.Timestamp
	33, // 54: ccbio.schemav1.Specimen.Primary.determined_date:type_name -> google.protobuf.Timestamp
	3,  // 55: ccbio.schemav1.Specimen.Primary.last_modified:type_name -> ccbio.schemav1.LastModified
	3,  // 56: ccbio.schemav1.Specimen.Secondary.last_modified:type_name -> ccbio.schemav1.LastModified
	3,  // 57: ccbio.schemav1.Specimen.Taxon.last_modified:type_name -> ccbio.schemav1.LastModified
	3,  // 58: ccbio.schemav1.Specimen.Georeference.last_modified:type_name -> ccbio.schemav1.LastModified
	3,  // 59: ccbio.schemav1.Specimen.Image.last_modified:type_name -> ccbio.schemav1.LastModified
	3,  // 60: ccbio.schemav1.Specimen.HiddenTx.last_modified:type_name -> ccbio.schemav1.LastModified
	27, // 61: ccbio.schemav1.Specimen.ImagesEntry.value:type_name -> ccbio.schemav1.Specimen.Image
	28, // 62: ccbio.schemav1.Specimen.HiddenTxsEntry.value:type_name -> ccbio.schemav1.Specimen.HiddenTx
	33, // 63: ccbio.schemav1.Specimen.History.Entry.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 64: ccbio.schemav1.Specimen.History.Entry.state:type_name -> ccbio.schemav1.Specimen
	20, // 65: ccbio.schemav1.SuggestedUpdate.Id.specimen_id:type_name -> ccbio.schemav1.Specimen.Id
	66, // [66:66] is the sub-list for method output_type
	66, // [66:66] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_ccbio_schema_v1_state_proto_init() }
func file_ccbio_schema_v1_state_proto_init() {
	if File_ccbio_schema_v1_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ccbio_schema_v1_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastModified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedStateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_AccessControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_AccessControl_AccessControlActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_AccessControl_SpecimenActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection_AccessControl_SectionActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Primary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Secondary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Taxon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Georeference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_HiddenTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_History_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccbio_schema_v1_state_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedUpdate_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ccbio_schema_v1_state_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ccbio_schema_v1_state_proto_goTypes,
		DependencyIndexes: file_ccbio_schema_v1_state_proto_depIdxs,
		EnumInfos:         file_ccbio_schema_v1_state_proto_enumTypes,
		MessageInfos:      file_ccbio_schema_v1_state_proto_msgTypes,
	}.Build()
	File_ccbio_schema_v1_state_proto = out.File
	file_ccbio_schema_v1_state_proto_rawDesc = nil
	file_ccbio_schema_v1_state_proto_goTypes = nil
	file_ccbio_schema_v1_state_proto_depIdxs = nil
}
